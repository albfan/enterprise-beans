[#50421769_pgfId-417733]## 

[#50421769_pgfId-417853]##EJB 3.2 Expert Group

image:Ejb-1.gif[image]

[#50421769_pgfId-415117]## 

[#50421769_pgfId-419575]##Specification Lead:

[#50421769_pgfId-419608]##Marina Vatkina, Oracle

[#50421769_pgfId-419636]## 

image:Ejb-2.gif[image]

image:Ejb-3.gif[image]

[#50421769_pgfId-419418]## 

[#50421769_pgfId-419761]##Please send comments to:
users@ejb-spec.java.net

[#50421769_pgfId-419419]##Specification: JSR-000345 Enterprise JavaBeans
Specification ("Specification")

[#50421769_pgfId-419420]##Version: 3.2

[#50421769_pgfId-418848]##Status: Final Release

[#50421769_pgfId-419883]##Specification Lead: Oracle America, Inc.
("Specification Lead")

[#50421769_pgfId-418849]##Release: April 30, 2013

[#50421769_pgfId-418850]## 

[#50421769_pgfId-419896]##Copyright 2013 Oracle America, Inc.

[#50421769_pgfId-419897]##500 Oracle Parkway, Redwood City, California
94065, U.S.A.

[#50421769_pgfId-419898]## 

[#50421769_pgfId-419899]##All rights reserved.

======= [#50421761_pgfId-699529]## _link:Ejb.htm#50421764_pgfId-1683418[Chapter 1 Introduction 16]_

[#50421761_pgfId-699531]## _link:Ejb.htm#50421764_pgfId-1256266[1.1
Acknowledgements 17]_

[#50421761_pgfId-699533]## _link:Ejb.htm#50421764_pgfId-1691483[1.2
Organization of the Specification Documents 17]_

[#50421761_pgfId-699535]## _link:Ejb.htm#50421764_pgfId-1256282[1.3
Document Conventions 17]_

======= [#50421761_pgfId-699537]## _link:Ejb.htm#50421764_pgfId-1601599[Chapter 2 Overview 18]_

======= [#50421761_pgfId-699539]## _link:Ejb.htm#50421764_pgfId-1600071[Chapter 3 Client View of an Entity Bean 20]_

[#50421761_pgfId-699541]## _link:Ejb.htm#50421764_pgfId-1201419[3.1
Overview 20]_

[#50421761_pgfId-699543]## _link:Ejb.htm#50421764_pgfId-1201432[3.2
Remote Clients 21]_

[#50421761_pgfId-699545]## _link:Ejb.htm#50421764_pgfId-1469044[3.3
Local Clients 22]_

[#50421761_pgfId-699547]## _link:Ejb.htm#50421764_pgfId-1691715[3.4
Choosing Between a Local or Remote Client View 22]_

[#50421761_pgfId-699549]## _link:Ejb.htm#50421764_pgfId-1469144[3.5 EJB
Container 23]_

[#50421761_pgfId-699551]## _link:Ejb.htm#50421764_pgfId-1201436[3.5.1
Locating an Entity Bean’s Home Interface 23]_

[#50421761_pgfId-699553]## _link:Ejb.htm#50421764_pgfId-1201445[3.5.2
What a Container Provides 24]_

[#50421761_pgfId-699555]## _link:Ejb.htm#50421764_pgfId-1201488[3.6
Entity Bean’s Remote Home Interface 24]_

[#50421761_pgfId-699557]## _link:Ejb.htm#50421764_pgfId-1201496[3.6.1
Create Methods 25]_

[#50421761_pgfId-699559]## _link:Ejb.htm#50421764_pgfId-1201517[3.6.2
Finder Methods 26]_

[#50421761_pgfId-699561]## _link:Ejb.htm#50421764_pgfId-1368284[3.6.3
Remove Methods 27]_

[#50421761_pgfId-699563]## _link:Ejb.htm#50421764_pgfId-1368249[3.6.4
Home Methods 27]_

[#50421761_pgfId-699565]## _link:Ejb.htm#50421764_pgfId-1469244[3.7
Entity Bean’s Local Home Interface 28]_

[#50421761_pgfId-699567]## _link:Ejb.htm#50421764_pgfId-1469255[3.7.1
Create Methods 28]_

[#50421761_pgfId-699569]## _link:Ejb.htm#50421764_pgfId-1691174[3.7.2
Finder Methods 29]_

[#50421761_pgfId-699571]## _link:Ejb.htm#50421764_pgfId-1469306[3.7.3
Remove Methods 30]_

[#50421761_pgfId-699573]## _link:Ejb.htm#50421764_pgfId-1469317[3.7.4
Home Methods 30]_

[#50421761_pgfId-699575]## _link:Ejb.htm#50421764_pgfId-1201553[3.8
Entity Object’s Life Cycle 31]_

[#50421761_pgfId-699577]## _link:Ejb.htm#50421764_pgfId-1311412[3.8.1
References to Entity Object Remote Interfaces 32]_

[#50421761_pgfId-699579]## _link:Ejb.htm#50421764_pgfId-1469531[3.8.2
References to Entity Object Local Interfaces 32]_

[#50421761_pgfId-699581]## _link:Ejb.htm#50421764_pgfId-1691870[3.8.3
References to Entity Object and Stateful Session Bean Instance
Passivation and Conversational State 33]_

[#50421761_pgfId-699583]## _link:Ejb.htm#50421764_pgfId-1201633[3.9
Primary Key and Object Identity 33]_

[#50421761_pgfId-699585]## _link:Ejb.htm#50421764_pgfId-1201653[3.10
Entity Bean’s Remote Interface 34]_

[#50421761_pgfId-699587]## _link:Ejb.htm#50421764_pgfId-1469576[3.11
Entity Bean’s Local Interface 35]_

[#50421761_pgfId-699589]## _link:Ejb.htm#50421764_pgfId-1201674[3.12
Entity Bean’s Handle 36]_

[#50421761_pgfId-699591]## _link:Ejb.htm#50421764_pgfId-1287525[3.13
Entity Home Handles 37]_

[#50421761_pgfId-699593]## _link:Ejb.htm#50421764_pgfId-1289853[3.14
Type Narrowing of Object References 37]_

======= [#50421761_pgfId-699595]## _link:Ejb.htm#50421764_pgfId-1430602[Chapter 4 EJB 2.1 Entity Bean Component Contract for Container-Managed Persistence 40]_

[#50421761_pgfId-699597]## _link:Ejb.htm#50421764_pgfId-1430605[4.1
Overview 41]_

[#50421761_pgfId-699599]## _link:Ejb.htm#50421764_pgfId-1430624[4.2
Container-Managed Entity Persistence and Data Independence 41]_

[#50421761_pgfId-699601]## _link:Ejb.htm#50421764_pgfId-1430705[4.3 The
Entity Bean Provider’s View of Container-Managed Persistence 43]_

[#50421761_pgfId-699603]## _link:Ejb.htm#50421764_pgfId-1430714[4.3.1
The Entity Bean Provider’s Programming Contract 44]_

[#50421761_pgfId-699605]## _link:Ejb.htm#50421764_pgfId-1462338[4.3.2
The Entity Bean Provider’s View of Persistent Relationships 46]_

[#50421761_pgfId-699607]## _link:Ejb.htm#50421764_pgfId-1430772[4.3.3
Dependent Value Classes 46]_

[#50421761_pgfId-699609]## _link:Ejb.htm#50421764_pgfId-1430790[4.3.4
Remove Protocols 47]_

[#50421761_pgfId-699611]## _link:Ejb.htm#50421764_pgfId-1462514[4.3.4.1
Remove Methods 47]_

[#50421761_pgfId-699613]## _link:Ejb.htm#50421764_pgfId-1463190[4.3.4.2
Cascade-delete 48]_

[#50421761_pgfId-699615]## _link:Ejb.htm#50421764_pgfId-1430839[4.3.5
Identity of Entity Objects 48]_

[#50421761_pgfId-699617]## _link:Ejb.htm#50421764_pgfId-1430861[4.3.6
Semantics of Assignment for Relationships 49]_

[#50421761_pgfId-699619]## _link:Ejb.htm#50421764_pgfId-1458874[4.3.6.1
Use of the java.util.Collection API to Update Relationships 49]_

[#50421761_pgfId-699621]## _link:Ejb.htm#50421764_pgfId-1458988[4.3.6.2
Use of Set Accessor Methods to Update Relationships 51]_

[#50421761_pgfId-699623]## _link:Ejb.htm#50421764_pgfId-1430888[4.3.7
Assignment Rules for Relationships 52]_

[#50421761_pgfId-699625]## _link:Ejb.htm#50421764_pgfId-1430894[4.3.7.1
One-to-one Bidirectional Relationships 53]_

[#50421761_pgfId-699627]## _link:Ejb.htm#50421764_pgfId-1430972[4.3.7.2
One-to-one Unidirectional Relationships 54]_

[#50421761_pgfId-699629]## _link:Ejb.htm#50421764_pgfId-1431040[4.3.7.3
One-to-many Bidirectional Relationships 55]_

[#50421761_pgfId-699631]## _link:Ejb.htm#50421764_pgfId-1431409[4.3.7.4
One-to-many Unidirectional Relationships 59]_

[#50421761_pgfId-699633]## _link:Ejb.htm#50421764_pgfId-1431695[4.3.7.5
Many-to-one Unidirectional Relationships 62]_

[#50421761_pgfId-699635]## _link:Ejb.htm#50421764_pgfId-1431851[4.3.7.6
Many-to-many Bidirectional Relationships 64]_

[#50421761_pgfId-699637]## _link:Ejb.htm#50421764_pgfId-1432120[4.3.7.7
Many-to-many Unidirectional Relationships 68]_

[#50421761_pgfId-699639]## _link:Ejb.htm#50421764_pgfId-1432381[4.3.8
Collections Managed by the Container 71]_

[#50421761_pgfId-699641]## _link:Ejb.htm#50421764_pgfId-1432398[4.3.9
Non-persistent State 71]_

[#50421761_pgfId-699643]## _link:Ejb.htm#50421764_pgfId-1432403[4.3.10
The Relationship Between the Internal View and the Client View 72]_

[#50421761_pgfId-699645]## _link:Ejb.htm#50421764_pgfId-1432410[4.3.10.1
Restrictions on Remote Interfaces 72]_

[#50421761_pgfId-699647]## _link:Ejb.htm#50421764_pgfId-1432418[4.3.11
Mapping Data to a Persistent Store 72]_

[#50421761_pgfId-699649]## _link:Ejb.htm#50421764_pgfId-1432428[4.3.12
Example 73]_

[#50421761_pgfId-699651]## _link:Ejb.htm#50421764_pgfId-1480040[4.3.13
The Bean Provider’s View of the Deployment Descriptor 76]_

[#50421761_pgfId-699653]## _link:Ejb.htm#50421764_pgfId-1432908[4.4 The
Entity Bean Component Contract 80]_

[#50421761_pgfId-699655]## _link:Ejb.htm#50421764_pgfId-1432910[4.4.1
Runtime Execution Model of Entity Beans 80]_

[#50421761_pgfId-699657]## _link:Ejb.htm#50421764_pgfId-1433127[4.4.2
Container Responsibilities 82]_

[#50421761_pgfId-699659]## _link:Ejb.htm#50421764_pgfId-1433128[4.4.2.1
Container-Managed Fields 82]_

[#50421761_pgfId-699661]## _link:Ejb.htm#50421764_pgfId-1433137[4.4.2.2
Container-Managed Relationships 82]_

[#50421761_pgfId-699663]## _link:Ejb.htm#50421764_pgfId-1433153[4.5
Instance Life Cycle Contract Between the Bean and the Container 83]_

[#50421761_pgfId-699665]## _link:Ejb.htm#50421764_pgfId-1433157[4.5.1
Instance Life Cycle 84]_

[#50421761_pgfId-699667]## _link:Ejb.htm#50421764_pgfId-1433246[4.5.2
Bean Provider’s Entity Bean Instance’s View 86]_

[#50421761_pgfId-699669]## _link:Ejb.htm#50421764_pgfId-1433420[4.5.3
Container’s View 90]_

[#50421761_pgfId-699671]## _link:Ejb.htm#50421764_pgfId-1482445[4.5.4
Read-only Entity Beans 95]_

[#50421761_pgfId-699673]## _link:Ejb.htm#50421764_pgfId-1629573[4.5.5
The EntityContext Interface 95]_

[#50421761_pgfId-699675]## _link:Ejb.htm#50421764_pgfId-1433494[4.5.6
Operations Allowed in the Methods of the Entity Bean Class 96]_

[#50421761_pgfId-699677]## _link:Ejb.htm#50421764_pgfId-1433590[4.5.7
Finder Methods 99]_

[#50421761_pgfId-699679]## _link:Ejb.htm#50421764_pgfId-1433600[4.5.7.1
Single-Object Finder Methods 99]_

[#50421761_pgfId-699681]## _link:Ejb.htm#50421764_pgfId-1433615[4.5.7.2
Multi-Object Finder Methods 100]_

[#50421761_pgfId-699683]## _link:Ejb.htm#50421764_pgfId-1433632[4.5.8
Select Methods 100]_

[#50421761_pgfId-699685]## _link:Ejb.htm#50421764_pgfId-1433676[4.5.8.1
Single-Object Select Methods 101]_

[#50421761_pgfId-699687]## _link:Ejb.htm#50421764_pgfId-1433680[4.5.8.2
Multi-Object Select Methods 102]_

[#50421761_pgfId-699689]## _link:Ejb.htm#50421764_pgfId-1433697[4.5.9
Timer Notifications 102]_

[#50421761_pgfId-699691]## _link:Ejb.htm#50421764_pgfId-1555344[4.5.10
Standard Application Exceptions for Entities 102]_

[#50421761_pgfId-699693]## _link:Ejb.htm#50421764_pgfId-1433706[4.5.10.1
CreateException 103]_

[#50421761_pgfId-699695]## _link:Ejb.htm#50421764_pgfId-1433715[4.5.10.2
DuplicateKeyException 103]_

[#50421761_pgfId-699697]## _link:Ejb.htm#50421764_pgfId-1433720[4.5.10.3
FinderException 103]_

[#50421761_pgfId-699699]## _link:Ejb.htm#50421764_pgfId-1433730[4.5.10.4
ObjectNotFoundException 104]_

[#50421761_pgfId-699701]## _link:Ejb.htm#50421764_pgfId-1433740[4.5.10.5
RemoveException 104]_

[#50421761_pgfId-699703]## _link:Ejb.htm#50421764_pgfId-1433751[4.5.11
Commit Options 104]_

[#50421761_pgfId-699705]## _link:Ejb.htm#50421764_pgfId-1433808[4.5.12
Concurrent Access from Multiple Transactions 106]_

[#50421761_pgfId-699707]## _link:Ejb.htm#50421764_pgfId-1477248[4.5.13
Non-reentrant and Re-entrant Instances 107]_

[#50421761_pgfId-699709]## _link:Ejb.htm#50421764_pgfId-1433898[4.6
Responsibilities of the Enterprise Bean Provider 108]_

[#50421761_pgfId-699711]## _link:Ejb.htm#50421764_pgfId-1433900[4.6.1
Classes and Interfaces 108]_

[#50421761_pgfId-699713]## _link:Ejb.htm#50421764_pgfId-1433907[4.6.2
Enterprise Bean Class 109]_

[#50421761_pgfId-699715]## _link:Ejb.htm#50421764_pgfId-1433936[4.6.3
Dependent Value Classes 110]_

[#50421761_pgfId-699717]## _link:Ejb.htm#50421764_pgfId-1433941[4.6.4
ejbCreate<METHOD> Methods 110]_

[#50421761_pgfId-699719]## _link:Ejb.htm#50421764_pgfId-1433954[4.6.5
ejbPostCreate<METHOD> Methods 110]_

[#50421761_pgfId-699721]## _link:Ejb.htm#50421764_pgfId-1433967[4.6.6
ejbHome<METHOD> Methods 111]_

[#50421761_pgfId-699723]## _link:Ejb.htm#50421764_pgfId-1433975[4.6.7
ejbSelect<METHOD> Methods 111]_

[#50421761_pgfId-699725]## _link:Ejb.htm#50421764_pgfId-1511211[4.6.8
Business Methods 112]_

[#50421761_pgfId-699727]## _link:Ejb.htm#50421764_pgfId-1434000[4.6.9
Entity Bean’s Remote Interface 112]_

[#50421761_pgfId-699729]## _link:Ejb.htm#50421764_pgfId-1434017[4.6.10
Entity Bean’s Remote Home Interface 113]_

[#50421761_pgfId-699731]## _link:Ejb.htm#50421764_pgfId-1466782[4.6.11
Entity Bean’s Local Interface 114]_

[#50421761_pgfId-699733]## _link:Ejb.htm#50421764_pgfId-1466873[4.6.12
Entity Bean’s Local Home Interface 114]_

[#50421761_pgfId-699735]## _link:Ejb.htm#50421764_pgfId-1434038[4.6.13
Entity Bean’s Primary Key Class 115]_

[#50421761_pgfId-699737]## _link:Ejb.htm#50421764_pgfId-1434044[4.6.14
Entity Bean’s Deployment Descriptor 115]_

[#50421761_pgfId-699739]## _link:Ejb.htm#50421764_pgfId-1434135[4.7 The
Responsibilities of the Container Provider 116]_

[#50421761_pgfId-699741]## _link:Ejb.htm#50421764_pgfId-1434139[4.7.1
Generation of Implementation Classes 116]_

[#50421761_pgfId-699743]## _link:Ejb.htm#50421764_pgfId-1463470[4.7.2
Enterprise Bean Class 117]_

[#50421761_pgfId-699745]## _link:Ejb.htm#50421764_pgfId-1488296[4.7.3
ejbFind<METHOD> Methods 117]_

[#50421761_pgfId-699747]## _link:Ejb.htm#50421764_pgfId-1468142[4.7.4
ejbSelect<METHOD> Methods 118]_

[#50421761_pgfId-699749]## _link:Ejb.htm#50421764_pgfId-1434147[4.7.5
Entity EJBHome Class 118]_

[#50421761_pgfId-699751]## _link:Ejb.htm#50421764_pgfId-1434155[4.7.6
Entity EJBObject Class 119]_

[#50421761_pgfId-699753]## _link:Ejb.htm#50421764_pgfId-1466955[4.7.7
Entity EJBLocalHome Class 119]_

[#50421761_pgfId-699755]## _link:Ejb.htm#50421764_pgfId-1467003[4.7.8
Entity EJBLocalObject Class 120]_

[#50421761_pgfId-699757]## _link:Ejb.htm#50421764_pgfId-1434160[4.7.9
Handle Class 120]_

[#50421761_pgfId-699759]## _link:Ejb.htm#50421764_pgfId-1434164[4.7.10
Home Handle Class 120]_

[#50421761_pgfId-699761]## _link:Ejb.htm#50421764_pgfId-1434168[4.7.11
Metadata Class 120]_

[#50421761_pgfId-699763]## _link:Ejb.htm#50421764_pgfId-1434172[4.7.12
Instance’s Re-entrance 120]_

[#50421761_pgfId-699765]## _link:Ejb.htm#50421764_pgfId-1434177[4.7.13
Transaction Scoping, Security, Exceptions 121]_

[#50421761_pgfId-699767]## _link:Ejb.htm#50421764_pgfId-1434188[4.7.14
Implementation of Object References 121]_

[#50421761_pgfId-699769]## _link:Ejb.htm#50421764_pgfId-1434192[4.7.15
EntityContext 121]_

[#50421761_pgfId-699771]## _link:Ejb.htm#50421764_pgfId-1467182[4.8
Primary Keys 121]_

[#50421761_pgfId-699773]## _link:Ejb.htm#50421764_pgfId-1467193[4.8.1
Primary Key That Maps to a Single Field in the Entity Bean Class 122]_

[#50421761_pgfId-699775]## _link:Ejb.htm#50421764_pgfId-1467196[4.8.2
Primary Key That Maps to Multiple Fields in the Entity Bean Class 122]_

[#50421761_pgfId-699777]## _link:Ejb.htm#50421764_pgfId-1467202[4.8.3
Special Case: Unknown Primary Key Class 122]_

======= [#50421761_pgfId-699779]## _link:Ejb.htm#50421764_pgfId-1640549[Chapter 5 EJB QL: EJB 2.1 Query Language for Container-Managed Persistence Query Methods 124]_

[#50421761_pgfId-699781]## _link:Ejb.htm#50421764_pgfId-1640553[5.1
Overview 125]_

[#50421761_pgfId-699783]## _link:Ejb.htm#50421764_pgfId-1640564[5.2 EJB
QL Definition 125]_

[#50421761_pgfId-699785]## _link:Ejb.htm#50421764_pgfId-1640583[5.2.1
Abstract Schema Types and Query Domains 126]_

[#50421761_pgfId-699787]## _link:Ejb.htm#50421764_pgfId-1640597[5.2.2
Query Methods 127]_

[#50421761_pgfId-699789]## _link:Ejb.htm#50421764_pgfId-1640604[5.2.3
Naming 127]_

[#50421761_pgfId-699791]## _link:Ejb.htm#50421764_pgfId-1640609[5.2.4
Examples 128]_

[#50421761_pgfId-699793]## _link:Ejb.htm#50421764_pgfId-1640668[5.2.5
The FROM Clause and Navigational Declarations 129]_

[#50421761_pgfId-699795]## _link:Ejb.htm#50421764_pgfId-1640678[5.2.5.1
Identifiers 130]_

[#50421761_pgfId-699797]## _link:Ejb.htm#50421764_pgfId-1640690[5.2.5.2
Identification Variables 130]_

[#50421761_pgfId-699799]## _link:Ejb.htm#50421764_pgfId-1640713[5.2.5.3
Range Variable Declarations 131]_

[#50421761_pgfId-699801]## _link:Ejb.htm#50421764_pgfId-1640726[5.2.5.4
Collection Member Declarations 132]_

[#50421761_pgfId-699803]## _link:Ejb.htm#50421764_pgfId-1640739[5.2.5.5
Example 132]_

[#50421761_pgfId-699805]## _link:Ejb.htm#50421764_pgfId-1640743[5.2.5.6
Path Expressions 132]_

[#50421761_pgfId-699807]## _link:Ejb.htm#50421764_pgfId-1640768[5.2.6
WHERE Clause and Conditional Expressions 133]_

[#50421761_pgfId-699809]## _link:Ejb.htm#50421764_pgfId-1640774[5.2.6.1
Literals 134]_

[#50421761_pgfId-699811]## _link:Ejb.htm#50421764_pgfId-1640785[5.2.6.2
Identification Variables 134]_

[#50421761_pgfId-699813]## _link:Ejb.htm#50421764_pgfId-1640793[5.2.6.3
Path Expressions 134]_

[#50421761_pgfId-699815]## _link:Ejb.htm#50421764_pgfId-1640796[5.2.6.4
Input Parameters 135]_

[#50421761_pgfId-699817]## _link:Ejb.htm#50421764_pgfId-1640808[5.2.6.5
Conditional Expression Composition 135]_

[#50421761_pgfId-699819]## _link:Ejb.htm#50421764_pgfId-1640818[5.2.6.6
Operators and Operator Precedence 135]_

[#50421761_pgfId-699821]## _link:Ejb.htm#50421764_pgfId-1640829[5.2.6.7
Between]_ _Expressions 136_

[#50421761_pgfId-699823]## _link:Ejb.htm#50421764_pgfId-1640845[5.2.6.8
In Expressions 136]_

[#50421761_pgfId-699825]## _link:Ejb.htm#50421764_pgfId-1640858[5.2.6.9
Like]_ _Expressions 137_

[#50421761_pgfId-699827]## _link:Ejb.htm#50421764_pgfId-1640875[5.2.6.10
Null Comparison Expressions 137]_

[#50421761_pgfId-699829]## _link:Ejb.htm#50421764_pgfId-1640881[5.2.6.11
Empty Collection Comparison Expressions 138]_

[#50421761_pgfId-699831]## _link:Ejb.htm#50421764_pgfId-1640893[5.2.6.12
Collection Member Expressions 138]_

[#50421761_pgfId-699833]## _link:Ejb.htm#50421764_pgfId-1640905[5.2.6.13
Functional Expressions 139]_

[#50421761_pgfId-699835]## _link:Ejb.htm#50421764_pgfId-1640930[5.2.7
SELECT Clause 140]_

[#50421761_pgfId-699837]## _link:Ejb.htm#50421764_pgfId-1640955[5.2.7.1
Null Values in the Query Result 140]_

[#50421761_pgfId-699839]## _link:Ejb.htm#50421764_pgfId-1640959[5.2.7.2
Aggregate Functions in the SELECT Clause 141]_

[#50421761_pgfId-699841]## _link:Ejb.htm#50421764_pgfId-1640969[5.2.7.3
Examples 141]_

[#50421761_pgfId-699843]## _link:Ejb.htm#50421764_pgfId-1641000[5.2.8
ORDER BY Clause 142]_

[#50421761_pgfId-699845]## _link:Ejb.htm#50421764_pgfId-1641036[5.2.9
Return Value Types 143]_

[#50421761_pgfId-699847]## _link:Ejb.htm#50421764_pgfId-1641058[5.2.10
Null Values 145]_

[#50421761_pgfId-699849]## _link:Ejb.htm#50421764_pgfId-1641193[5.2.11
Equality and Comparison Semantics 146]_

[#50421761_pgfId-699851]## _link:Ejb.htm#50421764_pgfId-1641198[5.2.12
Restrictions 146]_

[#50421761_pgfId-699853]## _link:Ejb.htm#50421764_pgfId-1641209[5.3
Examples 146]_

[#50421761_pgfId-699855]## _link:Ejb.htm#50421764_pgfId-1641215[5.3.1
Simple Queries 147]_

[#50421761_pgfId-699857]## _link:Ejb.htm#50421764_pgfId-1641228[5.3.2
Queries with Relationships 147]_

[#50421761_pgfId-699859]## _link:Ejb.htm#50421764_pgfId-1641270[5.3.3
Queries Using Input Parameters 148]_

[#50421761_pgfId-699861]## _link:Ejb.htm#50421764_pgfId-1641276[5.3.4
Queries for Select Methods 148]_

[#50421761_pgfId-699863]## _link:Ejb.htm#50421764_pgfId-1641291[5.3.5
EJB QL and SQL 149]_

[#50421761_pgfId-699865]## _link:Ejb.htm#50421764_pgfId-1641316[5.4 EJB
QL BNF 150]_

======= [#50421761_pgfId-699867]## _link:Ejb.htm#50421764_pgfId-1640539[Chapter 6 EJB 2.1 Entity Bean Component Contract for Bean-Managed Persistence 154]_

[#50421761_pgfId-699869]## _link:Ejb.htm#50421764_pgfId-1363452[6.1
Overview of Bean-Managed Entity Persistence 155]_

[#50421761_pgfId-699871]## _link:Ejb.htm#50421764_pgfId-1363510[6.1.1
Entity Bean Provider’s View of Persistence 155]_

[#50421761_pgfId-699873]## _link:Ejb.htm#50421764_pgfId-1201764[6.1.2
Runtime Execution Model 156]_

[#50421761_pgfId-699875]## _link:Ejb.htm#50421764_pgfId-1282778[6.1.3
Instance Life Cycle 158]_

[#50421761_pgfId-699877]## _link:Ejb.htm#50421764_pgfId-1201956[6.1.4
The Entity Bean Component Contract 160]_

[#50421761_pgfId-699879]## _link:Ejb.htm#50421764_pgfId-1201962[6.1.4.1
Entity Bean Instance’s View 160]_

[#50421761_pgfId-699881]## _link:Ejb.htm#50421764_pgfId-1202042[6.1.4.2
Container’s View 164]_

[#50421761_pgfId-699883]## _link:Ejb.htm#50421764_pgfId-1630804[6.1.5
Read-only Entity Beans 167]_

[#50421761_pgfId-699885]## _link:Ejb.htm#50421764_pgfId-1555434[6.1.6
The EntityContext Interface 167]_

[#50421761_pgfId-699887]## _link:Ejb.htm#50421764_pgfId-1259403[6.1.7
Operations Allowed in the Methods of the Entity Bean Class 168]_

[#50421761_pgfId-699889]## _link:Ejb.htm#50421764_pgfId-1296833[6.1.8
Caching of Entity State and the ejbLoad and ejbStore Methods 171]_

[#50421761_pgfId-699891]## _link:Ejb.htm#50421764_pgfId-1307482[6.1.8.1
ejbLoad and ejbStore with the NotSupported Transaction Attribute 172]_

[#50421761_pgfId-699893]## _link:Ejb.htm#50421764_pgfId-1284935[6.1.9
Finder Method Return Type 173]_

[#50421761_pgfId-699895]## _link:Ejb.htm#50421764_pgfId-1259491[6.1.9.1
Single-Object Finder 173]_

[#50421761_pgfId-699897]## _link:Ejb.htm#50421764_pgfId-1259413[6.1.9.2
Multi-Object Finders 174]_

[#50421761_pgfId-699899]## _link:Ejb.htm#50421764_pgfId-1555461[6.1.10
Timer Notifications 175]_

[#50421761_pgfId-699901]## _link:Ejb.htm#50421764_pgfId-1202082[6.1.11
Standard Application Exceptions for Entities 175]_

[#50421761_pgfId-699903]## _link:Ejb.htm#50421764_pgfId-1263956[6.1.11.1
CreateException 176]_

[#50421761_pgfId-699905]## _link:Ejb.htm#50421764_pgfId-1263960[6.1.11.2
DuplicateKeyException 176]_

[#50421761_pgfId-699907]## _link:Ejb.htm#50421764_pgfId-1263964[6.1.11.3
FinderException 177]_

[#50421761_pgfId-699909]## _link:Ejb.htm#50421764_pgfId-1264199[6.1.11.4
ObjectNotFoundException 177]_

[#50421761_pgfId-699911]## _link:Ejb.htm#50421764_pgfId-1263990[6.1.11.5
RemoveException 177]_

[#50421761_pgfId-699913]## _link:Ejb.htm#50421764_pgfId-1259831[6.1.12
Commit Options 177]_

[#50421761_pgfId-699915]## _link:Ejb.htm#50421764_pgfId-1259853[6.1.13
Concurrent Access from Multiple Transactions 178]_

[#50421761_pgfId-699917]## _link:Ejb.htm#50421764_pgfId-1211273[6.1.14
Non-reentrant and Re-entrant Instances 180]_

[#50421761_pgfId-699919]## _link:Ejb.htm#50421764_pgfId-1312026[6.2
Responsibilities of the Enterprise Bean Provider 181]_

[#50421761_pgfId-699921]## _link:Ejb.htm#50421764_pgfId-1202171[6.2.1
Classes and Interfaces 181]_

[#50421761_pgfId-699923]## _link:Ejb.htm#50421764_pgfId-1202176[6.2.2
Enterprise Bean Class 181]_

[#50421761_pgfId-699925]## _link:Ejb.htm#50421764_pgfId-1318981[6.2.3
ejbCreate<METHOD> Methods 182]_

[#50421761_pgfId-699927]## _link:Ejb.htm#50421764_pgfId-1202202[6.2.4
ejbPostCreate<METHOD> Methods 183]_

[#50421761_pgfId-699929]## _link:Ejb.htm#50421764_pgfId-1474453[6.2.5
ejbFind Methods 183]_

[#50421761_pgfId-699931]## _link:Ejb.htm#50421764_pgfId-1368888[6.2.6
ejbHome<METHOD> Methods 184]_

[#50421761_pgfId-699933]## _link:Ejb.htm#50421764_pgfId-1202227[6.2.7
Business Methods 184]_

[#50421761_pgfId-699935]## _link:Ejb.htm#50421764_pgfId-1202235[6.2.8
Entity Bean’s Remote Interface 185]_

[#50421761_pgfId-699937]## _link:Ejb.htm#50421764_pgfId-1202243[6.2.9
Entity Bean’s Remote Home Interface 186]_

[#50421761_pgfId-699939]## _link:Ejb.htm#50421764_pgfId-1474485[6.2.10
Entity Bean’s Local Interface 187]_

[#50421761_pgfId-699941]## _link:Ejb.htm#50421764_pgfId-1474495[6.2.11
Entity Bean’s Local Home Interface 187]_

[#50421761_pgfId-699943]## _link:Ejb.htm#50421764_pgfId-1202258[6.2.12
Entity Bean’s Primary Key Class 188]_

[#50421761_pgfId-699945]## _link:Ejb.htm#50421764_pgfId-1202261[6.3 The
Responsibilities of the Container Provider 189]_

[#50421761_pgfId-699947]## _link:Ejb.htm#50421764_pgfId-1202263[6.3.1
Generation of Implementation Classes 189]_

[#50421761_pgfId-699949]## _link:Ejb.htm#50421764_pgfId-1202271[6.3.2
Entity EJBHome Class 190]_

[#50421761_pgfId-699951]## _link:Ejb.htm#50421764_pgfId-1202276[6.3.3
Entity EJBObject Class 190]_

[#50421761_pgfId-699953]## _link:Ejb.htm#50421764_pgfId-1474606[6.3.4
Entity EJBLocalHome Class 190]_

[#50421761_pgfId-699955]## _link:Ejb.htm#50421764_pgfId-1474614[6.3.5
Entity EJBLocalObject Class 191]_

[#50421761_pgfId-699957]## _link:Ejb.htm#50421764_pgfId-1202280[6.3.6
Handle Class 191]_

[#50421761_pgfId-699959]## _link:Ejb.htm#50421764_pgfId-1289893[6.3.7
Home Handle Class 191]_

[#50421761_pgfId-699961]## _link:Ejb.htm#50421764_pgfId-1202282[6.3.8
Metadata Class 192]_

[#50421761_pgfId-699963]## _link:Ejb.htm#50421764_pgfId-1312244[6.3.9
Instance’s Re-entrance 192]_

[#50421761_pgfId-699965]## _link:Ejb.htm#50421764_pgfId-1202289[6.3.10
Transaction Scoping, Security, Exceptions 192]_

[#50421761_pgfId-699967]## _link:Ejb.htm#50421764_pgfId-1313934[6.3.11
Implementation of Object References 192]_

[#50421761_pgfId-699969]## _link:Ejb.htm#50421764_pgfId-1381713[6.3.12
EntityContext 192]_

======= [#50421761_pgfId-699971]## _link:Ejb.htm#50421764_pgfId-1377842[Chapter 7 EJB 1.1 Entity Bean Component Contract for Container-Managed Persistence 194]_

[#50421761_pgfId-699973]## _link:Ejb.htm#50421764_pgfId-1377846[7.1 EJB
1.1 Entity Beans with Container-Managed Persistence 194]_

[#50421761_pgfId-699975]## _link:Ejb.htm#50421764_pgfId-1377848[7.1.1
Container-Managed Fields 195]_

[#50421761_pgfId-699977]## _link:Ejb.htm#50421764_pgfId-1377867[7.1.2
ejbCreate, ejbPostCreate 196]_

[#50421761_pgfId-699979]## _link:Ejb.htm#50421764_pgfId-1377881[7.1.3
ejbRemove 197]_

[#50421761_pgfId-699981]## _link:Ejb.htm#50421764_pgfId-1377890[7.1.4
ejbLoad 197]_

[#50421761_pgfId-699983]## _link:Ejb.htm#50421764_pgfId-1377893[7.1.5
ejbStore 197]_

[#50421761_pgfId-699985]## _link:Ejb.htm#50421764_pgfId-1377897[7.1.6
Finder Hethods 198]_

[#50421761_pgfId-699987]## _link:Ejb.htm#50421764_pgfId-1377903[7.1.7
Home Methods 198]_

[#50421761_pgfId-699989]## _link:Ejb.htm#50421764_pgfId-1377905[7.1.8
Create Methods 198]_

[#50421761_pgfId-699991]## _link:Ejb.htm#50421764_pgfId-1377907[7.1.9
Primary Key Type 198]_

[#50421761_pgfId-699993]## _link:Ejb.htm#50421764_pgfId-1377916[7.1.9.1
Primary Key that Maps to a Single Field in the Entity Bean Class 198]_

[#50421761_pgfId-699995]## _link:Ejb.htm#50421764_pgfId-1377918[7.1.9.2
Primary Key that Maps to Multiple Fields in the Entity Bean Class 199]_

[#50421761_pgfId-699997]## _link:Ejb.htm#50421764_pgfId-1377923[7.1.9.3
Special Case: Unknown Primary Key Class 199]_

======= [#50421761_pgfId-699999]## _link:Ejb.htm#50421764_pgfId-1679837[Chapter 8 Support for JAX-RPC Web Service Endpoints 200]_

[#50421761_pgfId-700001]## _link:Ejb.htm#50421764_pgfId-1695190[8.1
JAX-RPC Web Service Client View 201]_

[#50421761_pgfId-700003]## _link:Ejb.htm#50421764_pgfId-1695575[8.2 The
Responsibilities of the Bean Provider 201]_

[#50421761_pgfId-700005]## _link:Ejb.htm#50421764_pgfId-1695582[8.2.1
Session Bean’s JAX-RPC Service Endpoint Interface 201]_

[#50421761_pgfId-700007]## _link:Ejb.htm#50421764_pgfId-1695420[8.2.2
MessageContext Interface 202]_

[#50421761_pgfId-700009]## _link:Ejb.htm#50421764_pgfId-1695494[8.3 The
Responsibilities of the Container Provider 203]_

[#50421761_pgfId-700011]## _link:Ejb.htm#50421764_pgfId-1695368[8.3.1
Generation of WSDL 203]_

[#50421761_pgfId-700013]## _link:Ejb.htm#50421764_pgfId-1695400[8.3.2
JAX-RPC Message Handlers for Web Service Endpoints 203]_

[#50421761_pgfId-700015]## _link:Ejb.htm#50421764_pgfId-1695500[8.3.3
The SessionContext Interface Restrictions 203]_

======= [#50421761_pgfId-700017]## _link:Ejb.htm#50421764_pgfId-1685062[Chapter 9 Support for Transactions 204]_

[#50421761_pgfId-700019]## _link:Ejb.htm#50421764_pgfId-1379359[9.1
Overview 204]_

[#50421761_pgfId-700021]## _link:Ejb.htm#50421764_pgfId-1379723[9.2 Bean
Provider’s Responsibilities 204]_

[#50421761_pgfId-700023]## _link:Ejb.htm#50421764_pgfId-1379725[9.2.1
Bean-Managed Versus Container-Managed Transaction Demarcation 204]_

[#50421761_pgfId-700025]## _link:Ejb.htm#50421764_pgfId-1379751[9.2.2
Isolation Levels 205]_

[#50421761_pgfId-700027]## _link:Ejb.htm#50421764_pgfId-1595418[9.2.3
Specification of the Transaction Attributes for a Bean’s Methods 205]_

[#50421761_pgfId-700029]## _link:Ejb.htm#50421764_pgfId-1380215[9.3
Container Provider Responsibilities 206]_

[#50421761_pgfId-700031]## _link:Ejb.htm#50421764_pgfId-1380287[9.3.1
Container-Managed Transaction Demarcation for Entity Beans 206]_

======= [#50421761_pgfId-700033]## _link:Ejb.htm#50421764_pgfId-1379351[Chapter 10 Exception Handling 208]_

[#50421761_pgfId-700035]## _link:Ejb.htm#50421764_pgfId-1321911[10.1
Application Exceptions 208]_

[#50421761_pgfId-700037]## _link:Ejb.htm#50421764_pgfId-1689362[10.2
Bean Provider’s Responsibilities 208]_

[#50421761_pgfId-700039]## _link:Ejb.htm#50421764_pgfId-1694126[10.2.1
Application Exceptions 209]_

[#50421761_pgfId-700041]## _link:Ejb.htm#50421764_pgfId-1694148[10.2.2
System Exceptions 209]_

[#50421761_pgfId-700043]## _link:Ejb.htm#50421764_pgfId-1694150[10.2.2.1
javax.ejb.NoSuchEntityException 209]_

[#50421761_pgfId-700045]## _link:Ejb.htm#50421764_pgfId-1321966[10.3
Container Provider Responsibilities 209]_

[#50421761_pgfId-700047]## _link:Ejb.htm#50421764_pgfId-1350175[10.3.1
Exceptions from Method Invoked via Entity Bean’s Client View 209]_

[#50421761_pgfId-700049]## _link:Ejb.htm#50421764_pgfId-1322123[10.3.2
Exceptions from Other Container-invoked Callbacks 209]_

[#50421761_pgfId-700051]## _link:Ejb.htm#50421764_pgfId-1322134[10.3.3
javax.ejb.NoSuchEntityException 210]_

[#50421761_pgfId-700053]## _link:Ejb.htm#50421764_pgfId-1322143[10.3.4
Non-existing Entity Object 210]_

[#50421761_pgfId-700055]## _link:Ejb.htm#50421764_pgfId-1322161[10.3.5
Support for Deprecated Use of java.rmi.RemoteException 210]_

[#50421761_pgfId-700057]## _link:Ejb.htm#50421764_pgfId-1322168[10.4
Client’s View of Exceptions 211]_

======= [#50421761_pgfId-700059]## _link:Ejb.htm#50421764_pgfId-1485265[Chapter 11 Support for Distributed Interoperability 212]_

[#50421761_pgfId-700061]## _link:Ejb.htm#50421764_pgfId-1485477[11.1
Mapping Objects Returned by Entity Bean Finder Methods to IDL 212]_

======= [#50421761_pgfId-700063]## _link:Ejb.htm#50421764_pgfId-1684690[Chapter 12 Timer Service 214]_

[#50421761_pgfId-700065]## _link:Ejb.htm#50421764_pgfId-1684700[12.1
Bean Provider’s View of the Timer Service 214]_

[#50421761_pgfId-700067]## _link:Ejb.htm#50421764_pgfId-1643838[12.1.1
Calendar-Based Time Expressions 214]_

[#50421761_pgfId-700069]## _link:Ejb.htm#50421764_pgfId-1649427[12.1.2
Non-persistent Timers 214]_

[#50421761_pgfId-700071]## _link:Ejb.htm#50421764_pgfId-1649425[12.1.3
The TimerService Interface 215]_

[#50421761_pgfId-700073]## _link:Ejb.htm#50421764_pgfId-1644267[12.1.4
Timer Expiration and Timeout Callback Method 215]_

[#50421761_pgfId-700075]## _link:Ejb.htm#50421764_pgfId-1558256[12.1.5
Entity Bean Removal 215]_

======= [#50421761_pgfId-700077]## _link:Ejb.htm#50421764_pgfId-1558258[Chapter 13 Deployment Descriptor 216]_

[#50421761_pgfId-700079]## _link:Ejb.htm#50421764_pgfId-1693377[13.1
Bean Provider’s Responsibilities 216]_

[#50421761_pgfId-700081]## _link:Ejb.htm#50421764_pgfId-1561183[13.2
Application Assembler’s Responsibility 217]_

======= [#50421761_pgfId-700083]## _link:Ejb.htm#50421764_pgfId-1684387[Chapter 14 Packaging Restrictions 220]_

[#50421761_pgfId-700085]## _link:Ejb.htm#50421764_pgfId-1684389[14.1
Restrictions 220]_

======= [#50421761_pgfId-700087]## _link:Ejb.htm#50421764_pgfId-1324796[Chapter 15 Related Documents 222]_

======= [#50421761_pgfId-700089]## _link:Ejb.htm#50421764_pgfId-1601740[Appendix A Revision History 224]_

[#50421761_pgfId-700091]## _link:Ejb.htm#50421764_pgfId-1692217[A.1
Early Draft 224]_

[#50421761_pgfId-700093]## _link:Ejb.htm#50421764_pgfId-1692290[A.2
Early Draft 2 224]_

[#50421761_pgfId-700095]## _link:Ejb.htm#50421764_pgfId-1692930[A.3
Public Draft 224]_

[#50421761_pgfId-700097]## _link:Ejb.htm#50421764_pgfId-1695002[A.4
Proposed Final Draft 225]_

[#50421761_pgfId-700099]## _link:Ejb.htm#50421764_pgfId-1695175[A.5
Final Release Candidate 225]_

[#50421761_pgfId-700101]## _link:Ejb.htm#50421764_pgfId-1695935[A.6
Final Release 225]_

[#50421762_pgfId-309573]## link:Ejb.htm#50421764_pgfId-1201487[Figure 1
Client View of Entity Beans Deployed in a Container] _24_

[#50421762_pgfId-309575]## link:Ejb.htm#50421764_pgfId-1201613[Figure 2
Client View of Entity Object Life Cycle] _31_

[#50421762_pgfId-309577]## link:Ejb.htm#50421764_pgfId-1430690[Figure 3
View of Underlying Data Sources Accessed Through Entity Bean] _43_

[#50421762_pgfId-309579]## link:Ejb.htm#50421764_pgfId-1432484[Figure 4
Relationship Example] _73_

[#50421762_pgfId-309581]## link:Ejb.htm#50421764_pgfId-1432997[Figure 5
Overview of the Entity Bean Runtime Execution Model] _81_

[#50421762_pgfId-309583]## link:Ejb.htm#50421764_pgfId-1433219[Figure 6
Life Cycle of an Entity Bean Instance.] _84_

[#50421762_pgfId-309585]## link:Ejb.htm#50421764_pgfId-1433849[Figure 7
Multiple Clients Can Access the Same Entity Object Using Multiple
Instances] _106_

[#50421762_pgfId-309587]## link:Ejb.htm#50421764_pgfId-1433887[Figure 8
Multiple Clients Can Access the Same Entity Object Using Single
Instance] _107_

[#50421762_pgfId-309589]## link:Ejb.htm#50421764_pgfId-1640654[Figure 9
Several Entity Beans with Abstract Persistence Schemas Defined in the
Same Ejb-jar File.] _128_

[#50421762_pgfId-309591]## link:Ejb.htm#50421764_pgfId-1363497[Figure 10
Client View of Underlying Data Sources Accessed Through Entity Bean]
_155_

[#50421762_pgfId-309593]## link:Ejb.htm#50421764_pgfId-1201831[Figure 11
Overview of the Entity Bean Runtime Execution Model] _157_

[#50421762_pgfId-309595]## link:Ejb.htm#50421764_pgfId-1201936[Figure 12
Life Cycle of an Entity Bean Instance.] _158_

[#50421762_pgfId-309597]## link:Ejb.htm#50421764_pgfId-1282921[Figure 13
Multiple Clients Can Access the Same Entity Object Using Multiple
Instances] _179_

[#50421762_pgfId-309599]## link:Ejb.htm#50421764_pgfId-1211270[Figure 14
Multiple Clients Can Access the Same Entity Object Using Single
Instance] _180_

[#50421763_pgfId-78899]## link:Ejb.htm#50421764_pgfId-1433512[Table 1
Operations Allowed in the Methods of an Entity Bean] _96_

[#50421763_pgfId-78901]## link:Ejb.htm#50421764_pgfId-1433675[Table 2
Comparison of Finder and Select Methods] _101_

[#50421763_pgfId-78903]## link:Ejb.htm#50421764_pgfId-1433760[Table 3
Summary of Commit-Time Options] _105_

[#50421763_pgfId-78905]## link:Ejb.htm#50421764_pgfId-1641082[Table 4
Definition of the AND Operator] _145_

[#50421763_pgfId-78907]## link:Ejb.htm#50421764_pgfId-1641126[Table 5
Definition of the OR Operator] _145_

[#50421763_pgfId-78909]## link:Ejb.htm#50421764_pgfId-1641170[Table 6
Definition of the NOT Operator] _145_

[#50421763_pgfId-78911]## link:Ejb.htm#50421764_pgfId-1556213[Table 7
Operations Allowed in the Methods of an Entity Bean] _168_

[#50421763_pgfId-78913]## link:Ejb.htm#50421764_pgfId-1682827[Table 8
Summary of Commit-Time Options] _178_

=== [#50421764_pgfId-1683418]##[#50421764_21623]##Introduction

[#50421764_pgfId-1683419]##This document describes features for which
support has been made optional as of the 3.2 release of the Enterprise
JavaBeans _TM_ specification:

[#50421764_pgfId-1672458]## _EJB 2.1 Entity Bean Component Contract for
Container-Managed Persistence_

[#50421764_pgfId-1672459]## _EJB 2.1 Entity Bean Component Contract for
Bean-Managed Persistence_

[#50421764_pgfId-1693016]## _EJB 1.1 Entity Bean Component Contract for
Container-Managed Persistence_

[#50421764_pgfId-1672461]## _Client View of an Entity Bean_

[#50421764_pgfId-1685529]## _EJB QL: Query Language for
Container-Managed Persistence Query Methods_

[#50421764_pgfId-1685530]## _JAX-RPC Based Web Service Endpoints_

[#50421764_pgfId-1685531]## _JAX-RPC Web Service Client View._

==== [#50421764_pgfId-1256266]##Acknowledgements

image:Ejb-4.gif[image]

[#50421764_pgfId-1642345]##The EJB 3.2 specification work is being
conducted as part of JSR-345 under the Java Community Process Program.
This specification is the result of the collaborative work of the
members of the EJB 3.2 Expert Group: Caucho Technology, Inc: Reza
Rahman; IBM: Jeremy Bauer; Oracle: Marina Vatkina, Linda DeMichiel; OW2:
Florent Benoit; Pramati Technologies: Ravikiran Noothi; RedHat: Pete
Muir, Carlo de Wolf; TmaxSoft, Inc.: Miju Byon; individual members: Adam
Bien; David Blevins; Antonio Goncalves; Stefan Heldt; Richard Hightower,
Jean-Louis Monteiro.

[#50421764_pgfId-1664745]## 

==== [#50421764_pgfId-1691483]##Organization of the Specification Documents

image:Ejb-4.gif[image]

[#50421764_pgfId-1691485]##This specification is organized into the
following documents:

[#50421764_pgfId-1672738]##EJB Core Contracts and Requirements

[#50421764_pgfId-1672747]##EJB Optional Features

[#50421764_pgfId-1672757]##The EJB Core Contracts and Requirements
document defines the contracts and requirements for the use and
implementation of Enterprise JavaBeans. These contracts include those
for the EJB 3.2 API, as well as for the earlier EJB API that is required
to be supported in this release.

[#50421764_pgfId-1689789]##This EJB Optional Features document defines
the contracts and requirements for the use and implementation of
features support for which has been made optional for the Enterprise
JavaBeans. These contracts are separated from the core contracts
requirements in the EJB 3.1 specification
link:Ejb.htm#50421764_53103[See Enterprise JavaBeans™, version 3.1. (EJB
3.1). http://jcp.org/en/jsr/detail?id=318.].

==== [#50421764_pgfId-1256282]##Document Conventions

image:Ejb-4.gif[image]

[#50421764_pgfId-1256283]##The regular Times font is used for
information that is prescriptive by the EJB specification.

[#50421764_pgfId-1256286]##The italic Times font is used for paragraphs
that contain descriptive information, such as notes describing typical
use, or notes clarifying the text with prescriptive specification.

[#50421764_pgfId-1256319]##The Courier font is used for code examples.

=== [#50421764_pgfId-1601599]##[#50421764_39170]##Overview

[#50421764_pgfId-1683938]##This document describes features for which
support has been made optional as of the 3.2 release of the Enterprise
JavaBeans _TM_ specification:

[#50421764_pgfId-1685394]## _EJB 2.1 Entity Bean Component Contract for
Container-Managed Persistence_

[#50421764_pgfId-1685395]## _EJB 2.1 Entity Bean Component Contract for
Bean-Managed Persistence_

[#50421764_pgfId-1693025]## _EJB 1.1 Entity Bean Component Contract for
Container-Managed Persistence_

[#50421764_pgfId-1685396]## _Client View of an Entity Bean_

[#50421764_pgfId-1685397]## _EJB QL: Query Language for
Container-Managed Persistence Query Methods_

[#50421764_pgfId-1685398]## _JAX-RPC Based Web Service Endpoints_

[#50421764_pgfId-1685399]## _JAX-RPC Web Service Client View._

[#50421764_pgfId-1690960]##If an implementation supports such features,
it must do so in accordance with the requirements of this specification.
In addition, the following rules apply:

[#50421764_pgfId-1693210]##If any of the following features is
supported, all features in the list must be supported:

[#50421764_pgfId-1695015]##EJB 2.x entity beans with container-managed
persistence

[#50421764_pgfId-1695054]##EJB 1.1 entity beans with container-managed
persistence

[#50421764_pgfId-1695040]##EJB 2.x entity beans with bean-managed
persistence

[#50421764_pgfId-1695019]##EJB QL

[#50421764_pgfId-1693224]##If JAX-RPC web service endpoints are
supported, the JAX-RPC web service endpoint client view must be
supported.

[#50421764_pgfId-1690964]##See the general description of the EJB goals
and requirements in the EJB Core Contracts and Requirements
link:Ejb.htm#50421764_39461[See EJB 3.2 Core Contracts and Requirements.
http://jcp.org/en/jsr/detail?id=345] document.

[#50421764_pgfId-1691628]## 

=== [#50421764_pgfId-1600071]##[#50421764_20481]##Client View of an Entity Bean

[#50421764_pgfId-1492154]##This chapter describes the client view of an
entity bean. It is actually a contract fulfilled by the container in
which the entity bean is deployed. Only the business methods are
supplied by the enterprise bean itself.

[#50421764_pgfId-1201418]##Although the client view of the deployed
entity beans is provided by classes implemented by the container, the
container itself is transparent to the client.

==== [#50421764_pgfId-1201419]##Overview

image:Ejb-4.gif[image]

[#50421764_pgfId-1201420]##[#50421764_marker-1318819]##For a client, an
entity bean is a component that represents an object-oriented view of
some entities stored in a persistent storage, such as a database, or
entities that are implemented by an existing enterprise application.

[#50421764_pgfId-1690323]##The client of an
[#50421764_marker-1690322]##entity bean may be a local client or the
client may be a remote client.

[#50421764_pgfId-1690324]##This section provides an overview of the
entity bean client view that is independent of whether the client is a
remote client or a local client. The differences between remote clients
and local clients are discussed in the following sections.

[#50421764_pgfId-1201425]##From its creation until its destruction, an
entity object lives in a container. Transparently to the client, the
container provides security, concurrency, transactions, persistence, and
other services for the entity objects that live in the container. The
container is transparent to the client—there is no API that a client can
use to manipulate the container.

[#50421764_pgfId-1201426]##Multiple clients can access an entity object
concurrently. The container in which the entity bean is deployed
properly synchronizes access to the entity object’s state using
transactions.

[#50421764_pgfId-1201428]##Each [#50421764_marker-1492161]##entity
object has an identity which, in general, survives a crash and restart
of the container in which the entity object has been created. The object
identity is implemented by the container with the cooperation of the
enterprise bean class.

[#50421764_pgfId-1309291]##Multiple enterprise beans can be deployed in
a container. For each entity bean deployed in a container, the container
provides a class that implements a home interface for the entity bean.
This interface allows the client to create, find, and remove entity
objects within the enterprise bean’s home as well as to execute home
business methods, which are not specific to a particular entity bean
object. A client can obtain the entity bean’s home interface through
dependency injection, or the client can look up the
[#50421764_marker-1492162]##entity bean’s home interface through JNDI.
It is the responsibility of the container to make the entity bean’s home
interface available in the JNDI name space.

[#50421764_pgfId-1201431]##A client view of an entity bean is
independent of the implementation of the entity bean and its container.
This ensures that a client application is portable across all container
implementations in which the entity bean might be deployed.
[#50421764_marker-1318824]##

==== [#50421764_pgfId-1201432]##Remote Clients

image:Ejb-4.gif[image]

[#50421764_pgfId-1469075]##A [#50421764_marker-1492163]##remote client
accesses an entity bean through the entity bean’s remote and remote home
interfaces. The remote and remote home interfaces of the entity bean
provide the [#50421764_marker-1492164]##remote client view.

[#50421764_pgfId-1469061]##The remote client view of an entity bean is
location independent. A client running in the same JVM as an entity bean
instance uses the same API to access the entity bean as a client running
in a different JVM on the same or different machine.

[#50421764_pgfId-1469161]##The container provides classes that implement
the entity bean’s remote and remote home interfaces. The objects that
implement the remote home and remote objects are remote Java objects,
and are accessible from a client through the standard Java™ APIs for
remote object invocation [link:Ejb.htm#50421764_12984[See Java Remote
Method Invocation (RMI).
http://docs.oracle.com/javase/7/docs/technotes/guides/rmi/.]].

[#50421764_pgfId-1469067]##A remote client of an entity object can be
another enterprise bean deployed in the same or different container or
can be an arbitrary Java program, such as an application, applet, or
servlet. The remote client view of an entity bean can also be mapped to
non-Java client environments, such as CORBA clients not written in the
Java programming language.

==== [#50421764_pgfId-1469044]##Local Clients

image:Ejb-4.gif[image]

[#50421764_pgfId-1469082]##[#50421764_marker-1492165]##Entity beans may
also have local clients. A local client is a client that is collocated
with the entity bean and which may be tightly coupled to the bean.

[#50421764_pgfId-1469850]##Unlike the remote client view, the
[#50421764_marker-1492166]##local client view of an entity bean is not
location independent. The local client view requires the collocation in
the same JVM of both the local client and the entity bean that provides
the local client view. The local client view therefore does not provide
the location transparency provided by the remote client view.

[#50421764_pgfId-1469847]##A local client accesses an entity bean
through the entity bean’s local home and local component interfaces. The
container provides classes that implement the entity bean’s local home
and local component interfaces. The objects that implement the local
home and local component interfaces are local Java objects.

[#50421764_pgfId-1691161]##The arguments of the methods of the
[#50421764_marker-1691159]##local component interface and
l[#50421764_marker-1691160]##ocal home interface are passed by
referencelink:#pgfId-1691164[1]. Such entity beans and their clients
must be coded to assume that the state of any Java object that is passed
as an argument or result is potentially shared by caller and callee.

[#50421764_pgfId-1469076]##A local client of an entity bean may be a
session bean, a message-driven bean, another entity bean, or a web-tier
component.

[#50421764_pgfId-1601201]##The choice between the use of a local or
remote programming model is a design decision that the Bean Provider
makes when developing the entity bean application. In general, however,
entity beans are intended to be used with local clients. While it is
possible to provide both a client view and a local client view for an
entity bean with container-managed persistence, it is more likely that
the entity bean will be designed with the local view in mind.

[#50421764_pgfId-1469181]##Entity beans that have
[#50421764_marker-1492169]##container-managed relationships with other
entity beans, as described in link:Ejb.htm#50421764_34804[See EJB 2.1
Entity Bean Component Contract for Container-Managed Persistence], must
be accessed in the same local scope as those related beans, and
therefore typically provide a local client view. In order to be the
target of a container-managed relationship, an entity bean with
container-managed persistence must provide a local component interface.

==== [#50421764_pgfId-1691715]##Choosing Between a Local or Remote Client View

image:Ejb-4.gif[image]

[#50421764_pgfId-1691753]##The following considerations should be taken
into account in determining whether a local or
[#50421764_marker-1691716]##remote access should be used for an entity
bean:

[#50421764_pgfId-1691777]##When the EJB 2.1 and earlier remote home and
remote component interfaces are used, the narrowing of remote types
requires the use of javax.rmi.PortableRemoteObject.narrow rather than
Java language casts.

[#50421764_pgfId-1691783]##Remote calls may involve error cases due to
communication, resource usage on other servers, etc., which are not
expected in local calls. When the EJB 2.1 and earlier remote home and
remote component interfaces are used, the client has to explicitly
program handlers for handling the _java.rmi.RemoteException_

[#50421764_pgfId-1691825]##Methods of a session bean’s remote business
interface must not expose entity beans local interface types, or the
managed collection classes that are used for EJB 2.1 entity beans with
container-managed persistence as arguments or results.

[#50421764_pgfId-1691764]##See EJB Core Contracts and Requirements
document link:Ejb.htm#50421764_39461[See EJB 3.2 Core Contracts and
Requirements. http://jcp.org/en/jsr/detail?id=345] Subsection “Choosing
Between a Local or Remote Client View” for the more considerations.

[#50421764_pgfId-1691713]## 

==== [#50421764_pgfId-1469144]##EJB Container

image:Ejb-4.gif[image]

[#50421764_pgfId-1201433]##An EJB container (container for short) is a
system that functions as a runtime container for enterprise beans.

[#50421764_pgfId-1471499]##[#50421764_marker-1471497]##Multiple
enterprise beans can be deployed in a single container. For each entity
bean deployed in a container, the container provides a home interface
that allows the client to create, find, and remove entity objects that
belong to the entity bean. The home interface may also provide home
business methods, which are not specific to a particular entity bean
object. The container makes the entity bean’s home interface (defined by
the Bean Provider and implemented by the Container Provider) available
in the JNDI name space for clients.

[#50421764_pgfId-1201435]##An EJB server may host one or multiple EJB
containers. The containers are transparent to the client: there is no
client-level API to manipulate the container.

====== [#50421764_pgfId-1201436]##Locating an Entity Bean’s Home Interface

[#50421764_pgfId-1471511]##[#50421764_marker-1318826]##A client obtains
an entity bean’s home interface through dependency injection, or the
client locates an entity bean’s home interface using
[#50421764_marker-1492170]##JNDI. A client’s JNDI name space may be
configured to include the home interfaces of enterprise beans deployed
in multiple EJB containers located on multiple machines on a network.
The actual location of an EJB container is, in general, transparent to
the client.

[#50421764_pgfId-1471514]##For example, the local home interface for the
_Account_ entity bean can be located using the following code segment:

[#50421764_pgfId-1469228]##Context initialContext = new
InitialContext();

[#50421764_pgfId-1469229]##AccountHome accountHome = (AccountHome)

[#50421764_pgfId-1469231]##
initialContext.lookup(“java:comp/env/ejb/accounts”);

[#50421764_pgfId-1469226]##If dependency injection were used, the home
interface could be obtained as follows:

[#50421764_pgfId-1601210]##@EJB AccountHome accountHome;

====== [#50421764_pgfId-1201445]##What a Container Provides

[#50421764_pgfId-1201446]##The following diagram illustrates the view
that a container provides to the client of the entity beans deployed in
the container. Note that a client may be a local client of some entity
beans and a remote client of others.

======= [#50421764_pgfId-1201487]##

image:Ejb-5.gif[image]

Client View of Entity Beans Deployed in a Container

image:Ejb-6.gif[image]

==== [#50421764_pgfId-1201488]##Entity Bean’s Remote Home Interface

image:Ejb-4.gif[image]

[#50421764_pgfId-1201489]##This section is specific to entity beans that
provide a [#50421764_marker-1492171]##remote client view. Local home
interfaces are described in link:Ejb.htm#50421764_97990[See Entity
Bean’s Local Home Interface].

[#50421764_pgfId-1590275]##The container provides the implementation of
the remote home interface for each entity bean deployed in the container
that defines a remote home interface. An object that implements an
entity bean’s remote home interface is called an _EJBHome object._

[#50421764_pgfId-1201490]##[#50421764_marker-1318827]##The entity bean’s
remote home interface allows a client to do the following:

[#50421764_pgfId-1201491]##Create new entity objects within the home.

[#50421764_pgfId-1201492]##Find existing entity objects within the home.

[#50421764_pgfId-1201493]##Remove an entity object from the home.

[#50421764_pgfId-1368240]##Execute a home business method.

[#50421764_pgfId-1201494]##Get the _javax.ejb.EJBMetaData_ interface for
the entity bean. The _javax.ejb.EJBMetaData_ interface is intended to
allow application assembly tools to discover the metadata information
about the entity bean. The metadata information allows loose
client/server binding and scripting.

[#50421764_pgfId-1289949]##Obtain a handle for the home interface. The
[#50421764_marker-1492173]##home handle can be serialized and written to
stable storage. Later, possibly in a different JVM, the
[#50421764_marker-1492174]##handle can be deserialized from stable
storage and used to obtain a reference to the home interface.

[#50421764_pgfId-1201495]##An entity bean’s remote home interface must
extend the javax.ejb.EJBHome interface and follow the standard rules for
Java programming language remote interfaces.

====== [#50421764_pgfId-1201496]##Create Methods

[#50421764_pgfId-1201497]##An entity bean’s remote home interface can
define zero or more [#50421764_marker-1492175]##create<METHOD> methods,
one for each way to create an entity object. The arguments of the create
methods are typically used to initialize the state of the created entity
object. The name of each create method starts with the prefix “ _create_
”.

[#50421764_pgfId-1201498]##[#50421764_marker-1318828]##The return type
of a create _<METHOD>_ method on the remote home interface is the entity
bean’s remote interface.

[#50421764_pgfId-1685450]##The _throws_ clause of every create
_<METHOD>_ method on the remote home interface includes the
java.rmi.RemoteException and the javax.ejb.CreateException. It may
include additional application-level exceptions.

[#50421764_pgfId-1201500]##The following home interface illustrates
three possible create methods:

[#50421764_pgfId-1201502]##public interface AccountHome extends
javax.ejb.EJBHome \{

[#50421764_pgfId-1201503]## public Account create(String firstName,
String lastName,

[#50421764_pgfId-1201504]## double initialBalance)

[#50421764_pgfId-1201505]## throws RemoteException, CreateException;

[#50421764_pgfId-1201506]## public Account create(String accountNumber,

[#50421764_pgfId-1201507]## double initialBalance)

[#50421764_pgfId-1201508]## throws RemoteException, CreateException,

[#50421764_pgfId-1201509]## LowInitialBalanceException;

[#50421764_pgfId-1369225]## public Account createLargeAccount(String
firstname,

[#50421764_pgfId-1369226]## String lastname, double initialBalance)

[#50421764_pgfId-1369227]## throws RemoteException, CreateException;

[#50421764_pgfId-1201510]## ...

[#50421764_pgfId-1201511]##}

[#50421764_pgfId-1201512]## 

[#50421764_pgfId-1201513]##The following example illustrates how a
client creates a new entity object:

[#50421764_pgfId-1201514]##AccountHome accountHome = ...;

[#50421764_pgfId-1201515]##Account account = accountHome.create(“John”,
“Smith”, 500.00);

[#50421764_pgfId-1201516]## 

====== [#50421764_pgfId-1201517]##Finder Methods

[#50421764_pgfId-1263687]##[#50421764_marker-1318829]##An entity bean’s
remote home interface defines one or more finder
methodslink:#pgfId-1263686[2], one for each way to find an entity object
or collection of entity objects within the home. The name of each finder
method starts with the prefix “ _find_ ”, such as _findLargeAccounts_ .
The arguments of a finder method are used by the entity bean
implementation to locate the requested entity objects. The return type
of a finder method on the remote home interface must be the entity
bean’s remote interface, or a type representing a collection of objects
that implement the entity bean’s remote interface (see Subsections
link:Ejb.htm#50421764_96826[See Finder Methods] and
link:Ejb.htm#50421764_33795[See Finder Method Return Type]).

[#50421764_pgfId-1263691]##The _throws_ clause of every finder method on
the remote home interface includes the java.rmi.RemoteException and the
javax.ejb.FinderException exceptions.

[#50421764_pgfId-1201528]##[#50421764_marker-1318830]##The remote home
interface includes the findByPrimaryKey(primaryKey) method, which allows
a client to locate an entity object using a primary key. The name of the
method is always findByPrimaryKey; it has a single argument that is the
same type as the entity bean’s primary key type, and its return type is
the entity bean’s remote interface. There is a unique
findByPrimaryKey(primaryKey) method for an entity bean on its remote
home interface; this method must not be overloaded. The implementation
of the findByPrimaryKey(primaryKey) method must ensure that the entity
object exists.

[#50421764_pgfId-1201533]##The following example shows the
findByPrimaryKey method:

[#50421764_pgfId-1201534]##public interface AccountHome extends
javax.ejb.EJBHome \{

[#50421764_pgfId-1201535]## ...

[#50421764_pgfId-1201536]## public Account findByPrimaryKey(String
AccountNumber)

[#50421764_pgfId-1201537]## throws RemoteException, FinderException;

[#50421764_pgfId-1201538]##}

[#50421764_pgfId-1201540]##The following example illustrates how a
client uses the findByPrimaryKey method:

[#50421764_pgfId-1201541]##AccountHome = ...;

[#50421764_pgfId-1368272]##Account account =
accountHome.findByPrimaryKey(“100-3450-3333”);

====== [#50421764_pgfId-1368284]##Remove Methods

[#50421764_pgfId-1368278]##[#50421764_marker-1368276]##The
javax.ejb.EJBHome interface defines several methods that allow the
client to remove an entity object.

[#50421764_pgfId-1201546]##public interface EJBHome extends Remote \{

[#50421764_pgfId-1201547]## void remove(Handle handle) throws
RemoteException,

[#50421764_pgfId-1201548]## RemoveException;

[#50421764_pgfId-1201549]## void remove(Object primaryKey) throws
RemoteException,

[#50421764_pgfId-1201550]## RemoveException;

[#50421764_pgfId-1201551]##}

[#50421764_pgfId-1309323]##After an entity object has been removed,
subsequent attempts to access the entity object by a remote client
result in the java.rmi.NoSuchObjectException.

====== [#50421764_pgfId-1368249]##Home Methods

[#50421764_pgfId-1368256]##An [#50421764_marker-1492178]##entity bean’s
remote home interface may define one or more
[#50421764_marker-1492179]##home methods. Home methods are methods that
the Bean Provider supplies for business logic that is not specific to an
entity bean instance.

[#50421764_pgfId-1368297]##Home methods on the remote home interface can
have arbitrary method names, but they must not start with “ _create_ ”,
“ _find_ ”, or “ _remove_ ”.The arguments of a home method are used by
the entity bean implementation in computations that do not depend on a
specific entity bean instance. The method arguments and return value
types of a home method on the remote home interface must be legal types
for RMI-IIOP.

[#50421764_pgfId-1368287]##The _throws_ clause of every home method on
the remote home interface includes the java.rmi.RemoteException. It may
also include additional application-level exceptions.

[#50421764_pgfId-1369077]##The following example shows two home methods:

[#50421764_pgfId-1368288]##public interface EmployeeHome extends
javax.ejb.EJBHome \{

[#50421764_pgfId-1368292]## ...

[#50421764_pgfId-1369087]## // this method returns a living index
depending on

[#50421764_pgfId-1369088]## // the state and the base salary of an
employee:

[#50421764_pgfId-1369112]## // the method is not specific to an instance

[#50421764_pgfId-1368294]## public float livingIndex(String state, float
Salary)

[#50421764_pgfId-1378670]## throws RemoteException;

[#50421764_pgfId-1369081]## 

[#50421764_pgfId-1369085]## // this method adds a bonus to all of the
employees

[#50421764_pgfId-1369086]## // based on a company profit-sharing index

[#50421764_pgfId-1369082]## public void addBonus(float
company_share_index)

[#50421764_pgfId-1378671]## throws RemoteException,
ShareIndexOutOfRangeException;

[#50421764_pgfId-1369064]## 

[#50421764_pgfId-1368295]## ...

[#50421764_pgfId-1368293]##}

==== [#50421764_pgfId-1469244]##[#50421764_97990]##Entity Bean’s Local Home Interface

image:Ejb-4.gif[image]

[#50421764_pgfId-1469245]##The container provides the implementation of
the local home interface for each entity bean deployed in the container
that defines a local home interface. An object that implements an entity
bean’s local home interface is called an _EJBLocalHome object._

[#50421764_pgfId-1469247]##[#50421764_marker-1469246]##The entity bean’s
local home interface allows a local client to do the following:

[#50421764_pgfId-1469248]##Create new entity objects within the home.

[#50421764_pgfId-1469249]##Find existing entity objects within the home.

[#50421764_pgfId-1469250]##Remove an entity object from the home.

[#50421764_pgfId-1469251]##Execute a home business method.

[#50421764_pgfId-1469254]##An entity bean’s local home interface must
extend the javax.ejb.EJBLocalHome interface.

====== [#50421764_pgfId-1469255]##Create Methods

[#50421764_pgfId-1469256]##An entity bean’s local home interface can
define zero or more create<METHOD> methods, one for each way to create
an entity object. The arguments of the create methods are typically used
to initialize the state of the created entity object. The name of each
create method starts with the prefix “ _create_ ”.

[#50421764_pgfId-1469441]##[#50421764_marker-1469439]##The return type
of a create _<METHOD>_ method on the local home interface is the entity
bean’s local interface.

[#50421764_pgfId-1469442]##The _throws_ clause of every create
_<METHOD>_ method on the local home interface includes the
javax.ejb.CreateException. It may include additional application-level
exceptions. It must not include the java.rmi.RemoteException.

[#50421764_pgfId-1469260]##The following local home interface
illustrates three possible create methods:

[#50421764_pgfId-1469261]##public interface AccountHome extends
javax.ejb.EJBLocalHome \{

[#50421764_pgfId-1469262]## public Account create(String firstName,
String lastName,

[#50421764_pgfId-1469263]## double initialBalance)

[#50421764_pgfId-1469264]## throws CreateException;

[#50421764_pgfId-1469265]## public Account create(String accountNumber,

[#50421764_pgfId-1469266]## double initialBalance)

[#50421764_pgfId-1469267]## throws CreateException,
LowInitialBalanceException;

[#50421764_pgfId-1469269]## public Account createLargeAccount(String
firstname,

[#50421764_pgfId-1469270]## String lastname, double initialBalance)

[#50421764_pgfId-1469271]## throws CreateException;

[#50421764_pgfId-1469272]## ...

[#50421764_pgfId-1469273]##}

[#50421764_pgfId-1469275]##The following example illustrates how a
client creates a new entity object:

[#50421764_pgfId-1469276]##AccountHome accountHome = ...;

[#50421764_pgfId-1469277]##Account account = accountHome.create(“John”,
“Smith”, 500.00);

====== [#50421764_pgfId-1691174]##Finder Methods

[#50421764_pgfId-1691180]##[#50421764_marker-1691175]##An entity bean’s
local home interface defines one or more finder
methodslink:#pgfId-1691179[3], one for each way to find an entity object
or collection of entity objects within the home. The name of each finder
method starts with the prefix “ _find_ ”, such as _findLargeAccounts_ .
The arguments of a finder method are used by the entity bean
implementation to locate the requested entity objects. The return type
of a finder method on the local home interface must be the entity bean’s
local interface, or a type representing a collection of objects that
implement the entity bean’s local interface (see Subsections
link:Ejb.htm#50421764_96826[See Finder Methods] and
link:Ejb.htm#50421764_33795[See Finder Method Return Type]).

[#50421764_pgfId-1469291]##The _throws_ clause of every finder method on
the local home interface includes the javax.ejb.FinderException. The
_throws_ clause must not include the java.rmi.RemoteException.

[#50421764_pgfId-1469293]##[#50421764_marker-1469292]##The local home
interface includes the findByPrimaryKey(primaryKey) method, which allows
a client to locate an entity object using a primary key. The name of the
method is always findByPrimaryKey; it has a single argument that is the
same type as the entity bean’s primary key type, and its return type is
the entity bean’s local interface. There is a unique
findByPrimaryKey(primaryKey) method for an entity bean on its local home
interface; this method must not be overloaded. The implementation of the
findByPrimaryKey method must ensure that the entity object exists.

[#50421764_pgfId-1469294]##The following example shows the
findByPrimaryKey method:

[#50421764_pgfId-1469295]##public interface AccountHome extends
javax.ejb.EJBLocalHome \{

[#50421764_pgfId-1469296]## ...

[#50421764_pgfId-1469297]## public Account findByPrimaryKey(String
AccountNumber)

[#50421764_pgfId-1469298]## throws FinderException;

[#50421764_pgfId-1469299]##}

[#50421764_pgfId-1469301]##The following example illustrates how a
client uses the findByPrimaryKey method:

[#50421764_pgfId-1469302]##AccountHome = ...;

[#50421764_pgfId-1469303]##Account account =
accountHome.findByPrimaryKey(“100-3450-3333”);

====== [#50421764_pgfId-1469306]##Remove Methods

[#50421764_pgfId-1469308]##[#50421764_marker-1469307]##The
javax.ejb.EJBLocalHome interface defines the _remove_ method to allow
the client to remove an entity object.

[#50421764_pgfId-1469309]##public interface EJBLocalHome \{

[#50421764_pgfId-1469312]## void remove(Object primaryKey) throws
RemoveException,

[#50421764_pgfId-1469505]## EJBException;

[#50421764_pgfId-1469314]##}

[#50421764_pgfId-1469316]##After an entity object has been removed,
subsequent attempts to access the local entity object by the local
client result in the javax.ejb.NoSuchObjectLocalException.

====== [#50421764_pgfId-1469317]##Home Methods

[#50421764_pgfId-1469318]##An [#50421764_marker-1492182]##entity bean’s
local home interface may define one or more
[#50421764_marker-1492183]##home methods. Home methods are methods that
the Bean Provider supplies for business logic that is not specific to an
entity bean instance.

[#50421764_pgfId-1469319]##Home methods can have arbitrary method names,
but they must not start with “ _create_ ”, “ _find_ ”, or “ _remove_
”.The arguments of a home method are used by the entity bean
implementation in computations that do not depend on a specific entity
bean instance.

[#50421764_pgfId-1469320]##The _throws_ clause of a home method on the
local home interface may include additional application-level
exceptions. It must not include the java.rmi.RemoteException.

[#50421764_pgfId-1469321]##The following example shows two home methods:

[#50421764_pgfId-1469322]##public interface EmployeeHome extends
javax.ejb.EJBLocalHome \{

[#50421764_pgfId-1469323]## ...

[#50421764_pgfId-1469324]## // this method returns a living index
depending on

[#50421764_pgfId-1469325]## // the state and the base salary of an
employee:

[#50421764_pgfId-1469326]## // the method is not specific to an instance

[#50421764_pgfId-1469327]## public float livingIndex(String state, float
Salary);

[#50421764_pgfId-1469329]## 

[#50421764_pgfId-1469330]## // this method adds a bonus to all of the
employees

[#50421764_pgfId-1469331]## // based on a company profit sharing index

[#50421764_pgfId-1469332]## public void addBonus(float
company_share_index)

[#50421764_pgfId-1469333]## throws ShareIndexOutOfRangeException;

[#50421764_pgfId-1469334]## 

[#50421764_pgfId-1469335]## ...

[#50421764_pgfId-1469336]##}

==== [#50421764_pgfId-1201553]##Entity Object’s Life Cycle

image:Ejb-4.gif[image]

[#50421764_pgfId-1201554]##This section describes the life cycle of an
entity object from the perspective of a client.

[#50421764_pgfId-1201555]##[#50421764_marker-1318832]##The following
diagram illustrates a client’s point of view of an entity object life
cycle. (The term “referenced” in the diagram means that the client
program has a reference to the entity object’s remote or local
interface.)

======= [#50421764_pgfId-1201613]##

image:Ejb-5.gif[image]

Client View of Entity Object Life Cycle

image:Ejb-7.gif[image]

[#50421764_pgfId-1201614]##An entity object does not exist until it is
created. Until it is created, it has no identity. After it is created,
it has identity. A client creates an entity object using the entity
bean’s home interface, whose class is implemented by the container. When
a client creates an entity object, the client obtains a reference to the
newly created entity object.

[#50421764_pgfId-1311411]##In an environment with
[#50421764_marker-1492184]##legacy data, entity objects may “exist”
before the container and entity bean are deployed. In addition, an
entity object may be “created” in the environment via a mechanism other
than by invoking a create<METHOD> method of the home interface (e.g. by
inserting a database record), but still may be accessible via the finder
methods. Also, an entity object may be deleted directly using other
means than the remove operation (e.g. by deletion of a database record).
The “direct insert” and “direct delete” transitions in the diagram
represent such [#50421764_marker-1492185]##direct database manipulation.

[#50421764_pgfId-1469893]##All entity objects are considered
[#50421764_marker-1492186]##persistent objects. The lifetime of an
entity object is not limited by the lifetime of the Java Virtual Machine
process in which the entity bean instance executes. While a crash of the
Java Virtual Machine may result in a rollback of current transactions,
it does not destroy previously created entity objects nor invalidate the
references to the home and component interfaces held by clients.

[#50421764_pgfId-1469895]##[#50421764_marker-1469894]##Multiple clients
can access the same entity object concurrently. Transactions are used to
isolate the clients’ work from each other.

====== [#50421764_pgfId-1311412]##References to Entity Object Remote Interfaces

[#50421764_pgfId-1469911]##A client can get a reference to an existing
[#50421764_marker-1492187]##entity object’s remote interface in any of
the following ways:

[#50421764_pgfId-1311413]##Receive the reference as a parameter in a
method call (input parameter or result).

[#50421764_pgfId-1201618]##Find the entity object using a finder method
defined in the entity bean’s remote home interface.

[#50421764_pgfId-1201621]##Obtain the reference from the entity object’s
handle. (See Section link:Ejb.htm#50421764_41361[See Entity Bean’s
Handle]).

[#50421764_pgfId-1201623]##A client that has a reference to an entity
object’s remote interface can do any of the following:

[#50421764_pgfId-1201624]##Invoke business methods on the entity object
through the remote interface.

[#50421764_pgfId-1201625]##Obtain a reference to the enterprise bean’s
remote home interface.

[#50421764_pgfId-1201626]##Pass the reference as a parameter or return
value of a method call.

[#50421764_pgfId-1201627]##Obtain the entity object’s primary key.

[#50421764_pgfId-1201628]##Obtain the entity object’s handle.

[#50421764_pgfId-1201629]##Remove the entity object.

[#50421764_pgfId-1201630]##All references to an entity object that does
not exist are invalid. All attempted invocations on an entity object
that does not exist result in an java.rmi.NoSuchObjectException being
thrown.

====== [#50421764_pgfId-1469531]##References to Entity Object Local Interfaces

[#50421764_pgfId-1469914]##A local client can get a reference to an
existing [#50421764_marker-1492188]##entity object’s local interface in
any of the following ways:

[#50421764_pgfId-1469532]##Receive the reference as a result of a method
call.

[#50421764_pgfId-1469533]##Find the entity object using a finder method
defined in the entity bean’s local home interface.

[#50421764_pgfId-1469538]##A local client that has a reference to an
entity object’s local interface can do any of the following:

[#50421764_pgfId-1469539]##Invoke business methods on the entity object
through the local interface.

[#50421764_pgfId-1469540]##Obtain a reference to the enterprise bean’s
local home interface.

[#50421764_pgfId-1469541]##Pass the reference as a parameter or return
value of a local method call.

[#50421764_pgfId-1469542]##Obtain the entity object’s primary key.

[#50421764_pgfId-1469544]##Remove the entity object.

[#50421764_pgfId-1471574]##All local references to an entity object that
does not exist are invalid. All attempted invocations on an entity
object that does not exist result in a
javax.ejb.NoSuchObjectLocalException being thrown.

[#50421764_pgfId-1480691]##A local interface type must not be passed as
an argument or result of a remote interface method.

====== [#50421764_pgfId-1691870]##References to Entity Object and Stateful Session Bean Instance Passivation and Conversational State

[#50421764_pgfId-1691872]##If an entity bean is
[#50421764_marker-1691871]##referenced from a stateful session bean, the
Bean Provider is required to ensure that the _PrePassivate_ method
leaves the instance fields ready to be serialized by the container. In
addition to the rules described in EJB Core Contracts and Requirements
document link:Ejb.htm#50421764_39461[See EJB 3.2 Core Contracts and
Requirements. http://jcp.org/en/jsr/detail?id=345] Subsection “Instance
Passivation and Conversational State”, for the entity bean references,
the objects that are assigned to the instance’s non- _transient_ fields
after the session bean _PrePassivate_ method completes can also be one
of the following:

[#50421764_pgfId-1691873]##A reference to an entity bean’s local
component interface, even if it is not serializable.

[#50421764_pgfId-1691874]##A reference to an entity bean’s local home
interface, even if it is not serializable.

[#50421764_pgfId-1691867]## 

==== [#50421764_pgfId-1201633]##[#50421764_94593]##Primary Key and Object Identity

image:Ejb-4.gif[image]

[#50421764_pgfId-1309156]##Every [#50421764_marker-1492189]##entity
object has a unique identity within its home. If two entity objects have
the same home and the same primary key, they are considered identical.

[#50421764_pgfId-1309157]##[#50421764_marker-1318852]##The Enterprise
JavaBeans architecture allows a primary key class to be any class that
is a legal Value Type in RMI-IIOP, subject to the restrictions defined
in Subsections link:Ejb.htm#50421764_68555[See Entity Bean’s Primary Key
Class] and link:Ejb.htm#50421764_10952[See Entity Bean’s Primary Key
Class]. The primary key class may be specific to an entity bean class
(i.e., each entity bean class may define a different class for its
primary key, but it is possible that multiple entity beans use the same
primary key class).

[#50421764_pgfId-1311452]##[#50421764_marker-1318853]##A client that
holds a reference to an entity object’s component interface can
determine the entity object’s identity within its home by invoking the
getPrimaryKey method on the reference.

[#50421764_pgfId-1469915]##The [#50421764_marker-1492190]##object
identity associated with a reference does not change over the lifetime
of the reference. (That is, getPrimaryKey always returns the same value
when called on the same entity object reference). If an entity object
has both a remote home interface and a local home interface, the result
of invoking the getPrimaryKey method on a reference to the entity
object’s remote interface and on a reference to the entity object’s
local interface is the same.

[#50421764_pgfId-1311453]##A client can test whether two entity object
references refer to the same entity object by using the _isIdentical_
[#50421764_marker-1492191]## method. Alternatively, if a client obtains
two entity object references from the same home, it can determine if
they refer to the same entity by comparing their primary keys using the
[#50421764_marker-1492192]##equals method.

[#50421764_pgfId-1296778]##The following code illustrates using the
isIdentical method to test if two object references refer to the same
entity object:

[#50421764_pgfId-1201642]##Account acc1 = ...;

[#50421764_pgfId-1201643]##Account acc2 = ...;

[#50421764_pgfId-1201644]## 

[#50421764_pgfId-1201645]##if (acc1.isIdentical(acc2)) \{

[#50421764_pgfId-1201646]## // acc1 and acc2 are the same entity object

[#50421764_pgfId-1201647]##} else \{

[#50421764_pgfId-1201648]## // acc2 and acc2 are different entity
objects

[#50421764_pgfId-1201649]##}

[#50421764_pgfId-1309144]##A client that knows the primary key of an
entity object can obtain a reference to the entity object by invoking
the findByPrimaryKey(key) method on the entity bean’s home interface.

[#50421764_pgfId-1309145]##Note that the Enterprise JavaBeans
architecture does not specify “object equality” (i.e. use of the ==
operator) for entity object references. The result of comparing two
object references using the Java programming language
Object.equals(Object obj) method is unspecified. Performing the
Object.hashCode() method on two object references that represent the
entity object is not guaranteed to yield the same result. Therefore, a
client should always use the isIdentical method to determine if two
entity object references refer to the same entity object.

[#50421764_pgfId-1549754]##Note that the use of _isIdentical_ for the
comparison of object references applies to the implementation of the
methods of the _java.util.Collection_ API as well.

==== [#50421764_pgfId-1201653]##Entity Bean’s Remote Interface

image:Ejb-4.gif[image]

[#50421764_pgfId-1201654]##[#50421764_marker-1318855]##A client can
access an entity object through the entity bean’s remote interface. An
entity bean’s remote interface must extend the javax.ejb.EJBObject
interface. A remote interface defines the business methods that are
callable by remote clients.

[#50421764_pgfId-1201655]##The following example illustrates the
definition of an entity bean’s remote interface:

[#50421764_pgfId-1201656]##public interface Account extends
javax.ejb.EJBObject \{

[#50421764_pgfId-1201657]## void debit(double amount)

[#50421764_pgfId-1201658]## throws java.rmi.RemoteException,

[#50421764_pgfId-1201659]## InsufficientBalanceException;

[#50421764_pgfId-1201660]## void credit(double amount)

[#50421764_pgfId-1201661]## throws java.rmi.RemoteException;

[#50421764_pgfId-1201662]## double getBalance()

[#50421764_pgfId-1201663]## throws java.rmi.RemoteException;

[#50421764_pgfId-1201664]##}

[#50421764_pgfId-1201666]##The javax.ejb.EJBObject interface defines the
methods that allow the client to perform the following operations on an
entity object’s reference:

[#50421764_pgfId-1201667]##Obtain the remote home interface for the
entity object.

[#50421764_pgfId-1201668]##Remove the entity object.

[#50421764_pgfId-1201669]##Obtain the entity object’s handle.

[#50421764_pgfId-1201670]##Obtain the entity object’s primary key.

[#50421764_pgfId-1201671]##The container provides the implementation of
the methods defined in the javax.ejb.EJBObject interface. Only the
business methods are delegated to the instances of the enterprise bean
class.

[#50421764_pgfId-1201672]##Note that the entity object does not expose
the methods of the javax.ejb.EnterpriseBean interface to the client.
These methods are not intended for the client—they are used by the
container to manage the enterprise bean instances.

==== [#50421764_pgfId-1469576]##Entity Bean’s Local Interface

image:Ejb-4.gif[image]

[#50421764_pgfId-1469578]##[#50421764_marker-1469577]##A local client
can access an entity object through the entity bean’s local interface.
An entity bean’s local interface must extend the
javax.ejb.EJBLocalObject interface. A local interface defines the
business methods that are callable by local clients.

[#50421764_pgfId-1469579]##The following example illustrates the
definition of an entity bean’s local interface:

[#50421764_pgfId-1469580]##public interface Account extends
javax.ejb.EJBLocalObject \{

[#50421764_pgfId-1469581]## void debit(double amount)

[#50421764_pgfId-1469582]## throws InsufficientBalanceException;

[#50421764_pgfId-1469584]## void credit(double amount);

[#50421764_pgfId-1469586]## double getBalance();

[#50421764_pgfId-1469588]##}

[#50421764_pgfId-1469590]## _Note that the methods of the entity bean’s
local interface must not throw the java.rmi.RemoteException._

[#50421764_pgfId-1475873]##The
[#50421764_marker-1492193]##javax.ejb.EJBLocalObject interface defines
the methods that allow the [#50421764_marker-1492194]##local client to
perform the following operations on an
[#50421764_marker-1492195]##entity object’s local reference:

[#50421764_pgfId-1469591]##Obtain the local home interface for the
entity object.

[#50421764_pgfId-1469592]##Remove the entity object.

[#50421764_pgfId-1469594]##Obtain the entity object’s primary key.

[#50421764_pgfId-1469595]##The container provides the implementation of
the methods defined in the javax.ejb.EJBLocalObject interface. Only the
business methods are delegated to the instances of the enterprise bean
class.

[#50421764_pgfId-1469596]##Note that the entity object does not expose
the methods of the javax.ejb.EntityBean or the optional
_javax.ejb.TimedObject_ interface to the local client. These methods are
not intended for the local client—they are used by the container to
manage the enterprise bean instances.

==== [#50421764_pgfId-1201674]##[#50421764_41361]##Entity Bean’s Handle

image:Ejb-4.gif[image]

[#50421764_pgfId-1201675]##An [#50421764_marker-1492196]##entity
object’s handle is an object that identifies the entity object on a
network. A client that has a reference to an entity object’s remote
interface can obtain the entity object’s handle by invoking the
getHandle method on the remote interface. The _getHandle_ method is only
available on the remote interface.

[#50421764_pgfId-1201676]##[#50421764_marker-1318856]##Since a handle
class extends java.io.Serializable, a client may serialize the handle.
The client may use the serialized handle later, possibly in a different
process or even system, to re-obtain a reference to the entity object
identified by the handle.

[#50421764_pgfId-1287364]##The client code must use the
javax.rmi.PortableRemoteObject.narrow method to convert the result of
the getEJBObject method invoked on a handle to the entity bean’s remote
interface type.

[#50421764_pgfId-1259836]##The lifetime and scope of a handle is
specific to the handle implementation. At the minimum, a program running
in one JVM must be able to obtain and serialize the handle, and another
program running in a different JVM must be able to deserialize it and
re-create an object reference. An entity handle is typically implemented
to be usable over a long period of time—it must be usable at least
across a server restart.

[#50421764_pgfId-1201677]##Containers that store long-lived entities
will typically provide handle implementations that allow clients to
store a handle for a long time (possibly many years). Such a handle will
be usable even if parts of the technology used by the container (e.g.
ORB, DBMS, server) have been upgraded or replaced while the client has
stored the handle. Support for this “quality of service” is not required
by the EJB specification.

[#50421764_pgfId-1309340]##An EJB container is not required to accept a
handle that was generated by another vendor’s EJB container.

[#50421764_pgfId-1201678]##The use of a handle is illustrated by the
following example:

[#50421764_pgfId-1201679]##// A client obtains a handle of an account
entity object and

[#50421764_pgfId-1201680]##// stores the handle in stable storage.

[#50421764_pgfId-1201681]##//

[#50421764_pgfId-1201682]##ObjectOutputStream stream = ...;

[#50421764_pgfId-1201683]##Account account = ...;

[#50421764_pgfId-1201684]##Handle handle = account.getHandle();

[#50421764_pgfId-1201685]##stream.writeObject(handle);

[#50421764_pgfId-1201686]## 

[#50421764_pgfId-1201687]##// A client can read the handle from stable
storage, and use the

[#50421764_pgfId-1201688]##// handle to resurrect an object reference to
the

[#50421764_pgfId-1201689]##// account entity object.

[#50421764_pgfId-1201690]##//

[#50421764_pgfId-1201691]##ObjectInputStream stream = ...;

[#50421764_pgfId-1201692]##Handle handle = (Handle)
stream.readObject(handle);

[#50421764_pgfId-1201693]##Account account =
(Account)javax.rmi.PortableRemoteObject.narrow(

[#50421764_pgfId-1287340]## handle.getEJBObject(), Account.class);

[#50421764_pgfId-1201694]##account.debit(100.00);

[#50421764_pgfId-1378940]##A handle is not a capability, in the security
sense, that would automatically grant its holder the right to invoke
methods on the object. When a reference to an object is obtained from a
handle, and then a method on the object is invoked, the container
performs the usual access checks based on the caller’s principal.

==== [#50421764_pgfId-1287525]##Entity Home Handles

image:Ejb-4.gif[image]

[#50421764_pgfId-1289854]##[#50421764_marker-1318857]##The EJB
specification allows a client to obtain a handle for the remote home
interface. The client can use the home handle to store a reference to an
entity bean’s remote home interface in stable storage, and re-create the
reference later. This handle functionality may be useful to a client
that needs to use the remote home interface in the future, but does not
know the JNDI name of the remote home interface.

[#50421764_pgfId-1289857]##A handle to a remote home interface must
implement the javax.ejb.HomeHandle interface.

[#50421764_pgfId-1289864]##The client code must use the
javax.rmi.PortableRemoteObject.narrow method to convert the result of
the getEJBHome method invoked on a handle to the home interface type.

[#50421764_pgfId-1301712]##The lifetime and scope of a handle is
specific to the handle implementation. At a minimum, a program running
in one JVM must be able to serialize the handle, and another program
running in a different JVM must be able to deserialize it and re-create
an object reference. An entity handle is typically implemented to be
usable over a long period of time—it must be usable at least across a
server restart.

==== [#50421764_pgfId-1289853]##Type Narrowing of Object References

image:Ejb-4.gif[image]

[#50421764_pgfId-1287526]##[#50421764_marker-1318858]##A client program
that is intended to be interoperable with all compliant EJB container
implementations must use the javax.rmi.PortableRemoteObject.narrow
method to perform type-narrowing of the client-side representations of
the remote home and remote interfaces.

[#50421764_pgfId-1287527]##Note: Programs that use the
[#50421764_marker-1492197]##cast operator to narrow the remote and
remote home interfaces are likely to fail if the container
implementation uses RMI-IIOP as the underlying communication transport.

=== [#50421764_pgfId-1430602]##EJB 2.1 [#50421764_34804]##Entity Bean Component Contract for Container-Managed Persistence

[#50421764_pgfId-1430603]##The EJB 2.1 entity bean component contract
for container-managed persistence is the contract between an entity bean
and its container. It defines the life cycle of the entity bean
instances, the model for method delegation of the business methods
invoked by the client, and the model for the management of the entity
bean’s persistent state and relationships. The main goal of this
contract is to ensure that an entity bean component using
container-managed persistence is portable across all compliant EJB
containers.

[#50421764_pgfId-1430604]##This chapter defines the Enterprise Bean
Provider’s view of this contract and responsibilities of the Container
Provider for managing the life cycle of the enterprise bean instances
and their persistent state and relationships.

[#50421764_pgfId-1675485]##Note that use of dependency injection,
interceptors, and Java language metadata annotations is not supported
for EJB 2.1 entity beans.

==== [#50421764_pgfId-1430605]##Overview

image:Ejb-4.gif[image]

[#50421764_pgfId-1484639]##[#50421764_marker-1484637]##In accordance
with the architecture for container-managed persistence, the Bean
Provider develops a set of entity beans for an application, and
determines the relationships among them. The Bean Provider designs an
abstract persistence schema for each entity bean, which defines its
[#50421764_marker-1492231]##container-managed fields and relationships,
and determines the methods for accessing them. The entity bean instance
accesses its [#50421764_marker-1492230]##container-managed fields and
relationships at runtime by means of the methods defined for its
abstract persistence schema.

[#50421764_pgfId-1430609]##[#50421764_marker-1430608]##The abstract
persistence schema is specified in the deployment descriptor that is
produced by the Bean Provider. The Deployer, using the Container
Provider’s tools, determines how the persistent fields and relationships
defined by the abstract persistence schema are mapped to a database or
other persistent store, and generates the necessary additional classes
and interfaces that enable the container to manage the persistent fields
and relationships of the entity bean instances at runtime.

[#50421764_pgfId-1465361]##[#50421764_marker-1465360]##This chapter
describes the component contract for an EJB 2.1 entity bean with
container-managed persistence, and how data independence is maintained
between the entity bean instance and its representation in the
persistent store. It describes this contract from the viewpoints of both
the Bean Provider and the container.

==== [#50421764_pgfId-1430624]##Container-Managed Entity Persistence and Data Independence

image:Ejb-4.gif[image]

[#50421764_pgfId-1465387]##The [#50421764_marker-1492232]##EJB component
model provides a separation between the client view of a bean (as
presented by its home and component interfaces) and the entity bean
class (which provides the implementation of the client view). The EJB
architecture for container-managed persistence adds to this a separation
between the entity bean class (as defined by the Bean Provider) and its
persistent representation. The container-managed persistence
architecture thus provides not only a layer of data independence between
the client view of a bean as an _entity object_ and the Bean Provider’s
internal view of the bean in terms of the entity bean instance, but also
between the entity bean instance and its persistent representation. This
allows an entity bean to be evolved independently from its clients,
without requiring the redefinition or recompilation of those clients,
and it allows an entity bean to be redeployed across different
containers and different persistent data stores, without requiring the
redefinition or recompilation of the entity bean class.

[#50421764_pgfId-1430628]##In container-managed persistence, unlike in
bean-managed persistence, the Bean Provider does not write database
access calls in the methods of the entity bean class. Instead,
persistence is handled by the container at runtime. The entity Bean
Provider must specify in the deployment descriptor those persistent
fields and relationships for which the container must handle data
access. [#50421764_marker-1430629]##The Bean Provider codes all
persistent data access by using the accessor methods that are defined
for the abstract persistence schema. The implementation of the
persistent fields and relationships, as well as all data access, is
deferred to the container.

[#50421764_pgfId-1430633]##[#50421764_marker-1430632]##It is the
responsibility of the Deployer to map the abstract persistence schema of
a set of interrelated entity bean classes into the physical schema used
by the underlying data store (e.g., into a relational schema) by using
the Container Provider’s tools. The Deployer uses the deployment
descriptor as input to the Container Provider’s tools to perform this
mapping. The Container Provider’s tools are also used to generate the
concrete implementation of the entity bean classes, including the code
that delegates calls to the accessor methods of the entity bean class to
the runtime persistent data access layer of the container.

[#50421764_pgfId-1430635]##[#50421764_marker-1430634]##The EJB
deployment descriptor for EJB 2.1 entity beans describes _logical_
relationships among entity beans. It does not provide a mechanism for
specifying how the abstract persistence schema of an entity bean or of a
set of interrelated entity beans is to be mapped to an underlying
database. This is the responsibility of the Deployer, who, using the
Container Provider’s tools, uses the logical relationships that are
specified in the deployment descriptor to map to the physical
relationships that are specific to the underlying resource. It is the
responsibility of the container to manage the mapping between the
logical and physical relationships at runtime and to manage the
referential integrity of the relationships.

[#50421764_pgfId-1430640]##[#50421764_marker-1430639]##The advantage of
using container-managed persistence is that the entity bean can be
logically independent of the data source in which the entity is stored.
The Container Provider’s tools can, for example, generate classes that
use JDBC or SQLJ to access the entity state in a relational database;
classes that implement access to a non-relational data source, such as
an IMS database; or classes that implement function calls to existing
enterprise applications. These tools are typically specific to each data
source.

======= [#50421764_pgfId-1430690]##

image:Ejb-5.gif[image]

View of Underlying Data Sources Accessed Through Entity Bean

image:Ejb-8.gif[image]

==== [#50421764_pgfId-1430705]##The Entity Bean Provider’s View of Container-Managed Persistence

image:Ejb-4.gif[image]

[#50421764_pgfId-1465439]##[#50421764_marker-1465438]##An entity bean
implements an object view of a business entity or set of business
entities stored in an underlying database or implemented by an existing
enterprise application (for example, by a mainframe program or by an ERP
application).

[#50421764_pgfId-1430707]##[#50421764_marker-1465440]##[#50421764_marker-1465442]##An
entity bean with container-managed persistence typically consists of its
entity bean class; a component interface which defines its client view
business methods; a home interface which defines the create, remove,
home, and finder methods of its client view; and its abstract
persistence schema as specified in the deployment descriptor.

[#50421764_pgfId-1465777]##A client of an entity bean can control the
life cycle of a bean by using the bean’s home interface and can
manipulate the bean as a business entity by using the methods defined by
its component interface. The home and component interfaces of a bean
define its client view.

[#50421764_pgfId-1467429]##An entity bean with container-managed
persistence typically has [#50421764_marker-1492260]##container-managed
relationships with other container-managed persistence entity beans, as
defined by the _relationships_ [#50421764_marker-1492261]## element of
the deployment descriptor. The architecture for container-managed
persistence thus allows the Bean Provider to implement complex
applications by defining a complex abstract persistence schema
encompassing multiple entity bean classes related by means of
container-managed relationships.

[#50421764_pgfId-1476173]##An entity bean accesses related entity beans
by means of the accessor methods for its
[#50421764_marker-1492262]##container-managed relationship fields, which
are specified by the _cmr-field_ [#50421764_marker-1492263]## elements
of its abstract persistence schema defined in the deployment descriptor.
[#50421764_marker-1492264]##Entity bean relationships are defined in
terms of the local interfaces of the related beans, and the view an
entity bean presents to its related beans is defined by its local home
and local interfaces. Thus, an entity bean can be the target of a
relationship from another entity bean only if it has a local interface.

[#50421764_pgfId-1476083]##The Bean Provider programming an application
that uses container-managed persistence typically avoids calls to the
methods of the remote home and remote interfaces in favor of invoking
related beans by means of the methods of their local interfaces. Unlike
remote method calls, such internal method invocations are made using
call-by-reference and commonly do not involve the checking of method
permissions.

[#50421764_pgfId-1465498]##The Enterprise JavaBeans architecture for
container-managed persistence provides great flexibility to the Bean
Provider in designing an application.

[#50421764_pgfId-1486591]##For example, a group of related entity beans—
_Order_ , _LineItem_ , and _Customer_ —might all be defined as having
only local interfaces, with a remotable session bean containing the
business logic that drives their invocation. The individual entity beans
form a coordinated whole that provides an interrelated set of services
that are exposed by their several home and component interfaces. The
services provided by the local network of entity beans is exposed to the
remote client view through the home and remote interfaces of the session
bean, which offers a coarser grained remote service.

[#50421764_pgfId-1476203]##Alternatively, a single entity bean might
represent an independent, remotable business object that forms a unit of
distribution that is designed to be referenced remotely by multiple
enterprise beans and/or other remote clients. Such a remotable entity
bean might make use of other entity beans within its local scope to
further model its complex internal state. For example, an _Order_ entity
bean might make use of a _LineItem_ entity bean internally, not exposing
it to remote clients. In this case, the _Order_ entity bean might define
both a remote and a local component interface, where the local interface
is presented only to the related entity beans, such as _LineItem_ , and
the remote interface is presented to session beans and/or web-tier
clients.

====== [#50421764_pgfId-1430714]##The Entity Bean Provider’s Programming Contract

[#50421764_pgfId-1430716]##[#50421764_marker-1430715]##The Bean Provider
must observe the following programming contract when defining an entity
bean class that uses container-managed persistence:

[#50421764_pgfId-1430718]##[#50421764_marker-1430717]##The Bean Provider
must define the entity bean class as an abstract class. The container
provides the implementation class that is used at runtime.

[#50421764_pgfId-1430720]##[#50421764_marker-1430719]##The
[#50421764_marker-1492265]##container-managed persistent fields and
[#50421764_marker-1492266]##container-managed relationship fields must
_not_ be defined in the entity bean class. From the perspective of the
Bean Provider, the container-managed persistent fields and
container-managed relationship fields are virtual fields only, and are
accessed through get and set accessor methods. The implementation of the
container-managed persistent fields and container-managed relationship
fields is supplied by the container.

[#50421764_pgfId-1430722]##[#50421764_marker-1430721]##The
container-managed persistent fields and container-managed relationship
fields must be specified in the deployment descriptor using the
_cmp-field_ and _cmr-field_ elements respectively. The names of these
fields must be valid Java identifiers and must begin with a lowercase
letter, as determined by _java.lang.Character.isLowerCase_ .

[#50421764_pgfId-1430724]##[#50421764_marker-1430723]##The Bean Provider
must define the accessor methods for the container-managed persistent
fields and container-managed relationship fields as get and set methods,
using the JavaBeans conventions. The implementation of the accessor
methods is supplied by the container.

[#50421764_pgfId-1430725]##The [#50421764_marker-1492267]##accessor
methods must be public, must be abstract, and must bear the name of the
container-managed persistent field ( _cmp-field_ ) or container-managed
relationship field ( _cmr-field_ ) that is specified in the deployment
descriptor, and in which the first letter of the name of the cmp-field
or cmr-field has been uppercased and prefixed by “ _get_ ” or “ _set_ ”.

[#50421764_pgfId-1430726]##The [#50421764_marker-1492268]##accessor
methods for a container-managed relationship field must be defined in
terms of the local interface of the related entity bean, as described in
link:Ejb.htm#50421764_28149[See The Entity Bean Provider’s View of
Persistent Relationships].

[#50421764_pgfId-1430731]##[#50421764_marker-1430730]##The accessor
methods for container-managed relationship fields for
[#50421764_marker-1492270]##one-to-many or
[#50421764_marker-1492271]##many-to-many relationships must utilize one
of the following [#50421764_marker-1492269]##Collection interfaces:
_java.util.Collection_ or _java.util.Set_ . The Collection interfaces
used in relationships are specified in the deployment descriptor. The
implementation of the collection classes used for the container-managed
relationship fields is supplied by the container.

[#50421764_pgfId-1471613]##An entity bean local interface type (or a
collection of such) can be the type of a cmr-field. An entity bean local
interface type (or a collection of such) cannot be the type of a
cmp-field.

[#50421764_pgfId-1430736]##[#50421764_marker-1430735]##The accessor
methods for the container-managed relationship fields must not be
exposed in the remote interface of an entity bean.

[#50421764_pgfId-1463613]##The [#50421764_marker-1492272]##local
interface types of the entity bean and of related entity beans must not
be exposed through the remote interface of the entity bean.

[#50421764_pgfId-1571913]##The collection classes that are used for
container-managed relationships must not be exposed through the remote
interface of the entity bean.

[#50421764_pgfId-1571916]##[#50421764_marker-1571914]##Once the primary
key for an entity bean has been set, the Bean Provider must not attempt
to change it by use of set accessor methods on the primary key
cmp-fields. The Bean Provider should therefore not expose the set
accessor methods for the primary key cmp-fields in the component
interface of the entity bean.

[#50421764_pgfId-1461105]##[#50421764_marker-1430742]##The Bean Provider
must ensure that the Java types assigned to the cmp-fields are
restricted to the following: Java primitive types and Java serializable
types.

====== [#50421764_pgfId-1462338]##[#50421764_28149]##The Entity Bean Provider’s View of Persistent Relationships

[#50421764_pgfId-1462341]##[#50421764_marker-1462339]##An entity bean
may have relationships with other entity beans with container-managed
persistence.

[#50421764_pgfId-1462342]##Relationships may be one-to-one, one-to-many,
or many-to-many relationships.

[#50421764_pgfId-1430752]##[#50421764_marker-1492273]##Container-managed
relationships can exist only among entity beans within the same local
relationship scope, as defined by the _relationships_
[#50421764_marker-1492274]## element in the deployment descriptor.
Container-managed relationships are defined in terms of the local
interfaces of the related beans.

[#50421764_pgfId-1462345]##Relationships may be either bidirectional or
unidirectional. If a [#50421764_marker-1492275]##relationship is
bidirectional, it can be navigated in both directions, whereas a
unidirectional relationship can be navigated in one direction only.

[#50421764_pgfId-1430753]##A [#50421764_marker-1492276]##unidirectional
relationship is implemented with a cmr-field on the entity bean instance
from which navigation can take place, and no related cmr-field on the
entity bean instance that is the target of the relationship.
Unidirectional relationships are typically used when the Bean Provider
wishes to restrict the visibility of a relationship.

[#50421764_pgfId-1471616]##An entity bean that does not have a
[#50421764_marker-1492277]##local interface can have only unidirectional
relationships from itself to other entity beans. The lack of a local
interface prevents other entity beans from having a relationship to it.

[#50421764_pgfId-1465278]##The bean developer navigates or manipulates
[#50421764_marker-1492278]##relationships by using the get and set
accessor methods for the container-managed relationship fields and the
_java.util.Collection_ API for collection-valued container-managed
relationship fields.

[#50421764_pgfId-1430755]##The Bean Provider must consider the type and
cardinality of [#50421764_marker-1492279]##relationships when the entity
bean classes are programmed. The get method for a cmr-field must return
either the local interface of the entity bean or a collection (either
_java.util.Collection_ or _java.util.Set_ ) of the same. The set method
for the relationship must take as an argument the entity bean’s local
interface or a collection of the same.

====== [#50421764_pgfId-1430772]##Dependent Value Classes

[#50421764_pgfId-1463626]##A dependent value class is a concrete class
that is the value of a cmp-field. A dependent value class may be a class
that the Bean Provider wishes to use internally within an entity bean
with container-managed persistence, and/or it may be a class that the
Bean Provider chooses to expose through the remote (or local) interface
of the entity bean.

[#50421764_pgfId-1463705]##[#50421764_marker-1463673]##A dependent value
class can be the value of a cmp-field; it cannot be the value of a
cmr-field.

[#50421764_pgfId-1481792]##The get accessor method for a cmp-field that
corresponds to a dependent value class returns a _copy_ of the dependent
value class instance. The assignment of a dependent value class value to
a cmp-field using the set accessor method causes the value to be copied
to the target cmp-field.

[#50421764_pgfId-1463708]##A dependent value class must be serializable.
The internal structure of a dependent value class is not described in
the EJB deployment descriptor.

====== [#50421764_pgfId-1430790]##Remove Protocols

[#50421764_pgfId-1463234]##The Bean Provider can specify the removal of
an [#50421764_marker-1492280]##entity object in two ways:

[#50421764_pgfId-1463153]##By the use of a _remove_
[#50421764_marker-1492281]## method on the entity bean’s component
interface or home interface.

[#50421764_pgfId-1463154]##By the use of a _cascade-delete_
[#50421764_marker-1492282]## specification in the deployment descriptor.

====== [#50421764_pgfId-1462514]##Remove Methods

{empty}[#50421764_pgfId-1475900]##When the _remove_ method is invoked on
an entity object, the container must invoke the entity Bean Provider’s
_ejbRemove_ [#50421764_marker-1492283]## method as described in Section
link:Ejb.htm#50421764_36556[See Container’s View]. After the Bean
Provider’s _ejbRemove_ method returns (and prior to returning to the
client), the container must remove the entity object from all
relationships in which it participates, and then remove its persistent
representation. link:#pgfId-1488090[4]

[#50421764_pgfId-1462503]##Once an entity has been removed from a
relationship, the accessor methods for any relationships to the entity
will reflect this removal. An accessor method for a one-to-one or
many-to-one relationship to the entity will return null; and an accessor
method for a many-to-many relationship to the entity will return a
collection from which the entity object has been removed.

[#50421764_pgfId-1462477]##The container must detect any subsequent
attempt to invoke an accessor method on the removed entity object and
throw the _java.rmi.NoSuchObjectException_ if the client is a remote
client or the _javax.ejb.NoSuchObjectLocalException_ if the client is a
local client. The container must detect an attempt to assign a removed
entity object as the value of a cmr-field of another object (whether as
an argument to a set accessor method or as an argument to a method of
the _java.util.Collection_ API) and throw the
_java.lang.IllegalArgumentException_ .

[#50421764_pgfId-1486747]##After removing the entity object from all
relationships and removing its persistent representation, the container
must then cascade the removal to all entity beans with which the entity
had been previously in container-managed relationships for which the
_cascade-delete_ option was specified.

[#50421764_pgfId-1463176]##More than one relationship may be affected by
the removal of an entity object, as in the following example. Once the
shipping address object used by the _Order_ bean has been removed, the
billing address accessor method will also return null.

[#50421764_pgfId-1463177]##public void changeAddress()

[#50421764_pgfId-1463178]## Address a = createAddress();

[#50421764_pgfId-1463179]## setShippingAddress(a);

[#50421764_pgfId-1463180]## setBillingAddress(a);

[#50421764_pgfId-1463181]## //both relationships now reference the same
entity object

[#50421764_pgfId-1463183]## getShippingAddress().remove();

[#50421764_pgfId-1463184]## if (getBillingAddress() == null) // it must
be

[#50421764_pgfId-1463185]## ...

[#50421764_pgfId-1463186]## else ...

[#50421764_pgfId-1463187]## // this is impossible....

[#50421764_pgfId-1484765]##The _remove_ method, alone, causes only the
entity on which it is invoked to be removed. It does not cause the
deletion to be cascaded to other entity objects. In order for the
deletion of one entity object to be automatically cascaded to another,
the _cascade-delete_ [#50421764_marker-1492289]## mechanism should be
used.

====== [#50421764_pgfId-1463190]##[#50421764_10008]##Cascade-delete

[#50421764_pgfId-1475904]##[#50421764_marker-1463189]##The
_cascade-delete_ deployment descriptor element is used within a
particular relationship to specify that the lifetime of one or more
entity objects is dependent upon the lifetime of another entity object.

[#50421764_pgfId-1463192]##[#50421764_marker-1463191]##The
_cascade-delete_ deployment descriptor element is contained within the
_ejb-relationship-role_ element. The _cascade-delete_ element can only
be specified for an _ejb-relationship-role_ element contained in an
_ejb-relation_ element if the _other_ _ejb-relationship-role_ element in
the same _ejb-relation_ element specifies a _multiplicity_ of _One_ .
The _cascade-delete_ option cannot be specified for a many-to-many
relationship. The deletion of one entity object can only be cascaded to
cause the deletion of other entity objects if the first entity object is
in a one-to-one or one-to-many relationship with those other entity
objects.

[#50421764_pgfId-1481824]##If an entity is deleted, and the
_cascade-delete_ deployment descriptor element is specified for a
related entity bean, then the removal is cascaded to cause the removal
of the related entity object or objects. As with the _remove_ operation,
the removal triggered by the _cascade-delete_ option causes the
container to invoke the _ejbRemove_ method on the entity bean instance
that is to be removed before the persistent representation of that
entity object is removed. Once an entity has been removed from a
relationship because of a cascaded delete, the accessor methods for any
relationships to the entity will reflect this removal. An accessor
method for a one-to-one or many-to-one relationship to the entity will
return null; and an accessor method for a many-to-many relationship to
the entity will return a collection from which the entity object has
been removed. After removing the entity object from all relationships
and removing its persistent representation, the container must then
cascade the removal to all entity beans with which the entity had been
previously been in container-managed relationships for which the
_cascade-delete_ option was specified.

[#50421764_pgfId-1463195]##The use of _cascade-delete_ causes only the
entity object or objects in the relationship for which it is specified
to be deleted. It does not cause the deletion to be further cascaded to
other entity objects, unless they are participants in relationship roles
for which _cascade-delete_ has also been specified.

====== [#50421764_pgfId-1430839]##Identity of Entity Objects

[#50421764_pgfId-1484792]##From the viewpoint of the Bean Provider,
[#50421764_marker-1502892]##entity objects have a runtime object
identity that is maintained by the container.

[#50421764_pgfId-1430852]##The container maintains the persistent
identity of an entity object on the basis of its primary key.

[#50421764_pgfId-1430854]##The [#50421764_marker-1502893]##primary key
of an entity bean may or may not be visible as one or more cmp-fields of
the instance, depending on the way in which it is specified. The Bean
Provider specifies the primary key as described in
link:Ejb.htm#50421764_72199[See Primary Keys]. Once it has been set, the
Bean Provider must not attempt to change the value of a primary key
field by means of a set method on its cmp-fields.

[#50421764_pgfId-1430859]##When a new instance of an entity bean whose
[#50421764_marker-1502894]##primary key fields are visible in the entity
bean class is created, the Bean Provider must use the
_ejbCreate<METHOD>_ method to set all the primary key fields of the
entity bean instance before the instance can participate in a
relationship, e.g. be used in a set accessor method for a cmr-field. The
Bean Provider must not reset a primary key value by means of a set
method on any of its cmp-fields after it has been set in the
_ejbCreate<METHOD>_ method. If the Bean Provider attempts to reset a
primary key value, the container must throw the
_java.lang.IllegalStateException_ .

[#50421764_pgfId-1484817]##Note that the container’s implementation of
the referential integrity semantics for container-managed relationships
must not cause the value of the primary key to change.

[#50421764_pgfId-1588480]##The Bean Provider should not use untrimmed or
blank-padded string-valued primary key fields. Use of untrimmed primary
key fields may cause comparison operations based on primary keys to
fail, and may result in non-portable behavior. If untrimmed strings are
used in primary key fields or other cmp-fields, the container or
database system may trim them.

====== [#50421764_pgfId-1430861]##[#50421764_78397]##Semantics of Assignment for Relationships

[#50421764_pgfId-1458915]##The assignment operations for
[#50421764_marker-1502897]##container-managed relationships have a
special semantics that is determined by the referential integrity
semantics for the relationship multiplicity.

[#50421764_pgfId-1458926]##In the case of a one-to-one relationship,
when the Bean Provider uses a set accessor method to assign an object
from a cmr-field in one instance to a cmr-field of the _same
relationship type_ (i.e., as defined by the _ejb-relation_ and
_ejb-relationship-role_ deployment descriptor elements) in another
instance, the object is effectively _moved_ and the value of the source
cmr-field is set to null in the same transaction context. If the
argument to the set accessor method is not of the same type as the
cmr-field, the container must throw the
_java.lang.IllegalArgumentException_ .

[#50421764_pgfId-1458873]##In the case of a one-to-many or many-to-many
relationship, either the _java.util.Collection_ API or a set accessor
method may be used to manipulate the contents of a collection-valued
cmr-field. These two approaches are discussed below.

====== [#50421764_pgfId-1458874]##Use of the java.util.Collection API to Update Relationships

[#50421764_pgfId-1459537]##The methods of the _java.util.Collection_ API
for the [#50421764_marker-1502898]##container-managed collections used
for collection-valued cmr-fields have the usual semantics, with the
following exception: the _add_ and _addAll_ methods applied to
container-managed collections in one-to-many relationships have a
special semantics that is determined by the
[#50421764_marker-1502899]##referential integrity of one-to-many
relationships.

[#50421764_pgfId-1459522]##If the argument to the _add_
[#50421764_marker-1502900]## method is already an element of a
collection-valued relationship field of the _same relationship type_ as
the target collection (as defined by the _ejb-relation_ and
_ejb-relationship-role_ deployment descriptor elements), it is removed
from this first relationship and added, in the same transaction context,
to the target relationship (i.e., it is effectively moved from one
collection of the relationship type to the other). For example, if there
is a one-to-many relationship between field offices and sales
representatives, adding a sales representative to a new field office
will have the effect of removing him or her from his or her current
field office. If the argument to the _add_ method is not an element of a
collection-valued relationship of the _same relationship type_ , it is
simply added to the target collection and not removed from its current
collection, if any.

[#50421764_pgfId-1459525]##The _addAll_ [#50421764_marker-1502901]##
method, when applied to a target collection in a one-to-many
relationship, has similar semantics, applied to the members of its
collection argument individually.

[#50421764_pgfId-1459568]##Note that in the case of many-to-many
relationships, adding an element or elements to the contents of a
collection-valued cmr-field has no effect on the source collection, if
any. For example, if there is a many-to-many relationship between
customers and sales representatives, a customer can be added to the set
of customers handled by a particular sales representative without
affecting the set of customers handled by any other sales
representative.

[#50421764_pgfId-1459543]##When the _java.util.Collection_
[#50421764_marker-1502902]## API is used to manipulate the contents of
container-managed relationship fields, the argument to any Collection
method defined with a single Object parameter must be of the element
type of the collection defined for the target cmr-field. The argument
for any collection-valued parameter must be a _java.util.Collection_ (or
_java.util.Set_ ), all of whose elements are of the element type of the
collection defined for the target cmr-field. If an argument is not of
the correct type for the relationship, the container must throw the
_java.lang.IllegalArgumentException_ .

[#50421764_pgfId-1459544]##The Bean Provider should exercise caution
when using an Iterator over a collection in a container-managed
relationship. In particular, the Bean Provider should not modify the
container-managed collection while the iteration is in progress in any
way that causes elements to be added or removed, other than by the
_java.util.Iterator.remove()_ [#50421764_marker-1502903]## method. If
elements are added or removed from the underlying container-managed
collection used by an iterator other than by the
_java.util.Iterator.remove()_ method, the container should throw the
_java.lang.IllegalStateException_ on the next operation on the iterator.

[#50421764_pgfId-1459830]##The following example illustrates how
operations on container-managed relationships that affect the contents
of a collection-valued cmr-field viewed through an iterator can be
avoided. Because there is a one-to-many relationship between field
offices and sales representatives, adding a sales representative to a
new field office causes the sales representative to be removed from the
current field office.

[#50421764_pgfId-1459795]##Collection nySalesreps =
nyOffice.getSalesreps();

[#50421764_pgfId-1459796]##Collection sfSalesreps =
sfOffice.getSalesreps();

[#50421764_pgfId-1459797]## 

[#50421764_pgfId-1459798]##Iterator i = nySalesreps.iterator();

[#50421764_pgfId-1459799]##Salesrep salesrep;

[#50421764_pgfId-1459821]## 

[#50421764_pgfId-1459822]##// a wrong way to transfer the salesrep

[#50421764_pgfId-1459803]##while (i.hasNext()) \{

[#50421764_pgfId-1459804]## salesrep = (Salesrep)i.next();

[#50421764_pgfId-1459805]## sfSalesreps.add(salesrep); // removes
salesrep from nyOffice

[#50421764_pgfId-1459806]##}

[#50421764_pgfId-1459807]## 

[#50421764_pgfId-1459808]##// this is a correct and safe way to transfer
the salesrep

[#50421764_pgfId-1459809]##while (i.hasNext()) \{

[#50421764_pgfId-1459810]## salesrep = (Salesrep)i.next();

[#50421764_pgfId-1459811]## i.remove();

[#50421764_pgfId-1459812]## sfSalesreps.add(salesrep);

[#50421764_pgfId-1459813]##}

[#50421764_pgfId-1459814]##

====== [#50421764_pgfId-1458988]##Use of Set Accessor Methods to Update Relationships

[#50421764_pgfId-1459538]##The semantics of a
[#50421764_marker-1502904]##set accessor method, when applied to a
collection-valued cmr-field, is also determined by the
[#50421764_marker-1502905]##referential integrity semantics associated
with the multiplicity of the relationship. The identity of the
collection object referenced by a cmr-field does not change when a set
accessor method is executed.

[#50421764_pgfId-1458992]##In the case of a one-to-many relationship, if
a collection of entity objects is assigned from a cmr-field of in one
instance to a cmr-field of the same relationship type in another
instance, the objects in the collection are effectively moved. The
contents of the collection of the target instance are replaced with the
contents of the collection of the source instance, but the _identity_ of
the collection object containing the instances in the relationship does
not change. The source cmr-field references the same collection object
as before (i.e., the identity of the collection object is preserved),
but the collection is empty.

[#50421764_pgfId-1481683]##The Bean Provider can thus use the set method
to move objects between the collections referenced by cmr-fields of the
same relationship type in different instances. The
[#50421764_marker-1502906]##set accessor method, when applied to a
cmr-field in a one-to-many relationship thus has the semantics of the
_java.util.Collection_ methods _clear_ , followed by _addAll_ , applied
to the target collection; and _clear_ , applied to the source
collection. It is the responsibility of the container to transfer the
contents of the collection instances in the same transaction context.

[#50421764_pgfId-1589942]##Note that if the collection that is passed to
the cmr setter method is an unmanaged collection (i.e., not itself the
value of a collection-valued cmr-field), the same requirements apply in
the case that the collection contains entity objects that already
participate in a one-to-many relationship of the same relationship type
as the target cmr-field.

[#50421764_pgfId-1459041]##In the following example, the telephone
numbers associated with the billing address of an _Order_ bean instance
are transferred to the shipping address. Billing address and shipping
address are different instances of the same local interface type,
_Address_ . _Address_ is related to _TelephoneNumber_ in a one-to-many
relationship. The example illustrates how a Bean Provider uses the set
method to move a set of instances.

[#50421764_pgfId-1459042]##public void changeTelephoneNumber() \{

[#50421764_pgfId-1459043]## Address a = getShippingAddress();

[#50421764_pgfId-1459044]## Address b = getBillingAddress();

[#50421764_pgfId-1459078]## Collection c = b.getTelephoneNumbers();

[#50421764_pgfId-1459045]##
a.setTelephoneNumbers(b.getTelephoneNumbers());

[#50421764_pgfId-1459047]## if (c.isEmpty()) \{ // must be true...

[#50421764_pgfId-1459048]## ...

[#50421764_pgfId-1459049]##}

[#50421764_pgfId-1459055]##In the case of a
[#50421764_marker-1502907]##many-to-many relationship, if the value of a
cmr-field is assigned to a cmr-field of the same relationship type in
another instance, the objects in the collection of the first instance
are assigned as the contents of the cmr-field of the second instance.
The identities of the collection objects referenced by the cmr-fields do
not change. The contents of the collections are shared, but not the
collections themselves. The set accessor method, when applied to a
cmr-field in a many-to-many relationship thus has the semantics of the
_java.util.Collection_ methods _clear_ , followed by _addAll_ , applied
to the target collection.

[#50421764_pgfId-1459115]##For example, if there is a many-to-many
relationship between customers and sales representatives, assigning the
set of customers of one sales representative to the another sales
representative will result in both sales representatives handling the
same customers. If the second sales representative originally handled a
different group of customers, those customers will no longer be handled
by that sales representative.

[#50421764_pgfId-1459056]##public void shareCustomers(SalesRep rep) \{

[#50421764_pgfId-1459057]## setCustomers(rep.getCustomers());

[#50421764_pgfId-1459058]## // the customers are shared among the sales
reps

[#50421764_pgfId-1459059]##}

[#50421764_pgfId-1430886]##The following section,
link:Ejb.htm#50421764_18733[See Assignment Rules for Relationships],
defines the semantics of assignment for relationships in further detail.

====== [#50421764_pgfId-1430888]##[#50421764_18733]##Assignment Rules for Relationships

[#50421764_pgfId-1430890]##[#50421764_marker-1430889]##This section
defines the semantics of assignment and collection manipulation in
one-to-one, one-to-many, and many-to-many container-managed
relationships.

[#50421764_pgfId-1430892]##[#50421764_marker-1430891]##The figures make
use of two entity beans, with local interface types A and B. Instances
with local interface type _A_ are typically designated as _a1_ ,...,
_an_ ; instances with local interface type _B_ are typically designated
as _b1_ ,..., _bm_ . Interface _A_ exposes accessor methods _getB_ and
_setB_ for navigable relationships with _B_ : _getB_ returns an instance
of _B_ or a collection of instances of _B_ , depending on the
multiplicity of the relationship. Similarly, _B_ exposes accessor
methods _getA_ and _setA_ for navigable relationships with _A_ .

[#50421764_pgfId-1430893]##All changes in each subsection are assumed to
be applied to the figure labeled “Before change” at the beginning of the
subsection (i.e., changes are not cumulative). The results of changes
are designated graphically as well as in conditional expressions
expressed in the Java _TM_ programming language.

====== [#50421764_pgfId-1430894]##One-to-one Bidirectional [#50421764_marker-1502908]##Relationships

[#50421764_pgfId-1430934]## 

image:Ejb-9.gif[image]

[#50421764_pgfId-1454927]##Before change:

[#50421764_pgfId-1454928]##B b1 = a1.getB();

[#50421764_pgfId-1454929]##B b2 = a2.getB();

[#50421764_pgfId-1430935]##Change:

[#50421764_pgfId-1430936]## _a1.setB(a2.getB());_

[#50421764_pgfId-1454933]##Expected result:

[#50421764_pgfId-1454934]##(b2.isIdentical(a1.getB())) &&

[#50421764_pgfId-1511157]##(a2.getB() == null) &&

[#50421764_pgfId-1511158]##(b1.getA() == null) &&

[#50421764_pgfId-1454935]##(a1.isIdentical(b2.getA()))

[#50421764_pgfId-1430971]## 

image:Ejb-10.gif[image]

====== [#50421764_pgfId-1430972]##One-to-one Unidirectional [#50421764_marker-1502909]##Relationships

[#50421764_pgfId-1431011]## 

image:Ejb-11.gif[image]

[#50421764_pgfId-1454939]##Before change:

[#50421764_pgfId-1454940]##B b1 = a1.getB();

[#50421764_pgfId-1454941]##B b2 = a2.getB();

[#50421764_pgfId-1431012]##Change:

[#50421764_pgfId-1431013]## _a1.setB(a2.getB());_

[#50421764_pgfId-1454945]##Expected result:

[#50421764_pgfId-1454946]## _(b2.isIdentical(a1.getB())) && (_ a2.getB()
== null)

[#50421764_pgfId-1431039]## 

image:Ejb-12.gif[image]

====== [#50421764_pgfId-1431040]##One-to-many [#50421764_marker-1502910]##Bidirectional Relationships

[#50421764_pgfId-1431117]## 

image:Ejb-13.gif[image]

[#50421764_pgfId-1454950]##Before change:

[#50421764_pgfId-1454951]##Collection b1 = a1.getB();

[#50421764_pgfId-1454952]##Collection b2 = a2.getB();

[#50421764_pgfId-1454953]##B b11, b12, ... , b1n; // members of b1

[#50421764_pgfId-1454954]##B b21, b22, ... , b2m; // members of b2

[#50421764_pgfId-1454955]## 

[#50421764_pgfId-1431118]##Change:

[#50421764_pgfId-1431119]## _a1.setB(a2.getB());_

[#50421764_pgfId-1454959]##Expected result:

[#50421764_pgfId-1454960]##(a2.getB().isEmpty()) &&

[#50421764_pgfId-1459505]##(b2.isEmpty()) &&

[#50421764_pgfId-1459506]##(b1 == a1.getB()) &&

[#50421764_pgfId-1459559]##(b2 == a2.getB()) &&

[#50421764_pgfId-1454962]##(a1.getB().contains(b21)) &&

[#50421764_pgfId-1454963]##(a1.getB().contains(b22)) && ... &&

[#50421764_pgfId-1454964]##(a1.getB().contains(b2m)) &&

[#50421764_pgfId-1454965]##(b11.getA() == null) &&

[#50421764_pgfId-1454966]##(b12.getA() == null) && ... &&

[#50421764_pgfId-1454967]##(b1n.getA() == null) &&

[#50421764_pgfId-1454968]##(a1.isIdentical(b21.getA())) &&

[#50421764_pgfId-1454969]##(a1.isIdentical(b22.getA())) && ...&&

[#50421764_pgfId-1454970]##(a1.isIdentical(b2m.getA()))

[#50421764_pgfId-1431188]## 

image:Ejb-14.gif[image]

[#50421764_pgfId-1431189]##Change:

[#50421764_pgfId-1455233]## _b2m.setA(b1n.getA());_

[#50421764_pgfId-1454974]##Expected result:

[#50421764_pgfId-1454975]##(b1.contains(b11)) &&

[#50421764_pgfId-1454976]##(b1.contains(b12)) && ... &&

[#50421764_pgfId-1454977]##(b1.contains(b1n)) &&

[#50421764_pgfId-1454978]##(b1.contains(b2m)) &&

[#50421764_pgfId-1454979]##(b2.contains(b21)) &&

[#50421764_pgfId-1454980]##(b2.contains(b22)) && ... &&

[#50421764_pgfId-1454981]##(b2.contains(b2m_1)) &&

[#50421764_pgfId-1454982]##(a1.isIdentical(b11.getA())) &&

[#50421764_pgfId-1454983]##(a1.isIdentical(b12.getA())) && ... &&

[#50421764_pgfId-1454984]##(a1.isIdentical(b1n.getA())) &&

[#50421764_pgfId-1454985]##(a2.isIdentical(b21.getA())) &&

[#50421764_pgfId-1454986]##(a2.isIdentical(b22.getA())) && ... &&

[#50421764_pgfId-1454987]##(a2.isIdentical(b2m_1.getA())) &&

[#50421764_pgfId-1454988]##(a1.isIdentical(b2m.getA()))

[#50421764_pgfId-1431265]## 

image:Ejb-15.gif[image]

[#50421764_pgfId-1431266]##Change:

[#50421764_pgfId-1455237]##a1.getB().add(b2m);

[#50421764_pgfId-1454992]##Expected result:

[#50421764_pgfId-1454993]##(b1.contains(b11)) &&

[#50421764_pgfId-1454994]##(b1.contains(b12)) && ... &&

[#50421764_pgfId-1454995]##(b1.contains(b1n)) &&

[#50421764_pgfId-1454996]##(b1.contains(b2m)) &&

[#50421764_pgfId-1454997]##(b2.contains(b21)) &&

[#50421764_pgfId-1454998]##(b2.contains(b22)) && ... &&

[#50421764_pgfId-1454999]##(b2.contains(b2m_1)) &&

[#50421764_pgfId-1455000]##(a1.isIdentical(b11.getA())) &&

[#50421764_pgfId-1455001]##(a1.isIdentical(b12.getA())) && ... &&

[#50421764_pgfId-1455002]##(a1.isIdentical(b1n.getA())) &&

[#50421764_pgfId-1455003]##(a2.isIdentical(b21.getA())) &&

[#50421764_pgfId-1455004]##(a2.isIdentical(b22.getA())) && ... &&

[#50421764_pgfId-1455005]##(a2.isIdentical(b2m_1.getA())) &&

[#50421764_pgfId-1455006]##(a1.isIdentical(b2m.getA()))

[#50421764_pgfId-1431342]## 

image:Ejb-16.gif[image]

[#50421764_pgfId-1431343]##Change:

[#50421764_pgfId-1455010]##a1.getB().remove(b1n);

[#50421764_pgfId-1455014]##Expected result:

[#50421764_pgfId-1455015]##(b1n.getA() == null) &&

[#50421764_pgfId-1455016]##(b1 == a1.getB()) &&

[#50421764_pgfId-1455017]##(b1.contains(b11)) &&

[#50421764_pgfId-1455018]##(b1.contains(b12)) && ... &&

[#50421764_pgfId-1455019]##(b1.contains(b1n_1)) &&

[#50421764_pgfId-1455020]##!(b1.contains(b1n))

[#50421764_pgfId-1431408]## 

image:Ejb-17.gif[image]

====== [#50421764_pgfId-1431409]##One-to-many [#50421764_marker-1502911]##Unidirectional Relationships

[#50421764_pgfId-1431486]## 

image:Ejb-18.gif[image]

[#50421764_pgfId-1455024]##Before change:

[#50421764_pgfId-1455025]##Collection b1 = a1.getB();

[#50421764_pgfId-1455026]##Collection b2 = a2.getB();

[#50421764_pgfId-1455027]##B b11, b12, ... , b1n; // members of b1

[#50421764_pgfId-1455028]##B b21, b22, ... , b2m; // members of b2

[#50421764_pgfId-1431487]##Change:

[#50421764_pgfId-1431488]## _a1.setB(a2.getB());_

[#50421764_pgfId-1455032]##Expected result:

[#50421764_pgfId-1455033]##(a2.getB().isEmpty()) &&

[#50421764_pgfId-1459509]##(b2.isEmpty()) &&

[#50421764_pgfId-1455034]##(b1 == a1.getB()) &&

[#50421764_pgfId-1459563]##(b2 == a2.getB()) &&

[#50421764_pgfId-1455035]##(a1.getB().contains(b21)) &&

[#50421764_pgfId-1455036]##(a1.getB().contains(b22)) && ... &&

[#50421764_pgfId-1455037]##(a1.getB().contains(b2m))

[#50421764_pgfId-1431548]## 

image:Ejb-19.gif[image]

[#50421764_pgfId-1431549]##Change:

[#50421764_pgfId-1455041]##a1.getB().add(b2m);

[#50421764_pgfId-1455045]##Expected result:

[#50421764_pgfId-1455046]##(b1 == a1.getB()) &&

[#50421764_pgfId-1455047]##(b1.contains(b2m))

[#50421764_pgfId-1431625]## 

image:Ejb-20.gif[image]

[#50421764_pgfId-1431626]##Change:

[#50421764_pgfId-1455051]##a1.getB().remove(b1n);

[#50421764_pgfId-1455055]##Expected result:

[#50421764_pgfId-1455056]##(a1.getB().contains(b11)) &&

[#50421764_pgfId-1455057]##(a1.getB().contains(b12)) && ... &&

[#50421764_pgfId-1455058]##(a1.getB().contains(b1n_1)) &&

[#50421764_pgfId-1455059]##!(a1.getB().contains(b1n)) &&

[#50421764_pgfId-1431694]## 

image:Ejb-21.gif[image]

====== [#50421764_pgfId-1431695]##Many-to-one [#50421764_marker-1502912]##Unidirectional Relationships

[#50421764_pgfId-1431772]## 

image:Ejb-22.gif[image]

[#50421764_pgfId-1455063]##Before change:

[#50421764_pgfId-1455064]##B b11, b12, ... , b1n;

[#50421764_pgfId-1455065]##B b21, b22, ... , b2m;

[#50421764_pgfId-1455066]##// the following is true

[#50421764_pgfId-1455067]##// (a1.isIdentical(b11.getA())) && ... &&
(a1.isIdentical(b1n.getA() )) &&

[#50421764_pgfId-1455068]##// (a2.isIdentical(b21.getA())) && ... &&
(a2.isIdentical(b2m.getA() ))

[#50421764_pgfId-1431773]##Change:

[#50421764_pgfId-1455076]## _b1j.setA(b2k.getA());_

[#50421764_pgfId-1455080]##Expected result:

[#50421764_pgfId-1455081]##(a1.isIdentical(b11.getA())) &&

[#50421764_pgfId-1455082]##(a1.isIdentical(b12.getA())) &&

[#50421764_pgfId-1455083]##...

[#50421764_pgfId-1455084]##(a2.isIdentical(b1j.getA())) &&

[#50421764_pgfId-1455085]##...

[#50421764_pgfId-1455086]##(a1.isIdentical(b1n.getA())) &&

[#50421764_pgfId-1455088]##(a2.isIdentical(b21.getA())) &&

[#50421764_pgfId-1455089]##(a2.isIdentical(b22.getA())) &&

[#50421764_pgfId-1455090]##...

[#50421764_pgfId-1455091]##(a2.isIdentical(b2k.getA())) &&

[#50421764_pgfId-1455092]##...

[#50421764_pgfId-1455093]##(a2.isIdentical(b2m.getA()))

[#50421764_pgfId-1431850]## 

image:Ejb-23.gif[image]

====== [#50421764_pgfId-1431851]##Many-to-many [#50421764_marker-1502913]##Bidirectional Relationships

[#50421764_pgfId-1431921]## 

image:Ejb-24.gif[image]

[#50421764_pgfId-1455097]##Before change the following holds:

[#50421764_pgfId-1455098]##(a1.getB().contains(b1)) &&

[#50421764_pgfId-1455099]##(a1.getB().contains(b2)) &&

[#50421764_pgfId-1455100]##(a2.getB().contains(b1)) &&

[#50421764_pgfId-1455101]##(a2.getB().contains(b2)) &&

[#50421764_pgfId-1455102]##(a2.getB().contains(b3)) &&

[#50421764_pgfId-1455103]##(a3.getB().contains(b2)) &&

[#50421764_pgfId-1455104]##(a3.getB().contains(b3)) &&

[#50421764_pgfId-1455105]##(a3.getB().contains(b4)) &&

[#50421764_pgfId-1455106]##(a4.getB().contains(b3)) &&

[#50421764_pgfId-1455107]##(a4.getB().contains(b4)) &&

[#50421764_pgfId-1455108]##(a4.getB().contains(b5)) &&

[#50421764_pgfId-1455109]##(a5.getB().contains(b4)) &&

[#50421764_pgfId-1455110]##(a5.getB().contains(b5)) &&

[#50421764_pgfId-1455111]##(b1.getA().contains(a1)) &&

[#50421764_pgfId-1455112]##(b1.getA().contains(a2)) &&

[#50421764_pgfId-1455113]##(b2.getA().contains(a1)) &&

[#50421764_pgfId-1455114]##(b2.getA().contains(a2)) &&

[#50421764_pgfId-1455115]##(b2.getA().contains(a3)) &&

[#50421764_pgfId-1455116]##(b3.getA().contains(a2)) &&

[#50421764_pgfId-1455117]##(b3.getA().contains(a3)) &&

[#50421764_pgfId-1455118]##(b3.getA().contains(a4)) &&

[#50421764_pgfId-1455119]##(b4.getA().contains(a3)) &&

[#50421764_pgfId-1455120]##(b4.getA().contains(a4)) &&

[#50421764_pgfId-1455121]##(b4.getA().contains(a5)) &&

[#50421764_pgfId-1455122]##(b5.getA().contains(a4)) &&

[#50421764_pgfId-1455123]##(b5.getA().contains(a5)) &&

[#50421764_pgfId-1455124]## 

[#50421764_pgfId-1431922]##Change:

[#50421764_pgfId-1431923]## _a1.setB(a3.getB());_

[#50421764_pgfId-1455128]##Expected result:

[#50421764_pgfId-1455129]##(a1.getB().contains(b2)) &&

[#50421764_pgfId-1455130]##(a1.getB().contains(b3)) &&

[#50421764_pgfId-1455131]##(a1.getB().contains(b4)) &&

[#50421764_pgfId-1455132]##(a3.getB().contains(b2)) &&

[#50421764_pgfId-1455133]##(a3.getB().contains(b3)) &&

[#50421764_pgfId-1455134]##(a3.getB().contains(b4)) &&

[#50421764_pgfId-1455135]##(b1.getA().contains(a2)) &&

[#50421764_pgfId-1455136]##(b2.getA().contains(a1)) &&

[#50421764_pgfId-1455137]##(b2.getA().contains(a2)) &&

[#50421764_pgfId-1455138]##(b2.getA().contains(a3)) &&

[#50421764_pgfId-1455139]##(b3.getA().contains(a1)) &&

[#50421764_pgfId-1455140]##(b3.getA().contains(a2)) &&

[#50421764_pgfId-1455141]##(b3.getA().contains(a3)) &&

[#50421764_pgfId-1455142]##(b3.getA().contains(a4)) &&

[#50421764_pgfId-1455143]##(b4.getA().contains(a1)) &&

[#50421764_pgfId-1455144]##(b4.getA().contains(a3)) &&

[#50421764_pgfId-1455145]##(b4.getA().contains(a4)) &&

[#50421764_pgfId-1455146]##(b4.getA().contains(a5))

[#50421764_pgfId-1431990]## 

image:Ejb-25.gif[image]

[#50421764_pgfId-1431991]##Change:

[#50421764_pgfId-1431992]##a1.getB().add(b3);

[#50421764_pgfId-1455150]##Expected result:

[#50421764_pgfId-1455151]##(a1.getB().contains(b1)) &&

[#50421764_pgfId-1455152]##(a1.getB().contains(b2)) &&

[#50421764_pgfId-1455153]##(a1.getB().contains(b3)) &&

[#50421764_pgfId-1455154]##(b3.getA().contains(a1)) &&

[#50421764_pgfId-1455155]##(b3.getA().contains(a2)) &&

[#50421764_pgfId-1455156]##(b3.getA().contains(a3)) &&

[#50421764_pgfId-1455157]##(b3.getA().contains(a4)) &&

[#50421764_pgfId-1432057]## 

image:Ejb-26.gif[image]

[#50421764_pgfId-1432058]##Change:

[#50421764_pgfId-1432059]##a2.getB().remove(b2);

[#50421764_pgfId-1455161]##Expected result:

[#50421764_pgfId-1455162]##(a2.getB().contains(b1)) &&

[#50421764_pgfId-1455163]##(a2.getB().contains(b3)) &&

[#50421764_pgfId-1455164]##(b2.getA().contains(a1)) &&

[#50421764_pgfId-1455165]##(b2.getA().contains(a3))

[#50421764_pgfId-1432119]## 

image:Ejb-27.gif[image]

====== [#50421764_pgfId-1432120]##Many-to-many [#50421764_marker-1502914]##Unidirectional Relationships

[#50421764_pgfId-1432190]## 

image:Ejb-28.gif[image]

[#50421764_pgfId-1455169]##Before change the following holds:

[#50421764_pgfId-1455170]##(a1.getB().contains(b1)) &&

[#50421764_pgfId-1455171]##(a1.getB().contains(b2)) &&

[#50421764_pgfId-1455172]##(a2.getB().contains(b1)) &&

[#50421764_pgfId-1455173]##(a2.getB().contains(b2)) &&

[#50421764_pgfId-1455174]##(a2.getB().contains(b3)) &&

[#50421764_pgfId-1455175]##(a3.getB().contains(b2)) &&

[#50421764_pgfId-1455176]##(a3.getB().contains(b3)) &&

[#50421764_pgfId-1455177]##(a3.getB().contains(b4)) &&

[#50421764_pgfId-1455178]##(a4.getB().contains(b3)) &&

[#50421764_pgfId-1455179]##(a4.getB().contains(b4)) &&

[#50421764_pgfId-1455180]##(a4.getB().contains(b5)) &&

[#50421764_pgfId-1455181]##(a5.getB().contains(b4)) &&

[#50421764_pgfId-1455182]##(a5.getB().contains(b5)) &&

[#50421764_pgfId-1432191]##Change:

[#50421764_pgfId-1432192]## _a1.setB(a3.getB());_

[#50421764_pgfId-1455194]##Expected Result:

[#50421764_pgfId-1455195]##(a1.getB().contains(b2)) &&

[#50421764_pgfId-1455196]##(a1.getB().contains(b3)) &&

[#50421764_pgfId-1455197]##(a1.getB().contains(b4)) &&

[#50421764_pgfId-1455198]##(a3.getB().contains(b2)) &&

[#50421764_pgfId-1455199]##(a3.getB().contains(b3)) &&

[#50421764_pgfId-1455200]##(a3.getB().contains(b4)) &&

[#50421764_pgfId-1432258]## 

image:Ejb-29.gif[image]

[#50421764_pgfId-1432259]##Change:

[#50421764_pgfId-1432260]##a1.getB().add(b3);

[#50421764_pgfId-1455204]##Expected result:

[#50421764_pgfId-1455205]##(a1.getB().contains(b1)) &&

[#50421764_pgfId-1455206]##(a1.getB().contains(b2)) &&

[#50421764_pgfId-1455207]##(a1.getB().contains(b3))

[#50421764_pgfId-1432321]## 

image:Ejb-30.gif[image]

[#50421764_pgfId-1432322]##Change:

[#50421764_pgfId-1432323]##a2.getB().remove(b2);

[#50421764_pgfId-1455211]##[#50421764_marker-1432324]##Expected result:

[#50421764_pgfId-1455212]##(a2.getB().contains(b1)) &&

[#50421764_pgfId-1455213]##(a2.getB().contains(b3))

[#50421764_pgfId-1432380]## 

image:Ejb-31.gif[image]

====== [#50421764_pgfId-1432381]##Collections Managed by the Container

[#50421764_pgfId-1432383]##[#50421764_marker-1432382]##The collections
that are used in the representation of one-to-many and many-to-many
container-managed relationships are implemented and managed by the
container. The following semantics apply to these collections:

[#50421764_pgfId-1432384]##It is the responsibility of the container to
preserve the runtime identity of the collection objects used in
container-managed relationships.

[#50421764_pgfId-1438535]##There is no constructor available to the Bean
Provider for the container-managed collections.

[#50421764_pgfId-1432385]##If there are no related values for a given
container-managed relationship, the get accessor method for that
cmr-field returns an empty collection (and not _null_ ).

[#50421764_pgfId-1432386]##It is the responsibility of the container to
raise the _java.lang.IllegalArgumentException_
[#50421764_marker-1502916]## if the Bean Provider attempts to assign
_null_ as the value of a collection-valued cmr-field by means of the set
accessor method.

[#50421764_pgfId-1459589]##It is the responsibility of the container to
ensure that when the _java.util.Collection_ [#50421764_marker-1502915]##
API is used to manipulate the contents of container-managed relationship
fields, the argument to any Collection method defined with a single
Object parameter must be of the element type of the collection defined
for the target cmr-field. The argument for any collection-valued
parameter must be a _java.util.Collection_ (or _java.util.Set_ ), all of
whose elements are of the element type of the collection defined for the
target cmr-field. If an argument is not of the correct type for the
relationship, the container must throw the
_java.lang.IllegalArgumentException_ .

[#50421764_pgfId-1471661]##It is the responsibility of the container to
throw the _java.lang.IllegalStateException_ [#50421764_marker-1502917]##
if an attempt is made to modify a container-managed collection
corresponding to a multivalued cmr-field using the
_java.util.Collection_ API outside of the transaction context in which
the collection object was initially materialized.

[#50421764_pgfId-1479573]##It is the responsibility of the container to
throw the _java.lang.IllegalStateException_ if an attempt is made to use
a _java.util.Iterator_ [#50421764_marker-1502918]## for a
container-managed collection in a transaction context other than that in
which the iterator was obtained.

====== [#50421764_pgfId-1432398]##Non-persistent State

[#50421764_pgfId-1432400]##[#50421764_marker-1432399]##The Bean Provider
may use [#50421764_marker-1502919]##instance variables in the entity
bean instance to maintain non-persistent state, e.g. a JMS connection.

[#50421764_pgfId-1432401]##The Bean Provider can use instance variables
to store values that depend on the persistent state of the entity bean
instance, although this use is not encouraged. The Bean Provider should
use the [#50421764_marker-1502920]##ejbLoad method to resynchronize the
values of any instance variables that depend on the entity bean’s
persistent state. In general, any non-persistent state that depends on
the persistent state of an entity bean should be recomputed during the
ejbLoad method.

[#50421764_pgfId-1471670]##The Bean Provider should exercise care in
passing the contents of instance variables as the arguments or results
of method invocations when local interfaces are used. In general, the
Bean Provider should avoid passing state that is maintained in instance
variables as the argument or result of a local method invocation.

====== [#50421764_pgfId-1432403]##[#50421764_81386]##The Relationship Between the Internal View and the Client View

[#50421764_pgfId-1432405]##[#50421764_marker-1432404]##In designing the
entity bean, the Bean Provider should keep in mind the following:

[#50421764_pgfId-1432406]##The classes that are exposed by the
[#50421764_marker-1502921]##remote interface are decoupled from the
persistence layer. Instances of these classes are passed to and from the
client by value.

[#50421764_pgfId-1471675]##The classes that are exposed by the
[#50421764_marker-1502922]##local interface of the bean may be tightly
coupled to the bean’s internal state. Instances of these classes are
passed to and from the client by reference and may therefore be modified
by the client. The Bean Provider should exercise care in determining
what is exposed through the local interface of the bean.

====== [#50421764_pgfId-1432410]##Restrictions on Remote Interfaces

[#50421764_pgfId-1467761]##The following restrictions apply to the
remote interface of an entity bean with container-managed persistence.

[#50421764_pgfId-1466178]##The Bean Provider must not expose the get and
set methods for container-managed relationship fields or the persistent
_Collection_ classes that are used in container-managed relationships
through the [#50421764_marker-1502925]##remote interface of the bean.

[#50421764_pgfId-1467781]##The Bean Provider must not expose local
interface types or local home interface types through the remote
interface or remote home interface of the bean.

[#50421764_pgfId-1475928]##The Bean Provider must not expose the
container-managed collection classes that are used for relationships
through the remote interface of the bean.

[#50421764_pgfId-1555307]##The Bean Provider must not expose timers or
timer handles through the remote interface of the bean.

[#50421764_pgfId-1432414]##Dependent value classes can be exposed in the
remote interface or remote home interface and can be included in the
client ejb-jar file.

[#50421764_pgfId-1432415]##The Bean Provider is free to expose get and
set methods that correspond to cmp-fields of the entity bean through the
bean’s remote interface.

====== [#50421764_pgfId-1432418]##Mapping Data to a Persistent Store

[#50421764_pgfId-1432420]##[#50421764_marker-1432419]##This
specification does not prescribe how the abstract persistence schema of
an entity bean should be mapped to a relational (or other) schema of a
persistent store, or define how such a mapping is described.

====== [#50421764_pgfId-1432428]##[#50421764_95097]##Example

[#50421764_pgfId-1432432]##link:Ejb.htm#50421764_70731[See Relationship
Example] illustrates an _Order_ entity bean with relationships to line
items and customers, which are other entity beans within the same local
scope. _Product_ is indirectly related to _Order_ by means of the
relationship between _LineItem_ and _Product_ . Sample code for the
_OrderBean_ class follows the figure.

======= [#50421764_pgfId-1432484]##

image:Ejb-5.gif[image]

[#50421764_70731]##Relationship Example

image:Ejb-32.gif[image]

[#50421764_pgfId-1479796]## 

[#50421764_pgfId-1480049]## 

[#50421764_pgfId-1480934]##package com.acme.order;

[#50421764_pgfId-1480936]## 

[#50421764_pgfId-1480937]##// This example shows the implementation of
OrderBean, the

[#50421764_pgfId-1480938]##// entity bean class for the OrderEJB entity
bean. OrderEJB has

[#50421764_pgfId-1480939]##// container-managed relationships with the
entity beans

[#50421764_pgfId-1480940]##// CustomerEJB and LineItemEJB.

[#50421764_pgfId-1480941]##// This example illustrates the use of local
interfaces.

[#50421764_pgfId-1480942]## 

[#50421764_pgfId-1480943]##import java.util.Collection;

[#50421764_pgfId-1480944]##import java.util.Vector;

[#50421764_pgfId-1480945]##import java.util.Date;

[#50421764_pgfId-1480946]## 

[#50421764_pgfId-1480947]##import javax.naming.*;

[#50421764_pgfId-1480948]## 

[#50421764_pgfId-1480949]##public abstract class OrderBean implements
javax.ejb.EntityBean \{

[#50421764_pgfId-1480950]## 

[#50421764_pgfId-1480951]## private javax.ejb.EntityContext context;

[#50421764_pgfId-1480952]## 

[#50421764_pgfId-1480953]## // define status codes for processing

[#50421764_pgfId-1480954]## 

[#50421764_pgfId-1480955]## static final int BACKORDER = 1;

[#50421764_pgfId-1480956]## static final int SHIPPED = 2;

[#50421764_pgfId-1480957]## static final int UNSHIPPED = 3;

[#50421764_pgfId-1480958]## 

[#50421764_pgfId-1480959]## // get and set methods for the cmp fields

[#50421764_pgfId-1480960]## 

[#50421764_pgfId-1480961]## public abstract int getOrderStatus();

[#50421764_pgfId-1480962]## public abstract void setOrderStatus(int
orderStatus);

[#50421764_pgfId-1480963]## 

[#50421764_pgfId-1480964]## public abstract boolean getCreditApproved();

[#50421764_pgfId-1480965]## public abstract void
setCreditApproved(boolean creditapproved);

[#50421764_pgfId-1480966]## 

[#50421764_pgfId-1480967]## public abstract Date getOrderDate();

[#50421764_pgfId-1480968]## public abstract void setOrderDate(Date
orderDate);

[#50421764_pgfId-1480969]## 

[#50421764_pgfId-1480970]## // get and set methods for the relationship
fields

[#50421764_pgfId-1480971]## 

[#50421764_pgfId-1480972]## public abstract Collection getLineItems();

[#50421764_pgfId-1480973]## public abstract void setLineItems(Collection
lineitems);

[#50421764_pgfId-1480974]## 

[#50421764_pgfId-1480975]## public abstract Customer getCustomer();

[#50421764_pgfId-1480976]## public abstract void setCustomer(Customer
customer);

[#50421764_pgfId-1480977]## 

[#50421764_pgfId-1480978]## // business methods.

[#50421764_pgfId-1480979]## 

[#50421764_pgfId-1480980]##  

[#50421764_pgfId-1480981]## // addLineItem:

[#50421764_pgfId-1480982]## // This method is used to add a line item.

[#50421764_pgfId-1480983]## // It creates the lineitem object and adds
it to the

[#50421764_pgfId-1480984]## // persistent managed relationship.

[#50421764_pgfId-1480985]## 

[#50421764_pgfId-1480986]## public void addLineItem(Product product,

[#50421764_pgfId-1480987]## int quantity,

[#50421764_pgfId-1480988]## Address address)

[#50421764_pgfId-1480989]## throws InsufficientInfoException

[#50421764_pgfId-1480990]## \{

[#50421764_pgfId-1480991]## // create a new line item

[#50421764_pgfId-1480992]## if (validAddress(address)) \{

[#50421764_pgfId-1480993]## // Address is a legacy class. It is a
dependent value

[#50421764_pgfId-1480994]## // class that is available both in the
client and in

[#50421764_pgfId-1480995]## // the entity bean, and is serializable.

[#50421764_pgfId-1480996]## // We will use the address as the value of a
cmp field

[#50421764_pgfId-1480997]## // of lineItem.

[#50421764_pgfId-1480998]## 

[#50421764_pgfId-1480999]## try \{

[#50421764_pgfId-1481000]## Context ic = new InitialContext();

[#50421764_pgfId-1481001]## LineItemLocalHome litemLocalHome =

[#50421764_pgfId-1481002]## (LineItemLocalHome)ic.lookup("LineItemEJB");

[#50421764_pgfId-1481003]## LineItem litem = litemLocalHome.create();

[#50421764_pgfId-1481004]## 

[#50421764_pgfId-1481005]## litem.setProduct(product);

[#50421764_pgfId-1481006]## litem.setQuantity(quantity);

[#50421764_pgfId-1481007]##
litem.setTax(calculateTax(product.getPrice(),

[#50421764_pgfId-1481008]## quantity,

[#50421764_pgfId-1481009]## address));

[#50421764_pgfId-1481010]## litem.setStatus(UNSHIPPED);

[#50421764_pgfId-1481011]## // set the address for the line item to be
shipped

[#50421764_pgfId-1481012]## litem.setAddress(address);

[#50421764_pgfId-1481013]## // The lineItem entity bean uses a dependent
value

[#50421764_pgfId-1481014]## // class to represent the dates for the
order status.

[#50421764_pgfId-1484945]## // This class holds shipment date, expected
shipment

[#50421764_pgfId-1484947]## // date, credit approval date, and inventory

[#50421764_pgfId-1481018]## // dates which are internal to the order
fullfillment

[#50421764_pgfId-1481019]## // process. Not all this information will be
available

[#50421764_pgfId-1481020]## // to the client.

[#50421764_pgfId-1481021]##

[#50421764_pgfId-1481022]## Dates dates = new Dates();

[#50421764_pgfId-1481023]## litem.setDates(dates);

[#50421764_pgfId-1481024]## getLineItems().add(litem);

[#50421764_pgfId-1481025]## } catch (Exception someexception) \{}

[#50421764_pgfId-1481026]## } else \{

[#50421764_pgfId-1481027]## throw new InsufficientInfoException();

[#50421764_pgfId-1481028]## }

[#50421764_pgfId-1481029]## }

[#50421764_pgfId-1481030]## 

[#50421764_pgfId-1481031]## 

[#50421764_pgfId-1481032]## // getOrderLineItems:

[#50421764_pgfId-1481033]## // This method makes a view of the lineitems
that are in this

[#50421764_pgfId-1481034]## // order available in the client. It makes
only the relevant

[#50421764_pgfId-1481035]## // information visible to the client and
hides the internal

[#50421764_pgfId-1481036]## // details of the representation of the
lineitem

[#50421764_pgfId-1481037]## public Collection getOrderLineItems() \{

[#50421764_pgfId-1481038]## Vector clientlineitems = new Vector();

[#50421764_pgfId-1481039]## Collection lineitems = getLineItems();

[#50421764_pgfId-1481040]## java.util.Iterator iterator =
lineitems.iterator();

[#50421764_pgfId-1481041]## // ClientLineItem is a value class that is
used in

[#50421764_pgfId-1481042]## // the client view.

[#50421764_pgfId-1481043]## // The entity Bean Provider abstracts from
the persistent

[#50421764_pgfId-1481044]## // representation of the line item to
construct the client

[#50421764_pgfId-1481045]## // view.

[#50421764_pgfId-1481046]## ClientLineItem clitem;

[#50421764_pgfId-1481047]## while (iterator.hasNext()) \{

[#50421764_pgfId-1481048]## LineItem litem = (LineItem)iterator.next();

[#50421764_pgfId-1481049]## clitem = new ClientLineItem();

[#50421764_pgfId-1481050]## // only the name of the product is available
in the

[#50421764_pgfId-1481051]## // client view

[#50421764_pgfId-1481052]##
clitem.setProductName(litem.getProduct().getName());

[#50421764_pgfId-1481053]## clitem.setQuantity(litem.getQuantity());

[#50421764_pgfId-1481054]## // the client view gets a specific
descriptive message

[#50421764_pgfId-1481055]## // depending on the line item status.

[#50421764_pgfId-1481056]## clitem.setCurrentStatus(

[#50421764_pgfId-1481057]## statusCodeToString(litem.getStatus()));

[#50421764_pgfId-1481058]## // address is not copied to the client view.

[#50421764_pgfId-1481059]## // as this class includes other information
with

[#50421764_pgfId-1481060]## // respect to the order handing that should
not be

[#50421764_pgfId-1481061]## // available to the client. Only the
relevant info

[#50421764_pgfId-1481062]## // is copied.

[#50421764_pgfId-1481063]## int lineitemStatus = litem.getStatus();

[#50421764_pgfId-1481064]## if ( lineitemStatus == BACKORDER) \{

[#50421764_pgfId-1481065]## clitem.setShipDate(

[#50421764_pgfId-1481066]## litem.getDates().getExpectedShipDate());

[#50421764_pgfId-1481067]## } else if (lineitemStatus == SHIPPED) \{

[#50421764_pgfId-1481068]## clitem.setShipDate(

[#50421764_pgfId-1481069]## litem.getDates().getShippedDate());

[#50421764_pgfId-1481070]## }

[#50421764_pgfId-1481071]## //add the new line item

[#50421764_pgfId-1481072]## clientlineitems.add(clitem);

[#50421764_pgfId-1481073]## }

[#50421764_pgfId-1481074]## // return the value objects to the client

[#50421764_pgfId-1481075]## return clientlineitems;

[#50421764_pgfId-1481076]## }

[#50421764_pgfId-1481077]## 

[#50421764_pgfId-1481079]## // other methods internal to the entity bean
class

[#50421764_pgfId-1481095]## ...

[#50421764_pgfId-1481097]## 

[#50421764_pgfId-1481098]## // other javax.ejb.EntityBean methods

[#50421764_pgfId-1487768]## ...

[#50421764_pgfId-1481099]##}

[#50421764_pgfId-1481100]## 

====== [#50421764_pgfId-1480040]##[#50421764_59958]##The Bean Provider’s View of the Deployment Descriptor

[#50421764_pgfId-1484981]##The persistent fields (cmp-fields) and
relationships (cmr-fields) of an entity bean must be declared in the
deployment descriptor.

[#50421764_pgfId-1432680]##The deployment descriptor provides the
following information about the abstract persistence schemas of entity
beans and their [#50421764_marker-1502928]##container-managed
relationships:

[#50421764_pgfId-1432684]##An _ejb-name_ element for each entity bean.
The _ejb-name_ must be a valid Java identifier and must be unique within
the _ejb-name_ elements of the ejb-jar file.

[#50421764_pgfId-1481686]##An _abstract-schema-name_ element for each
entity bean. The _abstract-schema-name_ must be a valid Java identifier
and must be unique within the _abstract-schema-name_ elements of the
ejb-jar file. The _abstract-schema-name_ element is used in the
specification of EJB QL queries.

{empty}[#50421764_pgfId-1461249]##A set of _ejb-relation_ elements, each
of which contains a pair of _ejb-relationship-role_ elements to describe
the two roles in the relationship.link:#pgfId-1461252[5]

[#50421764_pgfId-1461253]##Each _ejb-relationship-role_ element
describes a relationship role: its name, its multiplicity within a
relation, and its navigability. It specifies the name of the _cmr-field_
that is used from the perspective of the relationship participant. The
_cmr-field-type_ element must be specified if the type of the cmr-field
is _java.util.Collection_ or _java.util.Set_ . Each relationship role
refers to an entity bean by means of an ejb-name element contained in
the _relationship-role-source_ element.

[#50421764_pgfId-1461254]##The following example shows a deployment
descriptor segment that defines the abstract persistence schema for a
set of related entity beans. The deployment descriptor elements for
container-managed persistence and relationships are described further in
Chapter link:Ejb.htm#50421764_84706[See Deployment Descriptor].

[#50421764_pgfId-1432699]##<ejb-jar>

[#50421764_pgfId-1432700]## 

[#50421764_pgfId-1432701]##...

[#50421764_pgfId-1432702]## 

[#50421764_pgfId-1432703]##<enterprise-beans>

[#50421764_pgfId-1432704]##...

[#50421764_pgfId-1432705]##</enterprise-beans>

[#50421764_pgfId-1432706]## 

[#50421764_pgfId-1432732]##<relationships>

[#50421764_pgfId-1432749]## 

[#50421764_pgfId-1432750]##<!--

[#50421764_pgfId-1432751]##ONE-TO-MANY: Order LineItem

[#50421764_pgfId-1432752]##-->

[#50421764_pgfId-1432753]## 

[#50421764_pgfId-1432754]## <ejb-relation>

[#50421764_pgfId-1432755]##
<ejb-relation-name>Order-LineItem</ejb-relation-name>

[#50421764_pgfId-1432757]## <ejb-relationship-role>

[#50421764_pgfId-1432758]## <ejb-relationship-role-name>

[#50421764_pgfId-1432759]## order-has-lineitems

[#50421764_pgfId-1432760]## </ejb-relationship-role-name>

[#50421764_pgfId-1432761]## <multiplicity>One</multiplicity>

[#50421764_pgfId-1432762]## <relationship-role-source>

[#50421764_pgfId-1432763]## <ejb-name>OrderEJB</ejb-name>

[#50421764_pgfId-1432764]## </relationship-role-source>

[#50421764_pgfId-1432765]## <cmr-field>

[#50421764_pgfId-1432766]## <cmr-field-name>lineItems</cmr-field-name>

[#50421764_pgfId-1432767]## <cmr-field-type>java.util.Collection

[#50421764_pgfId-1432768]## </cmr-field-type>

[#50421764_pgfId-1432769]## </cmr-field>

[#50421764_pgfId-1432770]## </ejb-relationship-role>

[#50421764_pgfId-1432771]##

[#50421764_pgfId-1432772]## <ejb-relationship-role>

[#50421764_pgfId-1432773]##
<ejb-relationship-role-name>lineitem-belongsto-order

[#50421764_pgfId-1432774]## </ejb-relationship-role-name>

[#50421764_pgfId-1432775]## <multiplicity>Many</multiplicity>

[#50421764_pgfId-1432776]## <cascade-delete/>

[#50421764_pgfId-1432777]## <relationship-role-source>

[#50421764_pgfId-1432778]## <ejb-name>LineItemEJB</ejb-name>

[#50421764_pgfId-1432779]## </relationship-role-source>

[#50421764_pgfId-1432780]## <cmr-field>

[#50421764_pgfId-1432781]## <cmr-field-name>order</cmr-field-name>

[#50421764_pgfId-1432782]## </cmr-field>

[#50421764_pgfId-1432783]## </ejb-relationship-role>

[#50421764_pgfId-1432785]## </ejb-relation>

[#50421764_pgfId-1432786]## 

[#50421764_pgfId-1432787]##<!--

[#50421764_pgfId-1432788]##ONE-TO-MANY unidirectional relationship:

[#50421764_pgfId-1432790]##Product is not aware of its relationship with
LineItem

[#50421764_pgfId-1432791]##-->

[#50421764_pgfId-1432792]## 

[#50421764_pgfId-1432793]## <ejb-relation>

[#50421764_pgfId-1432794]##
<ejb-relation-name>Product-LineItem</ejb-relation-name>

[#50421764_pgfId-1432795]## 

[#50421764_pgfId-1432796]## <ejb-relationship-role>

[#50421764_pgfId-1432797]## <ejb-relationship-role-name>

[#50421764_pgfId-1432798]## product-has-lineitems

[#50421764_pgfId-1432799]## </ejb-relationship-role-name>

[#50421764_pgfId-1432800]## <multiplicity>One</multiplicity>

[#50421764_pgfId-1432801]## <relationship-role-source>

[#50421764_pgfId-1432802]## <ejb-name>ProductEJB</ejb-name>

[#50421764_pgfId-1432804]## </relationship-role-source>

[#50421764_pgfId-1432805]## <!-- since Product does not know about
LineItem

[#50421764_pgfId-1432806]## there is no cmr field in Product for
accessing

[#50421764_pgfId-1432807]## Lineitem

[#50421764_pgfId-1432808]## -->

[#50421764_pgfId-1432809]## </ejb-relationship-role>

[#50421764_pgfId-1432810]## 

[#50421764_pgfId-1432811]## <ejb-relationship-role>

[#50421764_pgfId-1432812]## <ejb-relationship-role-name>

[#50421764_pgfId-1432813]## lineitem-for-product

[#50421764_pgfId-1432814]## </ejb-relationship-role-name>

[#50421764_pgfId-1432815]## <multiplicity>Many</multiplicity>

[#50421764_pgfId-1432816]## <relationship-role-source>

[#50421764_pgfId-1432817]## <ejb-name>LineItemEJB</ejb-name>

[#50421764_pgfId-1432819]## </relationship-role-source>

[#50421764_pgfId-1432820]## <cmr-field>

[#50421764_pgfId-1432821]## <cmr-field-name>product</cmr-field-name>

[#50421764_pgfId-1432822]## </cmr-field>

[#50421764_pgfId-1432823]## </ejb-relationship-role>

[#50421764_pgfId-1432824]## 

[#50421764_pgfId-1432825]## </ejb-relation>

[#50421764_pgfId-1432826]## 

[#50421764_pgfId-1432827]## 

[#50421764_pgfId-1432828]##<!--

[#50421764_pgfId-1432829]##ONE-TO-MANY: Order Customer:

[#50421764_pgfId-1432830]##-->

[#50421764_pgfId-1432831]## 

[#50421764_pgfId-1432832]## <ejb-relation>

[#50421764_pgfId-1432833]##
<ejb-relation-name>Order-Customer</ejb-relation-name>

[#50421764_pgfId-1432834]##

[#50421764_pgfId-1432835]## <ejb-relationship-role>

[#50421764_pgfId-1432836]## <ejb-relationship-role-name>

[#50421764_pgfId-1432837]## customer-has-orders

[#50421764_pgfId-1432838]## </ejb-relationship-role-name>

[#50421764_pgfId-1432839]## <multiplicity>One</multiplicity>

[#50421764_pgfId-1432840]## <relationship-role-source>

[#50421764_pgfId-1432841]## <ejb-name>CustomerEJB</ejb-name>

[#50421764_pgfId-1432843]## </relationship-role-source>

[#50421764_pgfId-1432844]## <cmr-field>

[#50421764_pgfId-1432845]## <cmr-field-name>orders</cmr-field-name>

[#50421764_pgfId-1432846]## <cmr-field-type>java.util.Collection

[#50421764_pgfId-1432847]## </cmr-field-type>

[#50421764_pgfId-1432848]## </cmr-field>

[#50421764_pgfId-1432849]## </ejb-relationship-role>

[#50421764_pgfId-1432850]##

[#50421764_pgfId-1432851]## <ejb-relationship-role>

[#50421764_pgfId-1432852]## <ejb-relationship-role-name>

[#50421764_pgfId-1432853]## order-belongsto-customer

[#50421764_pgfId-1432854]## </ejb-relationship-role-name>

[#50421764_pgfId-1432855]## <multiplicity>Many</multiplicity>

[#50421764_pgfId-1432856]## <relationship-role-source>

[#50421764_pgfId-1432857]## <ejb-name>OrderEJB</ejb-name>

[#50421764_pgfId-1432859]## </relationship-role-source>

[#50421764_pgfId-1432860]## <cmr-field>

[#50421764_pgfId-1432861]## <cmr-field-name>customer</cmr-field-name>

[#50421764_pgfId-1432862]## </cmr-field>

[#50421764_pgfId-1432863]## </ejb-relationship-role>

[#50421764_pgfId-1432864]## 

[#50421764_pgfId-1432865]## </ejb-relation>

[#50421764_pgfId-1432866]## 

[#50421764_pgfId-1432867]## 

[#50421764_pgfId-1432902]## 

[#50421764_pgfId-1432903]##</relationships>

[#50421764_pgfId-1432904]## 

[#50421764_pgfId-1432905]##...

[#50421764_pgfId-1432906]## 

[#50421764_pgfId-1432907]##</ejb-jar>

==== [#50421764_pgfId-1432908]##The Entity Bean Component Contract

image:Ejb-4.gif[image]

[#50421764_pgfId-1432909]##This section specifies the container-managed
persistence contract between an entity bean and its container.

====== [#50421764_pgfId-1432910]##Runtime Execution Model of Entity Beans

[#50421764_pgfId-1432912]##[#50421764_marker-1432911]##This subsection
describes the [#50421764_marker-1502929]##runtime model and the classes
used in the description of the contract between an entity bean and its
container. link:Ejb.htm#50421764_18879[See Overview of the Entity Bean
Runtime Execution Model] shows an overview of the runtime model. The
client of an entity bean may be a local client or it may be a remote
client.

======= [#50421764_pgfId-1432997]##

image:Ejb-5.gif[image]

[#50421764_18879]##Overview of the Entity Bean Runtime Execution Model

image:Ejb-33.gif[image]

[#50421764_pgfId-1432998]##An enterprise bean is an object whose class
is provided by the Bean Provider. The class of an entity bean with
container-managed persistence is abstract. The concrete bean class is
generated by the Container Provider’s tools at deployment time. The
container is also responsible for providing the implementation of the
_java.util.Collection_ classes that are used in maintaining the
container-managed relationships of the entity bean.

[#50421764_pgfId-1470042]##An entity _EJBObject_
[#50421764_marker-1502931]## or
[#50421764_marker-1502932]##EJBLocalObject is an object whose class was
generated at deployment time by the Container Provider’s tools. A client
never references an entity bean instance directly—a client always
references an entity EJBObject or EJBLocalObject whose class is
generated by the Container Provider’s tools. The entity EJBObject class
implements an entity bean’s remote interface. The entity EJBLocalObject
class implements an entity bean’s local interface. A related entity bean
never references another entity bean instance directly—a related entity
bean, like any other local client of an entity bean, always references
an entity EJBLocalObject whose class is generated by the Container
Provider’s tools.

[#50421764_pgfId-1470043]##An entity _EJBHome_
[#50421764_marker-1502933]## or [#50421764_marker-1502934]##EJBLocalHome
object provides [#50421764_marker-1502930]##life cycle operations
(create, find, remove) for its entity objects as well as home business
methods, which are business methods that are not specific to an entity
bean instance. The class for the entity EJBHome or EJBLocalHome object
is generated by the Container Provider’s tools at deployment time. The
entity EJBHome or EJBLocalHome object implements the entity bean’s
remote or local home interface that was defined by the Bean Provider.

====== [#50421764_pgfId-1433127]##Container Responsibilities

[#50421764_pgfId-1576417]##The following are the container
responsibilities for the management of persistent state.

====== [#50421764_pgfId-1433128]##Container-Managed Fields

[#50421764_pgfId-1433130]##An entity bean with container-managed
persistence relies on the container to perform
[#50421764_marker-1502935]##persistent data access on behalf of the
entity bean instances. The container transfers data between an entity
bean instance and the underlying resource manager. The container also
implements the creation, removal, and lookup of the entity object in the
underlying database.

[#50421764_pgfId-1466429]##[#50421764_marker-1466428]##The container
transfers data between the entity bean and the underlying data source as
a result of the execution of the entity bean’s methods. Because of the
requirement that all data access occur through the
[#50421764_marker-1502936]##accessor methods, the container can
implement both [#50421764_marker-1502938]##eager and
[#50421764_marker-1502937]##lazy loading and storing schemes.

[#50421764_pgfId-1433131]##The container is responsible for implementing
the entity bean class by providing the implementation of the get and set
accessor methods for its abstract persistence schema. The container is
allowed to use Java serialization to store the container-managed
persistent fields (cmp-fields).

[#50421764_pgfId-1466449]##The container must also manage the mapping
between [#50421764_marker-1502939]##primary keys and EJBLocalObjects or
EJBObjects. If both a remote and a local interface are specified for the
entity bean, the container must manage the mapping between EJBObjects
and EJBLocalObjects.

[#50421764_pgfId-1486614]##Because the container is free to optimize the
delivery of persistent data to the bean instance (for example, by the
use of lazy loading strategies), the contents of the entity bean
instance and the contents of container-managed collections may not be
fully materialized.

====== [#50421764_pgfId-1433137]##Container-Managed Relationships

[#50421764_pgfId-1433139]##[#50421764_marker-1433138]##The container
maintains the relationships among entity beans.

[#50421764_pgfId-1466461]##It is the responsibility of the container to
maintain the [#50421764_marker-1502940]##referential integrity of the
container-managed relationships, as described in
link:Ejb.htm#50421764_78397[See Semantics of Assignment for
Relationships], in accordance with the semantics of the relationship
type as specified in the deployment descriptor. For example, if an
entity bean is added to a collection corresponding to the
container-managed relationship field of another entity bean, the
container-managed relationship field of the first entity bean must also
be updated by the container in the same transaction context.

[#50421764_pgfId-1433142]##It is the responsibility of the container to
throw the _java.lang.IllegalArgumentException_
[#50421764_marker-1502943]## when the argument to a set method in a
relationship is an instance of the wrong relationship type or a
collection containing instances of the wrong type, or when an argument
to a method of the _java.util.Collection_ [#50421764_marker-1502941]##
API used to manipulate a collection-valued container-managed
relationship field is an instance of the wrong type or a collection that
contains instances of the wrong type (see Section
link:Ejb.htm#50421764_78397[See Semantics of Assignment for
Relationships]).

[#50421764_pgfId-1471741]##It is the responsibility of the container to
throw the _java.lang.IllegalStateException_ [#50421764_marker-1502944]##
when a method of the _java.util.Collection_ API is used to access a
collection-valued cmr-field within a transaction context other than the
transaction context in which the cmr-field was initially materialized.
For example, if the container-managed collection is returned as the
result of a local interface method with transaction attribute
_RequiresNew_ , and the client attempts to access the collection, the
container must throw the _IllegalStateException_ .

[#50421764_pgfId-1479748]##It is the responsibility of the container to
throw the _java.lang.IllegalStateException_ when a _java.util.Iterator_
[#50421764_marker-1502942]## is used to access a collection-valued
cmr-field within a transaction context other than the transaction
context in which the iterator was initially obtained.

==== [#50421764_pgfId-1433153]##[#50421764_24060]##Instance Life Cycle Contract Between the Bean and the Container

image:Ejb-4.gif[image]

[#50421764_pgfId-1433155]##[#50421764_marker-1433154]##This section
describes the part of the component contract between the entity bean and
the container that relates to the management of the entity bean
instance’s life cycle.

====== [#50421764_pgfId-1433157]##[#50421764_87364]##Instance Life Cycle

======= [#50421764_pgfId-1433219]##

image:Ejb-5.gif[image]

[#50421764_92004]##Life Cycle of an Entity Bean Instance.

image:Ejb-34.gif[image]

[#50421764_pgfId-1433221]##[#50421764_marker-1433220]##An entity bean
instance is in one of the following three states:

[#50421764_pgfId-1433222]##It does not exist.

[#50421764_pgfId-1433223]##Pooled state. An instance in the pooled state
is not associated with any particular entity object identity.

[#50421764_pgfId-1433224]##Ready state. An instance in the ready state
is assigned an entity object identity.

[#50421764_pgfId-1433226]##[#50421764_marker-1433225]##The following
steps describe the life cycle of an entity bean instance:

[#50421764_pgfId-1433227]##An entity bean instance’s life starts when
the container creates the instance using newInstance. The container then
invokes the setEntityContext method to pass the instance a reference to
the EntityContext interface. The EntityContext interface allows the
instance to invoke services provided by the container and to obtain the
information about the caller of a client-invoked method.

[#50421764_pgfId-1433228]##The instance enters the pool of available
instances. Each entity bean has its own pool. While the instance is in
the available pool, the instance is not associated with any particular
entity object identity. All instances in the pool are considered
equivalent, and therefore any instance can be assigned by the container
to any entity object identity at the transition to the ready state.
While the instance is in the pooled state, the container may use the
instance to execute any of the entity bean’s finder methods (shown as
_ejbFind<METHOD>_ in the diagram) or any of the entity bean’s home
methods (shown ejbHome<METHOD> in the diagram). The instance does _not_
move to the ready state during the execution of a finder or a home
method. An _ejbSelect<METHOD>_ method may be called by an entity bean’s
home method while the instance is in the pooled state.

[#50421764_pgfId-1433229]##An instance transitions from the
[#50421764_marker-1502945]##pooled state to the
[#50421764_marker-1502946]##ready state when the container selects that
instance to service a client call to an entity object or an _ejbTimeout_
method. There are two possible transitions from the pooled to the ready
state: through the _ejbCreate<METHOD>_ and _ejbPostCreate<METHOD>_
methods, or through the _ejbActivate_ method. The container invokes the
_ejbCreate<METHOD>_ and _ejbPostCreate<METHOD>_ methods when the
instance is assigned to an entity object during entity object creation
(i.e., when the client invokes a create method on the entity bean’s home
object). The container invokes the _ejbActivate_ method on an instance
when an instance needs to be activated to service an invocation on an
existing entity object—this occurs because there is no suitable instance
in the ready state to service the client’s call or the _ejbTimeout_
method.

[#50421764_pgfId-1433230]##When an entity bean instance is in the ready
state, the instance is associated with a specific entity object
identity. While the instance is in the ready state, the container can
synchronize the state of the instance with the state of the entity in
the underlying data source whenever it determines the need to, in the
process invoking the _ejbLoad_ and _ejbStore_ methods zero or more
times. A business method can be invoked on the instance zero or more
times. The _ejbTimeout_ method can be invoked on the instance zero or
more times. Invocations of the _ejbLoad_ and _ejbStore_ methods can be
arbitrarily mixed with invocations of business methods and _ejbTimeout_
method invocations. An _ejbSelect<METHOD>_ method can be called by a
business method (or _ejbLoad_ or _ejbStore_ method or _ejbTimeout_
method ) while the instance is in the ready state.

[#50421764_pgfId-1433231]##The container can choose to
[#50421764_marker-1502947]##passivate an entity bean instance within a
transaction. To passivate an instance, the container first invokes the
ejbStore method to allow the instance to prepare itself for the
synchronization of the database state with the instance’s state, and
then the container invokes the [#50421764_marker-1502948]##ejbPassivate
method to return the instance to the pooled state.

[#50421764_pgfId-1433232]##Eventually, the container will transition the
instance to the [#50421764_marker-1502949]##pooled state. There are
three possible transitions from the ready to the pooled state: through
the _ejbPassivate_ method, through the _ejbRemove_ method, and because
of a transaction rollback for _ejbCreate_ , _ejbPostCreate_ , or
_ejbRemove_ (not shown in link:Ejb.htm#50421764_92004[See Life Cycle of
an Entity Bean Instance.]). The container invokes the _ejbPassivate_
method when the container wants to disassociate the instance from the
entity object identity without removing the entity object. The container
invokes the _ejbRemove_ method when the container is removing the entity
object (i.e., when the client invoked the _remove_ method on the entity
object’s component interface or a _remove_ method on the entity bean’s
home interface). If _ejbCreate_ , _ejbPostCreate_ , or _ejbRemove_ is
called and the transaction rolls back, the container will transition the
bean instance to the pooled state.

[#50421764_pgfId-1433236]##When the instance is put back into the pool,
it is no longer associated with an entity object identity. The container
can assign the instance to any entity object within the same entity bean
home.

[#50421764_pgfId-1433237]##The container can remove an instance in the
pool by calling the _unsetEntityContext_ [#50421764_marker-1502950]##
method on the instance.

[#50421764_pgfId-1433238]##Notes:

[#50421764_pgfId-1433239]##The [#50421764_marker-1502951]##EntityContext
interface passed by the container to the instance in the
setEntityContext method is an interface, not a class that contains
static information. For example, the result of the
EntityContext.getPrimaryKey method might be different each time an
instance moves from the pooled state to the ready state, and the result
of the getCallerPrincipal and isCallerInRole methods may be different in
each business method.

[#50421764_pgfId-1433240]##A RuntimeException thrown from any method of
an entity bean class (including the business methods and the callbacks
invoked by the container) results in the transition to the “does not
exist” state. The container must not invoke any method on the instance
after a RuntimeException has been caught. From the caller’s perspective,
the corresponding entity object continues to exist. The client can
continue accessing the entity object through its component interface
because the container can use a different entity bean instance to
delegate the client’s requests. Exception handling is described further
in Chapter link:Ejb.htm#50421764_13750[See Exception Handling].

[#50421764_pgfId-1433244]##The container is not required to maintain a
pool of instances in the [#50421764_marker-1502952]##pooled state. The
pooling approach is an example of a possible implementation, but it is
not the required implementation. Whether the container uses a pool or
not has no bearing on the entity bean coding
style.[#50421764_marker-1433245]##

====== [#50421764_pgfId-1433246]##[#50421764_16889]##Bean Provider’s Entity Bean Instance’s View

[#50421764_pgfId-1433247]##The following describes the entity bean
instance’s view of the contract as seen by the Bean Provider:

[#50421764_pgfId-1433249]##[#50421764_marker-1433248]##The entity Bean
Provider is responsible for implementing the following methods in the
abstract entity bean class:

[#50421764_pgfId-1433251]##[#50421764_marker-1433250]##A public
constructor that takes no arguments.

[#50421764_pgfId-1433252]## _public void setEntityContext(EntityContext
ic)_ ;

[#50421764_pgfId-1433254]##[#50421764_marker-1433253]##A container uses
this method to pass a reference to the EntityContext interface to the
entity bean instance. If the entity bean instance needs to use the
EntityContext interface during its lifetime, it must remember the
EntityContext interface in an instance variable.

[#50421764_pgfId-1433258]##This method executes with an unspecified
transaction context (Refer to EJB Core Contracts and Requirements
document link:Ejb.htm#50421764_39461[See EJB 3.2 Core Contracts and
Requirements. http://jcp.org/en/jsr/detail?id=345] Subsection “Handling
of Methods that Run with an unspecified transaction context” for how the
container executes methods with an unspecified transaction context). An
identity of an entity object is not available during this method. The
entity bean must not attempt to access its persistent state and
relationships using the accessor methods during this method.

[#50421764_pgfId-1433259]##The instance can take advantage of the
setEntityContext() method to allocate any resources that are to be held
by the instance for its lifetime. Such resources cannot be specific to
an entity object identity because the instance might be reused during
its lifetime to serve multiple entity object identities.

[#50421764_pgfId-1433260]## _public void unsetEntityContext();_

[#50421764_pgfId-1433262]##[#50421764_marker-1433261]##A container
invokes this method before terminating the life of the instance.

[#50421764_pgfId-1433263]##This method executes with an unspecified
transaction context. An identity of an entity object is not available
during this method. The entity bean must not attempt to access its
persistent state and relationships using the accessor methods during
this method.

[#50421764_pgfId-1433264]##The instance can take advantage of the
_unsetEntityContext_ method to free any resources that are held by the
instance. (These resources typically had been allocated by the
setEntityContext method.)

[#50421764_pgfId-1433265]## _public PrimaryKeyClass
ejbCreate<METHOD>(...)_ ;

[#50421764_pgfId-1433267]##[#50421764_marker-1433266]##There are
zerolink:#pgfId-1433270[6] or more ejbCreate<METHOD> methods, whose
signatures match the signatures of the create<METHOD> methods of the
entity bean’s home interface. The container invokes an
_ejbCreate<METHOD>_ method on an entity bean instance when a client
invokes a matching create<METHOD> method on the entity bean’s home
interface.

[#50421764_pgfId-1433271]##The entity Bean Provider’s responsibility is
to initialize the instance in the ejbCreate<METHOD> methods from the
input arguments, using the get and set accessor methods, such that when
the _ejbCreate<METHOD>_ method returns, the persistent representation of
the instance can be created. The entity Bean Provider is guaranteed that
the values that will be initially returned by the instance’s get methods
for container-managed fields will be the Java language defaults (e.g. 0
for integer, null for pointers), except for collection-valued
cmr-fields, which will have the empty collection (or set) as their
value. The entity Bean Provider must not attempt to modify the values of
cmr-fields in an _ejbCreate<METHOD>_ method. This should be done in the
_ejbPostCreate<METHOD>_ method instead.

{empty}[#50421764_pgfId-1433272]##The entity object created by the
_ejbCreate<METHOD>_ method must have a unique primary key. This means
that the primary key must be different from the primary keys of all the
existing entity objects within the same home. However, it is legal to
reuse the primary key of a previously removed entity object. The
implementation of the Bean Provider’s _ejbCreate<METHOD>_ methods should
be coded to return a null.link:#pgfId-1488144[7]

[#50421764_pgfId-1433276]##An _ejbCreate<METHOD>_ method executes in the
transaction context determined by the transaction attribute of the
matching create<METHOD> method. The database insert operations are
performed by the container within the same transaction context after the
Bean Provider’s ejbCreate<METHOD> method completes.

[#50421764_pgfId-1433280]## _public void ejbPostCreate<METHOD>(...);_

[#50421764_pgfId-1433282]##[#50421764_marker-1433281]##For each
ejbCreate<METHOD> method, there is a matching ejbPostCreate<METHOD>
method that has the same input parameters but whose return type is
_void_ . The container invokes the matching ejbPostCreate<METHOD> method
on an instance after it invokes the ejbCreate<METHOD> method with the
same arguments. The instance can discover the primary key by calling
_getPrimaryKey_ on its entity context object.

[#50421764_pgfId-1433283]##The entity object identity is available
during the ejbPostCreate<METHOD> method. The instance may, for example,
obtain the component interface of the associated entity object and pass
it to another enterprise bean as a method argument.

[#50421764_pgfId-1433284]##The entity Bean Provider may use the
_ejbPostCreate<METHOD>_ to set the values of cmr-fields to complete the
initialization of the entity bean instance.

[#50421764_pgfId-1433285]##An _ejbPostCreate<METHOD>_ method executes in
the same transaction context as the previous ejbCreate<METHOD> method.

[#50421764_pgfId-1433286]## _public void ejbActivate();_

[#50421764_pgfId-1433288]##[#50421764_marker-1433287]##The container
invokes this method on the instance when the container picks the
instance from the pool and assigns it to a specific entity object
identity. The ejbActivate method gives the entity bean instance the
chance to acquire additional resources that it needs while it is in the
ready state.

[#50421764_pgfId-1433289]##This method executes with an unspecified
transaction context. The entity bean must not attempt to access its
persistent state or relationships using the accessor methods during this
method.

[#50421764_pgfId-1433290]##The instance can obtain the identity of the
entity object via the getPrimaryKey, _getEJBLocalObject_ , or
getEJBObject method on the entity context. The instance can rely on the
fact that the primary key and entity object identity will remain
associated with the instance until the completion of ejbPassivate or
ejbRemove.

[#50421764_pgfId-1433291]## _public void ejbPassivate()_ ; +
[#50421764_marker-1433292]##The container invokes this method on an
instance when the container decides to disassociate the instance from an
entity object identity, and to put the instance back into the pool of
available instances. The _ejbPassivate_ method gives the instance the
chance to release any resources that should not be held while the
instance is in the pool. (These resources typically had been allocated
during the _ejbActivate_ method.)

[#50421764_pgfId-1433293]##This method executes with an unspecified
transaction context. The entity bean must not attempt to access its
persistent state or relationships using the accessor methods during this
method.

[#50421764_pgfId-1433294]##The instance can still obtain the identity of
the entity object via the getPrimaryKey, _getEJBLocalObject_ , or
getEJBObject method of the EntityContext interface.

[#50421764_pgfId-1433295]## _public void ejbRemove()_ ;

[#50421764_pgfId-1433297]##[#50421764_marker-1433296]##The container
invokes the ejbRemove method on an entity bean instance in response to a
client-invoked remove operation on the entity bean’s home or component
interface or as the result of a cascade-delete operation. The instance
is in the ready state when ejbRemove is invoked and it will be entered
into the pool when the method completes.

[#50421764_pgfId-1433298]##The entity Bean Provider can use the
ejbRemove method to implement any actions that must be done before the
entity object’s persistent representation is removed.

[#50421764_pgfId-1433299]##The container synchronizes the instance’s
state before it invokes the ejbRemove method. This means that the state
of the instance at the beginning of the ejbRemove method is the same as
it would be at the beginning of a business method.

[#50421764_pgfId-1433300]##This method and the database delete
operation(s) execute in the transaction context determined by the
transaction attribute of the remove method that triggered the
_ejbRemove_ method. The instance can still obtain the identity of the
entity object via the getPrimaryKey, getEJBLocalObject, or getEJBObject
method of the EntityContext interface.

[#50421764_pgfId-1433301]##After the entity Bean Provider’s ejbRemove
returns, and in the same transaction context, the container removes the
entity bean from all relationships in which it participates before
removing the entity object’s persistent representation.

[#50421764_pgfId-1433302]##Since the instance will be entered into the
pool, the state of the instance at the end of this method must be
equivalent to the state of a passivated instance. This means that the
instance must release any resource that it would normally release in the
ejbPassivate method.

[#50421764_pgfId-1433303]## _public void ejbLoad()_ ;

[#50421764_pgfId-1433305]##[#50421764_marker-1433304]##When the
container needs to synchronize the state of an enterprise bean instance
with the entity object’s persistent state, the container calls the
_ejbLoad_ method.

[#50421764_pgfId-1433306]##The entity Bean Provider can assume that the
instance’s persistent state has been loaded just before the ejbLoad
method is invoked. It is the responsibility of the Bean Provider to use
the _ejbLoad_ method to recompute or initialize the values of any
instance variables that depend on the entity bean’s persistent state. In
general, any transient state that depends on the persistent state of an
entity bean should be recalculated using the ejbLoad method. The entity
bean can use the ejbLoad method, for instance, to perform some
computation on the values returned by the accessor methods (for example,
uncompressing text fields).

[#50421764_pgfId-1433307]##This method executes in the transaction
context determined by the transaction attribute of the business method
or _ejbTimeout_ method that triggered the ejbLoad method.

[#50421764_pgfId-1433308]## _public void ejbStore();_

[#50421764_pgfId-1433310]##[#50421764_marker-1433309]##When the
container needs to synchronize the state of the entity object’s
persistent state with the state of the enterprise bean instance, the
container first calls the ejbStore method on the instance.

[#50421764_pgfId-1433311]##The entity Bean Provider should use the
ejbStore method to update the instance using the accessor methods before
its persistent state is synchronized. For example, the ejbStore method
may perform compression of text before the text is stored in the
database.

[#50421764_pgfId-1433313]##The Bean Provider can assume that after the
_ejbStore_ method returns, the persistent state of the instance is
synchronized.

[#50421764_pgfId-1433314]##This method executes in the same transaction
context as the previous ejbLoad or ejbCreate method invoked on the
instance. All business methods or the _ejbTimeout_ method invoked
between the previous ejbLoad or ejbCreate _<METHOD>_ method and this
ejbStore method are also invoked in the same transaction context.

[#50421764_pgfId-1468199]##public <primary key type or collection>
ejbFind<METHOD>(...);

[#50421764_pgfId-1468201]##[#50421764_marker-1468200]##The Bean Provider
of an entity bean with container-managed persistence does not write the
finder (ejbFind<METHOD>) methods.

[#50421764_pgfId-1468202]##The finder methods are generated at the
entity bean deployment time using the Container Provider’s tools. The
syntax for the Bean Provider’s specification of finder methods is
described in the link:Ejb.htm#50421764_22458[See EJB QL: EJB 2.1 Query
Language for Container-Managed Persistence Query Methods].

[#50421764_pgfId-1433323]##public <type> ejbHome<METHOD>(...);

[#50421764_pgfId-1433325]##[#50421764_marker-1433324]##The container
invokes this method on the instance when the container selects the
instance to execute a matching client-invoked <METHOD> home method. The
instance is in the pooled state (i.e., it is not assigned to any
particular entity object identity) when the container selects the
instance to execute the ejbHome<METHOD> method on it, and it is returned
to the pooled state when the execution of the ejbHome<METHOD> method
completes.

[#50421764_pgfId-1433326]##The ejbHome<METHOD> method executes in the
transaction context determined by the transaction attribute of the
matching <METHOD> home method, as described in EJB Core Contracts and
Requirements document link:Ejb.htm#50421764_39461[See EJB 3.2 Core
Contracts and Requirements. http://jcp.org/en/jsr/detail?id=345]
Subsection “Container-Managed Transaction Demarcation for Business
Methods”.

[#50421764_pgfId-1433330]##The entity Bean Provider provides the
implementation of the ejbHome<METHOD> method. The entity bean must not
attempt to access its persistent state or relationships using the
accessor methods during this method because a home method is not
specific to a particular bean instance.

[#50421764_pgfId-1433331]##public abstract <type> _e_
jbSelect<METHOD>(...);

[#50421764_pgfId-1433333]##[#50421764_marker-1433332]##The Bean Provider
may provide zero or more select methods. A select method is a query
method that is not directly exposed to the client in the home or
component interface. The Bean Provider typically calls a select method
within a business method.

[#50421764_pgfId-1433334]##The Bean Provider defines the select methods
as _abstract_ methods.

[#50421764_pgfId-1433335]##The select methods are generated at the
entity bean deployment time using the Container Provider’s tools.

[#50421764_pgfId-1690633]##The syntax for the specification of select
methods is described in link:Ejb.htm#50421764_22458[See EJB QL: EJB 2.1
Query Language for Container-Managed Persistence Query Methods].

[#50421764_pgfId-1690637]##The ejbSelect<METHOD> method executes in the
transaction context determined by the transaction attribute of the
invoking business method.

[#50421764_pgfId-1555310]## _public void ejbTimeout(...);_

[#50421764_pgfId-1555311]##The container invokes the _ejbTimeout_ method
on an instance when a timer for the instance has expired. The
_ejbTimeout_ method notifies the instance of the time-based event and
allows the instance to execute the business logic to handle it.

[#50421764_pgfId-1555312]##The _ejbTimeout_ method executes in the
transaction context determined by its transaction attribute.

====== [#50421764_pgfId-1433420]##[#50421764_36556]##Container’s View

[#50421764_pgfId-1433422]##[#50421764_marker-1433421]##This subsection
describes the container’s view of the state management contract. The
container must call the following methods:

[#50421764_pgfId-1433423]## _public void setEntityContext(ec)_ ;

[#50421764_pgfId-1433425]##[#50421764_marker-1433424]##The container
invokes this method to pass a reference to the EntityContext interface
to the entity bean instance. The container must invoke this method after
it creates the instance, and before it puts the instance into the pool
of available instances.

[#50421764_pgfId-1433426]##The container invokes this method with an
unspecified transaction context. At this point, the EntityContext is not
associated with any entity object identity.

[#50421764_pgfId-1433427]## _public void unsetEntityContext()_ ;

[#50421764_pgfId-1433429]##[#50421764_marker-1433428]##The container
invokes this method when the container wants to reduce the number of
instances in the pool. After this method completes, the container must
not reuse this instance.

[#50421764_pgfId-1433430]##The container invokes this method with an
unspecified transaction context.

[#50421764_pgfId-1433431]## _public_ _PrimaryKeyClass_
_ejbCreate<METHOD>(...)_ ; +
_public void ejbPostCreate<METHOD>(...)_ ;

[#50421764_pgfId-1433433]##[#50421764_marker-1433432]##The container
invokes these two methods during the creation of an entity object as a
result of a client invoking a create<METHOD> method on the entity bean’s
home interface.

[#50421764_pgfId-1433434]##The container invokes the ejbCreate<METHOD>
method whose signature matches the create<METHOD> method invoked by the
client.

[#50421764_pgfId-1462856]##Prior to invoking the ejbCreate<METHOD>
method provided by the Bean Provider, the container must ensure that the
values that will be initially returned by the instance’s get methods for
container-managed fields will be the Java language defaults (e.g. 0 for
integer, null for pointers), except for collection-valued cmr-fields,
which must have the empty collection (or set) as their value.

[#50421764_pgfId-1433435]##The container is responsible for calling the
_ejbCreate<METHOD>_ method, for obtaining the primary key fields of the
newly created entity object persistent representation, and for creating
an entity EJBObject reference and/or EJBLocalObject reference for the
newly created entity object. The container must establish the primary
key before it invokes the ejbPostCreate<METHOD> method.

[#50421764_pgfId-1462869]##The entity object created by the
_ejbCreate<METHOD>_ method must have a unique primary key. This means
that the primary key must be different from the primary keys of all the
existing entity objects within the same home. However, it is legal to
reuse the primary key of a previously removed entity object. The
container may, but is not required to, throw the _DuplicateKeyException_
on the Bean Provider’s attempt to create an entity object with a
duplicate primary keylink:#pgfId-1485047[8].

[#50421764_pgfId-1462870]##The container may create the representation
of the entity in the database immediately, or it can defer it to a later
time (for example to the time after the matching ejbPostCreate<METHOD>
has been called, or to the end of the transaction), depending on the
caching strategy that it uses.

[#50421764_pgfId-1433436]##The container then invokes the matching
ejbPostCreate<METHOD> method with the same arguments on the instance to
allow the instance to fully initialize itself. The instance can discover
the primary key by calling the getPrimaryKey method on its entity
context object.

[#50421764_pgfId-1462876]##Finally, the container returns the entity
object’s remote interface (i.e., a reference to the entity EJBObject) to
the client if the client is a remote client or the entity object’s local
interface (i.e., a reference to the entity EJBLocalObject) if the client
is a local client.

[#50421764_pgfId-1433437]##The container must invoke the ejbCreate
_<METHOD>_ and ejbPostCreate _<METHOD>_ methods and create the
representation of the persistent instance in the database in the
transaction context determined by the transaction attribute of the
matching create<METHOD> method, as described in EJB Core Contracts and
Requirements document link:Ejb.htm#50421764_39461[See EJB 3.2 Core
Contracts and Requirements. http://jcp.org/en/jsr/detail?id=345]
Subsection “Container-Managed Transaction Demarcation for Business
Methods”.

[#50421764_pgfId-1433441]## _public void ejbActivate()_ ;

[#50421764_pgfId-1433443]##[#50421764_marker-1433442]##The container
invokes this method on an entity bean instance at activation time (i.e.,
when the instance is taken from the pool and assigned to an entity
object identity). The container must ensure that the primary key of the
associated entity object is available to the instance if the instance
invokes the getPrimaryKey, _getEJBLocalObject_ , or getEJBObject method
on its EntityContext interface.

[#50421764_pgfId-1433444]##The container invokes this method with an
unspecified transaction context.

[#50421764_pgfId-1433445]##Note that instance is not yet ready for the
delivery of a business method. The container must still invoke the
ejbLoad method prior to a business method.

[#50421764_pgfId-1433446]## _public void ejbPassivate()_ ;

[#50421764_pgfId-1433448]##[#50421764_marker-1433447]##The container
invokes this method on an entity bean instance at passivation time
(i.e., when the instance is being disassociated from an entity object
identity and moved into the pool). The container must ensure that the
identity of the associated entity object is still available to the
instance if the instance invokes the getPrimaryKey, _getEJBLocalObject_
, or getEJBObject method on its entity context.

[#50421764_pgfId-1433449]##The container invokes this method with an
unspecified transaction context.

[#50421764_pgfId-1433450]##Note that if the instance state has been
updated by a transaction, the container must first invoke the ejbStore
method on the instance before it invokes ejbPassivate on it.

[#50421764_pgfId-1433451]## _public void ejbRemove();_

[#50421764_pgfId-1433453]##[#50421764_marker-1433452]##The container
invokes the ejbRemove method in response to a client-invoked remove
operation on the entity bean’s home or component interface or as the
result of a cascade-delete operation. The instance is in the ready state
when _ejbRemove_ is invoked and it will be entered into the pool when
the method completes.

[#50421764_pgfId-1433454]##The container synchronizes the instance’s
state before it invokes the ejbRemove method. This means that the
persistent state of the instance at the beginning of the ejbRemove
method is the same as it would be at the beginning of a business method
(i.e., if the instance is not already synchronized from the state in the
database, the container must invoke _ejbLoad_ before it invokes
_ejbRemove_ ).

[#50421764_pgfId-1433455]##The container must ensure that the identity
of the associated entity object is still available to the instance in
the _ejbRemove_ method (i.e., the instance can invoke the getPrimaryKey,
_getEJBLocalObject_ , or getEJBObject method on its EntityContext in the
_ejbRemove_ method).

[#50421764_pgfId-1462899]##After the entity Bean Provider’s ejbRemove
method returns, and in the same transaction context, the container
removes the entity bean instance from all relationships in which it
participates and then removes the entity object’s persistent
representation.

[#50421764_pgfId-1483287]##The container may delete the representation
of the entity in the database immediately, or it can defer it to a later
time (for example to the end of the transaction), depending on the
caching strategy that it uses.

[#50421764_pgfId-1433456]##The container must ensure that the ejbRemove
method and database delete operations are performed in the transaction
context determined by the transaction attribute of the invoked remove
method, as described in EJB Core Contracts and Requirements document
link:Ejb.htm#50421764_39461[See EJB 3.2 Core Contracts and Requirements.
http://jcp.org/en/jsr/detail?id=345] Subsection “Container-Managed
Transaction Demarcation for Business Methods”.

[#50421764_pgfId-1433460]## _public void ejbLoad()_ ;

[#50421764_pgfId-1433462]##[#50421764_marker-1433461]##When the
container needs to synchronize the state of an enterprise bean instance
with the entity object’s state in the database, the container calls the
_ejbLoad_ method. Depending on its caching strategy, the container may
first read the entity object’s state from the database, before invoking
the _ejbLoad_ method, or it may use a lazy loading strategy in making
this state visible to the instance.

[#50421764_pgfId-1462912]##The exact times that the container invokes
_ejbLoad_ depend on the configuration of the component and the
container, and are not defined by the EJB architecture. Typically, the
container will call _ejbLoad_ before the first business method within a
transaction or before invoking the _ejbTimeout_ method on an instance.

[#50421764_pgfId-1433463]##The container must invoke this method in the
transaction context determined by the transaction attribute of the
business method or _ejbTimeout_ method that triggered the ejbLoad
method.

[#50421764_pgfId-1433464]## _public void ejbStore()_ ;

[#50421764_pgfId-1433466]##[#50421764_marker-1433465]##When the
container needs to synchronize the state of the entity object in the
database with the state of the enterprise bean instance, the container
calls the ejbStore method on the instance. This synchronization always
happens at the end of a transaction, unless the bean is specified as
read-only (see section link:Ejb.htm#50421764_89943[See Read-only Entity
Beans]). However, the container may also invoke this method when it
passivates the instance in the middle of a transaction, or when it needs
to transfer the most recent state of the entity object to another
instance for the same entity object in the same transaction.

[#50421764_pgfId-1462921]##The container must invoke this method in the
same transaction context as the previous ejbLoad, ejbCreate _<METHOD>_ ,
or _ejbTimeout_ method invoked on the instance. All business methods or
the _ejbTimeout_ method invoked between the previous ejbLoad or
ejbCreate _<METHOD>_ method and this ejbStore method are also invoked in
the same transaction context.

[#50421764_pgfId-1462946]##After the _ejbStore_ method returns, the
container may store the persistent state of the instance to the
database, depending on its caching strategy. If the container uses a
lazy storing caching strategy, it is the container’s responsibility to
write the representation of the persistent object to the database in the
same transaction context as that of the _ejbStore_ method.

[#50421764_pgfId-1433472]##public <primary key type or collection>
ejbFind<METHOD>(...);

[#50421764_pgfId-1488261]##The implementation of the _ejbFind<METHOD>_
[#50421764_marker-1502953]## method is supplied by the container.

[#50421764_pgfId-1488285]##The container invokes the ejbFind<METHOD>
method on an instance when a client invokes a matching find<METHOD>
method on the entity bean’s home interface. The container must pick an
instance that is in the pooled state (i.e., the instance is not
associated with any entity object identity) for the execution of the
ejbFind<METHOD> method. If there is no instance in the pooled state, the
container creates one and calls the setEntityContext method on the
instance before dispatching the finder method.

[#50421764_pgfId-1488262]##The container must invoke the ejbFind<METHOD>
method in the transaction context determined by the transaction
attribute of the matching find method, as described in EJB Core
Contracts and Requirements document link:Ejb.htm#50421764_39461[See EJB
3.2 Core Contracts and Requirements.
http://jcp.org/en/jsr/detail?id=345] Subsection “Container-Managed
Transaction Demarcation for Business Methods”.

[#50421764_pgfId-1488266]##The container is responsible for ensuring
that updates to the states of all entity beans in the same transaction
context as the _ejbFind<METHOD>_ method and whose abstract schema types
are accessed in the method’s EJB QL query are visible in the results of
the _ejbFind<METHOD>_ method. Before invoking the _ejbFind<METHOD>_
method, the container must first synchronize the state of those entity
bean instances by invoking the _ejbStore_ method on them. This
requirement does not apply to the _ejbFindByPrimaryKey_ method. The
results of the _ejbFindByPrimaryKey_ method, however, must reflect the
entities that have been created or removed within the same transaction
context.

[#50421764_pgfId-1488267]##After the ejbFind<METHOD> method completes,
the instance remains in the pooled state. The container may, but is not
required to, immediately activate the objects that were located by the
finder using the transition through the ejbActivate method.

[#50421764_pgfId-1488268]##If the ejbFind<METHOD> method is declared to
return a single primary key, the container creates an entity EJBObject
(EJBLocalObject) reference for the primary key and returns it to the
client (local client). If the ejbFind<METHOD> method is declared to
return a collection of primary keys, the container creates a collection
of entity EJBObject (EJBLocalObject) references for the primary keys
returned from the ejbFind<METHOD> method, and returns the collection to
the client (local client).

[#50421764_pgfId-1488272]##The implementations of the finder methods are
generated at the entity bean deployment time using the Container
Provider’s tools.

[#50421764_pgfId-1462962]##public __ <type> __ ejbSelect<METHOD>(...);

[#50421764_pgfId-1462964]##[#50421764_marker-1462963]##A select method
is a query method that is not directly exposed to the client in the home
or component interface. The Bean Provider typically calls a select
method within a business method or home method.

[#50421764_pgfId-1462965]##A select method executes in the transaction
context determined by the transaction attribute of the invoking business
method.

[#50421764_pgfId-1462966]##The container is responsible for ensuring
that all updates to the states of all entity beans in the same
transaction context as the _ejbSelect<METHOD>_ method and whose abstract
schema types are accessed in the EJB QL query for the
_ejbSelect<METHOD>_ method are visible in the results of the
_ejbSelect<METHOD> method_ by invoking the _ejbStore_ method on those
entity bean instances.

[#50421764_pgfId-1462967]##The implementations of the select methods are
generated at the entity bean deployment time using the Container
Provider’s tools.

[#50421764_pgfId-1433485]##public <type> ejbHome<METHOD>(...);

[#50421764_pgfId-1433487]##[#50421764_marker-1433486]##The container
invokes the ejbHome<METHOD> method on an instance when a client invokes
a matching <METHOD> home method on the entity bean’s home interface. The
container must pick an instance that is in the pooled state (i.e., the
instance is not associated with any entity object identity) for the
execution of the ejbHome<METHOD> method. If there is no instance in the
pooled state, the container creates one and calls the setEntityContext
method on the instance before dispatching the home method.

[#50421764_pgfId-1433488]##After the ejbHome<METHOD> method completes,
the instance remains in the pooled state.

[#50421764_pgfId-1433489]##The container must invoke the ejbHome<METHOD>
method in the transaction context determined by the transaction
attribute of the matching <METHOD> home method, as described in EJB Core
Contracts and Requirements document link:Ejb.htm#50421764_39461[See EJB
3.2 Core Contracts and Requirements.
http://jcp.org/en/jsr/detail?id=345] Subsection “Container-Managed
Transaction Demarcation for Business Methods”.
[#50421764_marker-1433493]##

[#50421764_pgfId-1555316]## _public void ejbTimeout(...);_

[#50421764_pgfId-1555317]##The container invokes the _ejbTimeout_ method
on the instance when a timer with which the entity has been registered
expires. If there is no suitable instance in the ready state, the
container must activate an instance, invoking the _ejbActivate_ method
and transitioning it to the ready state.

[#50421764_pgfId-1555318]##The container invokes the _ejbTimeout_ method
in the context of a transaction determined by its transaction attribute.

====== [#50421764_pgfId-1482445]##[#50421764_89943]##Read-only Entity Beans

[#50421764_pgfId-1629576]##Compliant implementations of this
specification may optionally support read-only entity beans. A read-only
entity bean is an entity bean whose instances are not intended to be
updated and/or created by the application. Read-only beans are best
suited for situations where the underlying data never changes or changes
infrequently.

{empty}[#50421764_pgfId-1629583]##Containers that support read-only
beans do not call the _ejbStore_ method on them. The _ejbLoad_ method
should typically be called by the container when the state of the bean
instance is initially loaded from the database, or at designated refresh
intervals.link:#pgfId-1629675[9]

{empty}[#50421764_pgfId-1629591]##If a read-only bean is used, the state
of such a bean should not be updated by the application, and the
behavior is unspecified if this occurs.link:#pgfId-1629689[10]

[#50421764_pgfId-1629597]##Read-only beans are designated by
vendor-specific means that are outside the scope of this specification,
and their use is therefore not portable.

====== [#50421764_pgfId-1629573]##The EntityContext Interface

[#50421764_pgfId-1482447]##[#50421764_marker-1482446]##A container
provides the entity bean instances with an _EntityContext_ , which gives
the entity bean instance access to the instance’s context maintained by
the container. The _EntityContext_ interface has the following methods:

[#50421764_pgfId-1482448]##The _getEJBObject_ method returns the entity
bean’s remote interface.

[#50421764_pgfId-1482449]##The _getEJBHome_ method returns the entity
bean’s remote home interface.

[#50421764_pgfId-1482450]##The _getEJBLocalObject_ method returns the
entity bean’s local interface.

[#50421764_pgfId-1482451]##The _getEJBLocalHome_ method returns the
entity bean’s local home interface.

[#50421764_pgfId-1482452]##The _getCallerPrincipal_ method returns the
_java.security.Principal_ that identifies the invoker.

[#50421764_pgfId-1482453]##The _isCallerInRole_ method tests if the
entity bean instance’s caller has a particular role.

[#50421764_pgfId-1482454]##The _setRollbackOnly_ method allows the
instance to mark the current transaction such that the only outcome of
the transaction is a rollback.

[#50421764_pgfId-1482455]##The _getRollbackOnly_ method allows the
instance to test if the current transaction has been marked for
rollback.

[#50421764_pgfId-1482456]##The _getPrimaryKey_ method returns the entity
bean’s primary key.

[#50421764_pgfId-1555319]##The _getTimerService_ method returns the
_javax.ejb.TimerService_ interface.

[#50421764_pgfId-1482511]##The _getUserTransaction_ method returns the
_javax.transaction.UserTransaction_ interface. Entity bean instances
must not call this method.

[#50421764_pgfId-1630440]##The _lookup_ method enables the entity bean
to look up its environment entries in the JNDI naming context.

====== [#50421764_pgfId-1433494]##Operations Allowed in the Methods of the Entity Bean Class

[#50421764_pgfId-1433496]##[#50421764_marker-1433495]##Table
link:Ejb.htm#50421764_31076[See Operations Allowed in the Methods of an
Entity Bean] defines the methods of an entity bean class in which the
enterprise bean instances can access the methods of the
javax.ejb.EntityContext interface, the java:comp/env environment naming
context, resource managers, _TimerService_ and _Timer_ methods, the
_EntityManager_ and _EntityManagerFactory_ methods, and other enterprise
beans.

[#50421764_pgfId-1433500]##If an entity bean instance attempts to invoke
a method of the EntityContext interface, and the access is not allowed
in Table link:Ejb.htm#50421764_31076[See Operations Allowed in the
Methods of an Entity Bean], the container must throw the
java.lang.IllegalStateException.

[#50421764_pgfId-1556098]##If a entity bean instance attempts to invoke
a method of the _TimerService_ or _Timer_ interface and the access is
not allowed in Table link:Ejb.htm#50421764_31076[See Operations Allowed
in the Methods of an Entity Bean], the container must throw the
java.lang.IllegalStateException.

[#50421764_pgfId-1433504]##If an entity bean instance attempts to access
a resource manager, an enterprise bean, an entity manager or entity
manager factory, and the access is not allowed in Table
link:Ejb.htm#50421764_31076[See Operations Allowed in the Methods of an
Entity Bean], the behavior is undefined by the EJB architecture.

======= [#50421764_pgfId-1433512]##

image:Ejb-5.gif[image]

[#50421764_31076]##Operations Allowed in the Methods of an Entity
Bean[#50421764_marker-1433511]##

[#50421764_pgfId-1433516]##Bean method

[#50421764_pgfId-1433518]##Bean method can perform the following
operations

[#50421764_pgfId-1433520]##constructor

[#50421764_pgfId-1433522]##-

[#50421764_pgfId-1433524]##setEntityContext

[#50421764_pgfId-1433525]##unsetEntityContext

[#50421764_pgfId-1627044]##EntityContext methods: getEJBHome,
getEJBLocalHome, lookup

[#50421764_pgfId-1433527]## 

[#50421764_pgfId-1433528]##JNDI access to java:comp/env

[#50421764_pgfId-1433530]##ejbCreate

[#50421764_pgfId-1433532]##EntityContext methods: getEJBHome,
getEJBLocalHome, getCallerPrincipal, getRollbackOnly, isCallerInRole,
setRollbackOnly, getTimerService, lookup

[#50421764_pgfId-1433533]##JNDI access to java:comp/env

[#50421764_pgfId-1433534]##Resource manager access

[#50421764_pgfId-1433535]##Enterprise bean access

[#50421764_pgfId-1636654]##EntityManagerFactory access

[#50421764_pgfId-1636655]##EntityManager access

[#50421764_pgfId-1433537]##ejbPostCreate

[#50421764_pgfId-1433539]##EntityContext methods: getEJBHome,
getEJBLocalHome, getCallerPrincipal, getRollbackOnly, isCallerInRole,
setRollbackOnly, getEJBObject _, getEJBLocalObject,_ getPrimaryKey,
getTimerService, lookup

[#50421764_pgfId-1433540]##JNDI access to java:comp/env

[#50421764_pgfId-1433541]##Resource manager access

[#50421764_pgfId-1433542]##Enterprise bean access

[#50421764_pgfId-1555320]##Timer service or Timer methods

[#50421764_pgfId-1636658]##EntityManagerFactory access

[#50421764_pgfId-1636659]##EntityManager access

[#50421764_pgfId-1433544]##ejbRemove

[#50421764_pgfId-1433546]##EntityContext methods: getEJBHome,
getEJBLocalHome, getCallerPrincipal, getRollbackOnly, isCallerInRole,
setRollbackOnly, getEJBObject _, getEJBLocalObject_ , getPrimaryKey,
getTimerService, lookup

[#50421764_pgfId-1433547]##JNDI access to java:comp/env

[#50421764_pgfId-1433548]##Resource manager access

[#50421764_pgfId-1433549]##Enterprise bean access

[#50421764_pgfId-1636665]##Timer service or Timer methods

[#50421764_pgfId-1636669]##EntityManagerFactory access

[#50421764_pgfId-1636666]##EntityManager access

[#50421764_pgfId-1433553]##ejbHome

[#50421764_pgfId-1433555]##EntityContext methods: getEJBHome,
getEJBLocalHome, getCallerPrincipal, getRollbackOnly, isCallerInRole,
setRollbackOnly, getTimerService, lookup

[#50421764_pgfId-1433556]##JNDI access to java:comp/env

[#50421764_pgfId-1433557]##Resource manager access

[#50421764_pgfId-1433558]##Enterprise bean access

[#50421764_pgfId-1636674]##EntityManagerFactory access

[#50421764_pgfId-1636675]##EntityManager access

[#50421764_pgfId-1433560]##ejbActivate

[#50421764_pgfId-1433561]##ejbPassivate

[#50421764_pgfId-1433563]##EntityContext methods: getEJBHome,
getEJBLocalHome, getEJBObject, getEJBLocalObject, getPrimaryKey,
getTimerService, lookup

[#50421764_pgfId-1433564]##JNDI access to java:comp/env

[#50421764_pgfId-1433566]##ejbLoad

[#50421764_pgfId-1433567]##ejbStore

[#50421764_pgfId-1433569]##EntityContext methods: getEJBHome,
getEJBLocalHome, getCallerPrincipal, getRollbackOnly, isCallerInRole,
setRollbackOnly, getEJBObject, getEJBLocalObject, getPrimaryKey,
getTimerService, lookup

[#50421764_pgfId-1433570]##JNDI access to java:comp/env

[#50421764_pgfId-1433571]##Resource manager access

[#50421764_pgfId-1433572]##Enterprise bean access

[#50421764_pgfId-1555343]##Timer service or Timer methods

[#50421764_pgfId-1636682]##EntityManagerFactory access

[#50421764_pgfId-1636683]##EntityManager access

[#50421764_pgfId-1433574]##business method

[#50421764_pgfId-1433575]##from component interface

[#50421764_pgfId-1466642]##EntityContext methods: getEJBHome,
getEJBLocalHome, getCallerPrincipal, getRollbackOnly, isCallerInRole,
setRollbackOnly, getEJBObject, getEJBLocalObject, getPrimaryKey,
getTimerService, lookup

[#50421764_pgfId-1433578]##JNDI access to java:comp/env

[#50421764_pgfId-1433579]##Resource manager access

[#50421764_pgfId-1433580]##Enterprise bean access

[#50421764_pgfId-1555325]##Timer service or Timer methods

[#50421764_pgfId-1636690]##EntityManagerFactory access

[#50421764_pgfId-1636691]##EntityManager access

[#50421764_pgfId-1555327]##ejbTimeout

[#50421764_pgfId-1555331]##EntityContext methods: getEJBHome,
getEJBLocalHome, getRollbackOnly, setRollbackOnly, getCallerPrincipal,
isCallerInRole, getEJBObject, getEJBLocalObject, getPrimaryKey,
getTimerService, lookup

[#50421764_pgfId-1555332]##JNDI access to java:comp/env

[#50421764_pgfId-1555333]##Resource manager access

[#50421764_pgfId-1555334]##Enterprise bean access

[#50421764_pgfId-1555335]##Timer service or Timer methods

[#50421764_pgfId-1636698]##EntityManagerFactory access

[#50421764_pgfId-1636699]##EntityManager access

[#50421764_pgfId-1433582]##Additional restrictions:

[#50421764_pgfId-1433583]##The getRollbackOnly and setRollbackOnly
methods of the EntityContext interface should be used only in the
enterprise bean methods that execute in the context of a transaction.
The container must throw the java.lang.IllegalStateException if the
methods are invoked while the instance is not associated with a
transaction.

[#50421764_pgfId-1433584]##Reasons for disallowing operations:

[#50421764_pgfId-1433585]##Invoking the getEJBObject,
_getEJBLocalObject_ , and getPrimaryKey methods is disallowed in the
entity bean methods in which there is no entity object identity
associated with the instance.

[#50421764_pgfId-1482626]##Invoking the _getEJBObject_ and _getEJBHome_
methods is disallowed if the entity bean does not define a remote client
view.

[#50421764_pgfId-1482627]##Invoking the _getEJBLocalObject_ and
_getEJBLocalHome_ methods is disallowed if the entity bean does not
define a local client view.

[#50421764_pgfId-1433587]##Invoking the getRollbackOnly and
setRollbackOnly methods is disallowed in the entity bean methods for
which the container does not have a meaningful transaction context.

[#50421764_pgfId-1433588]##Accessing resource managers and enterprise
beans, including accessing the persistent state of an entity bean
instance, is disallowed in the entity bean methods for which the
container does not have a meaningful transaction context or client
security context.

====== [#50421764_pgfId-1433590]##[#50421764_96826]##Finder Methods

[#50421764_pgfId-1433592]##[#50421764_marker-1433591]##An entity bean’s
home interface defines one or more finder
methodslink:#pgfId-1433595[11], one for each way to find an entity
object or collection of entity objects within the home. The name of each
finder method starts with the prefix “ _find_ ”, such as
_findLargeAccounts_ . The arguments of a finder method are used in the
implementation of the query for the finder method to locate the
requested entity objects.

[#50421764_pgfId-1433596]##Every finder method except
_findByPrimaryKey(key)_ must be associated with a _query_ element in the
deployment descriptor. The entity Bean Provider declaratively specifies
the EJB QL finder query and associates it with the finder method in the
deployment descriptor. A finder method is normally characterized by an
EJB QL query string specified in the _query_ element. EJB QL is
described in Chapter link:Ejb.htm#50421764_22458[See EJB QL: EJB 2.1
Query Language for Container-Managed Persistence Query Methods]. A
compliant implementation of this specification is required to support
EJB QL as defined in Chapter link:Ejb.htm#50421764_22458[See EJB QL: EJB
2.1 Query Language for Container-Managed Persistence Query Methods] for
use with finder methods.

[#50421764_pgfId-1511458]##In the case that both the remote home
interface and local home interface define a finder method with the same
name and argument types, the EJB QL query string specified by the
_query_ element defines the semantics of both methods.

====== [#50421764_pgfId-1433600]##Single-Object Finder Methods

[#50421764_pgfId-1467930]##[#50421764_marker-1433601]##Some finder
methods (such as findByPrimaryKey) are designed to return at most one
entity object. For single-object finders, the result type of a
find<METHOD>method defined in the entity bean’s remote home interface is
the entity bean’s remote interface, and the result type of the
find<METHOD>method defined in the entity bean’s local home interface is
the entity bean’s local interface.

[#50421764_pgfId-1433603]##The following code illustrates the definition
of a single-object finder defined on the remote home interface.

[#50421764_pgfId-1433604]##// Entity’s home interface

[#50421764_pgfId-1433605]##public interface AccountHome extends
javax.ejb.EJBHome \{

[#50421764_pgfId-1433606]## ...

[#50421764_pgfId-1433607]## Account findByPrimaryKey(AccountPrimaryKey
primkey)

[#50421764_pgfId-1433608]## throws FinderException, RemoteException;

[#50421764_pgfId-1433609]## ...

[#50421764_pgfId-1433610]##}

[#50421764_pgfId-1433611]##Note that a finder method defined on the
local home interface must not throw the _RemoteException_ .

[#50421764_pgfId-1467955]##In general, when defining a single-object
finder method other than _findByPrimaryKey_ , the entity Bean Provider
should be sure that the finder method will always return only a single
entity object. This may occur, for example, if the EJB QL query string
that is used to specify the finder query includes an equality test on
the entity bean’s primary key fields. If the entity Bean Provider uses
an unknown primary key class (see link:Ejb.htm#50421764_84543[See
Special Case: Unknown Primary Key Class]), the Bean Provider will
typically define the finder method as a multi-object finder.

[#50421764_pgfId-1571956]##Note that a single-object finder method may
return a null value. If the result set of the query consists of a single
null value, the container must return the null value as the result of
the method. If the result set of a query for a single-object finder
method contains more than one value (whether non-null, null, or a
combination), the container must throw the _FinderException_ from the
finder method. If the result set of the query contains no values, the
container must throw the _ObjectNotFoundException_ .

====== [#50421764_pgfId-1433615]##Multi-Object Finder Methods

[#50421764_pgfId-1433617]##[#50421764_marker-1433616]##Some finder
methods are designed to return multiple entity objects. For multi-object
finders defined on the entity bean’s local home interface, the result
type of the find<METHOD>method is a collection of objects implementing
the entity bean’s local interface. For multi-object finders defined on
the entity bean’s remote home interface, the result type of the
find<METHOD>method is a collection of objects implementing the entity
bean’s remote interface.

[#50421764_pgfId-1433618]##The Bean Provider uses the Java™ 2
java.util.Collection interface to define a collection type for the
result type of a finder method for an entity bean with container-managed
persistence.

[#50421764_pgfId-1487140]##The collection of values returned by the
container may contain duplicates if DISTINCT is not specified in the
SELECT clause of the query for the finder method.

[#50421764_pgfId-1548928]##The collection of values returned by the
container may contain null values if the finder method returns the
values of a cmr-field and null values are not eliminated by the query.

[#50421764_pgfId-1433621]##[#50421764_marker-1433620]##A portable client
program must use the PortableRemoteObject.narrow method to convert the
objects contained in the collections returned by a finder method on the
entity bean’s remote home interface to the entity bean’s remote
interface type.

[#50421764_pgfId-1433623]##[#50421764_marker-1433622]##The following is
an example of a multi-object finder method defined on the remote home
interface:

[#50421764_pgfId-1433624]##// Entity’s home interface

[#50421764_pgfId-1433625]##public interface AccountHome extends
javax.ejb.EJBHome \{

[#50421764_pgfId-1433626]## ...

[#50421764_pgfId-1433627]## java.util.Collection
findLargeAccounts(double limit)

[#50421764_pgfId-1433628]## throws FinderException, RemoteException;

[#50421764_pgfId-1433629]## ...

[#50421764_pgfId-1433630]##}

[#50421764_pgfId-1467960]## 

[#50421764_pgfId-1467964]##Note that if this finder method were defined
on the local home interface, it would not throw the _RemoteException_ .

====== [#50421764_pgfId-1433632]##[#50421764_70208]##Select Methods

[#50421764_pgfId-1433634]##[#50421764_marker-1433633]##Select methods
are query methods for use by the Bean Provider within an entity bean
instance. Unlike finder methods, select methods are not specified in the
entity bean’s home interface. A select method is an abstract method
defined by the Bean Provider on an entity bean class. A select method
must not be exposed in the home or component interface of an entity
bean.

[#50421764_pgfId-1433635]##The semantics of a select method, like those
of a finder method, are defined by an EJB QL query string. A select
method is similar to a finder method, but unlike a finder method, but it
can return values that correspond to any cmp- or cmr-field type.

[#50421764_pgfId-1482330]##Every select method must be associated with a
_query_ [#50421764_marker-1502954]## element in the deployment
descriptor. The entity Bean Provider declaratively specifies the EJB QL
query and associates it with the select method in the deployment
descriptor. A select method is normally characterized by an EJB QL query
string specified in the _query_ element. EJB QL is described in Chapter
link:Ejb.htm#50421764_22458[See EJB QL: EJB 2.1 Query Language for
Container-Managed Persistence Query Methods]. A compliant implementation
of this specification is required to support EJB QL as defined in
Chapter link:Ejb.htm#50421764_22458[See EJB QL: EJB 2.1 Query Language
for Container-Managed Persistence Query Methods] for use with select
methods.

[#50421764_pgfId-1511196]##Typically an ejbSelect<METHOD>method that
returns entity objects returns these as EJBLocalObjects. If the
ejbSelect<METHOD>method returns an EJBObject or collection of
EJBObjects, the Bean Provider must specify the value of the
_result-type-mapping_ element in the _query_ deployment descriptor
element for the select method as _Remote_ .

[#50421764_pgfId-1433636]##An ejbSelect<METHOD> is not based on the
identity of the entity bean instance on which it is invoked. However,
the Bean Provider can use the primary key of an entity bean as an
argument to an _ejbSelect<METHOD>_ to define a query that is logically
scoped to a particular entity bean instance.

[#50421764_pgfId-1433637]##The following table illustrates the semantics
of finder and select methods.

======= [#50421764_pgfId-1433675]##

image:Ejb-5.gif[image]

Comparison of Finder and Select Methods

[width="100%",cols="34%,33%,33%",options="header",]
|===
|[#50421764_pgfId-1433640]##  |[#50421764_pgfId-1433642]##Finder methods
|[#50421764_pgfId-1433644]##Select methods
|[#50421764_pgfId-1433646]##method |[#50421764_pgfId-1433648]##
_find<METHOD>_ |[#50421764_pgfId-1433650]## _ejbSelect<METHOD>_

|[#50421764_pgfId-1433652]##visibility
|[#50421764_pgfId-1433654]##exposed to client
|[#50421764_pgfId-1433656]##internal to entity bean class

|[#50421764_pgfId-1433664]##instance
|[#50421764_pgfId-1433666]##arbitrary bean instance in pooled state
|[#50421764_pgfId-1433668]##instance: current instance (could be bean
instance in pooled state or ready state)

|[#50421764_pgfId-1433670]##return value
|[#50421764_pgfId-1433672]##EJBObjects or EJBLocalObjects of the same
type as the entity bean |[#50421764_pgfId-1433674]##EJBObjects,
EJBLocalObjects, or cmp-field types
|===

====== [#50421764_pgfId-1433676]##Single-Object Select Methods

[#50421764_pgfId-1433678]##[#50421764_marker-1433677]##Some select
methods are designed to return at most one value. In general, when
defining a single-object select method, the entity Bean Provider must be
sure that the select method will always return only a single object or
value. If the query specified by the select method returns multiple
values of the designated type, the container must throw the
FinderException.

[#50421764_pgfId-1571960]##Note that a single-object select method may
return a null value. If the result set of the query consists of a single
null value, the container must return the null value as the result of
the method. If the result set of a query for a single-object select
method contains more than one value (whether non-null, null, or a
combination), the container must throw the _FinderException_ from the
select method. If the result set of the query contains no values, the
contain must throw the _ObjectNotFoundException_ .

[#50421764_pgfId-1433679]##The Bean Provider will typically define a
select method as a [#50421764_marker-1502955]##multi-object select
method.

====== [#50421764_pgfId-1433680]##Multi-Object Select Methods

[#50421764_pgfId-1433681]##Some select methods are designed to return
multiple values. For these multi-object select methods, the result type
of the ejbSelect<METHOD>method is a collection of objects.

[#50421764_pgfId-1433683]##[#50421764_marker-1433682]##The Bean Provider
uses the Java™ 2 java.util.Collection interface or java.util.Set
interface to define a collection type for the result type of a select
method. The type of the elements of the collection is determined by the
type of the [#50421764_marker-1502956]##SELECT clause of the
corresponding EJB QL query. If the Bean Provider uses the
_java.util.Collection_ interface, the collection of values returned by
the container may contain duplicates if DISTINCT is not specified in the
SELECT clause of the query. If a query for a select method whose result
type is _java.util.Set_ does not specify
[#50421764_marker-1502957]##DISTINCT in its SELECT clause, the container
must interpret the query as if [#50421764_marker-1502958]##SELECT
DISTINCT had been specified.

[#50421764_pgfId-1548941]##The collection of values returned by the
container may contain null values if the select method returns the
values of a cmr-field or cmp-field and null values are not eliminated by
the query.

[#50421764_pgfId-1433687]##[#50421764_marker-1433686]##The following is
an example of a multi-object select method definition in the _OrderBean_
class:

[#50421764_pgfId-1433688]##// OrderBean implementation class

[#50421764_pgfId-1433689]##public abstract class OrderBean implements
javax.ejb.EntityBean\{

[#50421764_pgfId-1433690]## ...

[#50421764_pgfId-1433691]## public abstract java.util.Collection

[#50421764_pgfId-1433692]## ejbSelectAllOrderedProducts(Customer
customer)

[#50421764_pgfId-1433693]## throws FinderException;

[#50421764_pgfId-1433694]## // internal finder method to find all
products ordered

[#50421764_pgfId-1433695]## 

====== [#50421764_pgfId-1433697]##Timer Notifications

[#50421764_pgfId-1555345]##An entity bean can be registered with the EJB
timer service for time-based event notifications if it implements the
_javax.ejb.TimedObject_ interface. The container invokes the bean
instance’s _ejbTimeout_ method when a timer for the bean has expired.
See link:Ejb.htm#50421764_49136[See Timer Service].

====== [#50421764_pgfId-1555344]##[#50421764_85765]##Standard Application Exceptions for Entities

[#50421764_pgfId-1433699]##[#50421764_marker-1433698]##The EJB
specification defines the following standard application exceptions:

[#50421764_pgfId-1433700]##javax.ejb.CreateException

[#50421764_pgfId-1433701]##javax.ejb.DuplicateKeyException

[#50421764_pgfId-1433702]##javax.ejb.FinderException

[#50421764_pgfId-1433703]##javax.ejb.ObjectNotFoundException

[#50421764_pgfId-1433704]##javax.ejb.RemoveException

[#50421764_pgfId-1433705]##This section describes the use of these
exceptions by entity beans with container-managed persistence.

====== [#50421764_pgfId-1433706]##CreateException

[#50421764_pgfId-1433708]##[#50421764_marker-1433707]##From the client’s
perspective, a CreateException (or a subclass of CreateException)
indicates that an application level error occurred during a
create<METHOD> operation. If a client receives this exception, the
client does not know, in general, whether the entity object was created
but not fully initialized, or not created at all. Also, the client does
not know whether or not the transaction has been marked for rollback.
(However, the client may determine the transaction status using the
UserTransaction interface or the _setRollbackOnly_ method of the
_EJBContext_ interface.)

[#50421764_pgfId-1433709]##Both the container and the Bean Provider may
throw the CreateException (or subclass of CreateException) from the
create<METHOD>, ejbCreate<METHOD> and ejbPostCreate<METHOD> methods to
indicate an application-level error from the create or initialization
operation. Optionally, the container or Bean Provider may mark the
transaction for rollback before throwing this exception.

[#50421764_pgfId-1433710]##The container or Bean Provider is encouraged
to mark the transaction for rollback only if data integrity would be
lost if the transaction were committed by the client. Typically, when a
_CreateException_ is thrown, it leaves the database in a consistent
state, allowing the client to recover. For example, the
_ejbCreate<METHOD>_ method may throw the _CreateException_ to indicate
that the some of the arguments to the _create<METHOD>_ method are
invalid.

[#50421764_pgfId-1433714]##The container treats the CreateException as
any other application exception. See Section
link:Ejb.htm#50421764_28132[See Container Provider Responsibilities].

====== [#50421764_pgfId-1433715]##DuplicateKeyException

[#50421764_pgfId-1433717]##[#50421764_marker-1433716]##The
DuplicateKeyException is a subclass of CreateException. It may be thrown
by the container to indicate to the client or local client that the
entity object cannot be created because an entity object with the same
key already exists. The unique key causing the violation may be the
primary key, or another key defined in the underlying database.

[#50421764_pgfId-1433718]##Normally, the container should not mark the
transaction for rollback before throwing the exception.

[#50421764_pgfId-1433719]##When the client or local client receives a
DuplicateKeyException, the client knows that the entity was not created,
and that the transaction has not typically been marked for rollback.

====== [#50421764_pgfId-1433720]##FinderException

[#50421764_pgfId-1433722]##[#50421764_marker-1433721]##From the client’s
perspective, a FinderException (or a subclass of FinderException)
indicates that an application level error occurred during the find
operation. Typically, the transaction has not been marked for rollback
because of the FinderException.

[#50421764_pgfId-1433724]##[#50421764_marker-1433723]##The container
throws the FinderException (or subclass of FinderException) from the
implementation of a finder or select method to indicate an
application-level error in the finder or select method. The container
should not, typically, mark the transaction for rollback before throwing
the FinderException.

[#50421764_pgfId-1433729]##The container treats the FinderException as
any other application exception. See Section
link:Ejb.htm#50421764_28132[See Container Provider
Responsibilities][#50421764_marker-1433728]##.

====== [#50421764_pgfId-1433730]##ObjectNotFoundException

[#50421764_pgfId-1433732]##[#50421764_marker-1433731]##The
ObjectNotFoundException is a subclass of FinderException. The container
throws the _ObjectNotFoundException_ from the implementation of a finder
or select method to indicate that the requested object does not exist.

[#50421764_pgfId-1433739]##Only single-object finder or select methods
(see Subsections link:Ejb.htm#50421764_96826[See Finder Methods] and
link:Ejb.htm#50421764_70208[See Select Methods]) should throw this
exception. Multi-object finder or select methods must not throw this
exception. Multi-object finder or select methods should return an empty
collection as an indication that no matching objects were found.

====== [#50421764_pgfId-1433740]##RemoveException

[#50421764_pgfId-1433742]##[#50421764_marker-1433741]##From the client’s
perspective, a RemoveException (or a subclass of RemoveException)
indicates that an application level error occurred during a remove
operation. If a client receives this exception, the client does not
know, in general, whether the entity object was removed or not. The
client also does not know if the transaction has been marked for
rollback. (However, the client may determine the transaction status
using the UserTransaction interface.)

[#50421764_pgfId-1433743]##The container or Bean Provider throws the
RemoveException (or subclass of RemoveException) from a remove method to
indicate an application-level error from the entity object removal
operation. Optionally, the container or Bean Provider may mark the
transaction for rollback before throwing this exception.

[#50421764_pgfId-1433744]##The container or Bean Provider is encouraged
to mark the transaction for rollback only if data integrity would be
lost if the transaction were committed by the client. Typically, when a
_RemoveException_ is thrown, it leaves the database in a consistent
state, allowing the client to recover.

[#50421764_pgfId-1433746]##[#50421764_marker-1433745]##The container
treats the RemoveException as any other application exception. See
Section link:Ejb.htm#50421764_28132[See Container Provider
Responsibilities].

====== [#50421764_pgfId-1433751]##[#50421764_48021]##Commit Options

[#50421764_pgfId-1433753]##[#50421764_marker-1433752]##The Entity Bean
protocol is designed to give the container the flexibility to select the
disposition of the instance state at transaction commit time. This
flexibility allows the container to optimally manage the association of
an entity object identity with the enterprise bean instances.

[#50421764_pgfId-1433754]##The container can select from the following
commit-time options:

[#50421764_pgfId-1433755]##Option A: The container caches a “ready”
instance between transactions. The container knows that the bean
instance has exclusive access to the state of the object in the
persistent storage. Therefore, the container does not have to
synchronize the instance’s state from the persistent storage at the
beginning of the next transaction or have to verify that the instance’s
state is in sync with the persistent storage at the beginning of the
next transaction.

[#50421764_pgfId-1433756]##Option B: The container caches a “ready”
instance between transactions. In contrast to Option A, in this option
the instance may not have exclusive access to the state of the object in
the persistent storage. Therefore, the container must synchronize the
instance’s state from the persistent storage at the beginning of the
next transaction if the instance’s state in the persistent storage has
changed. Containers using optimistic concurrency control strategies may
instead choose to rollback the transaction if this invariant has not
been met: The container must ensure that in order for a transaction to
be successfully committed, the transaction must only operate on instance
data that is in sync with the persistent storage at the beginning of the
transaction.

[#50421764_pgfId-1433757]##Option _C_ : The container does not cache a
“ready” instance between transactions. The container returns the
instance to the pool of available instances after a transaction has
completed.

[#50421764_pgfId-1589029]##Variants of these strategies that capture the
same semantics from the Bean Provider’s viewpoint may be employed, e.g.,
to optimize data access.

[#50421764_pgfId-1589030]##The following illustrative lazy loading
strategies are consistent with the intent of these requirements:

[#50421764_pgfId-1589039]##If _ejbLoad_ is called at the beginning of
the transaction without the instance’s persistent state having been
loaded from the persistent storage, the persistent state must be faulted
in when _ejbLoad_ causes the bean’s getter accessor methods to be
invoked. If the _ejbLoad_ method is empty, data may be faulted in as
needed in the course of executing the businesss methods of the bean.

[#50421764_pgfId-1589040]##If the instance’s persistent state is cached
between transactions, _ejbLoad_ need not be called and persistent data
need not be faulted in from the persistent storage (unless it has not
previously been accessed). In this case, because _ejbLoad_ has been
previously called when the instance was entered into the ready state for
the first time, and because the bean instance’s state is consistent with
its persistent state, there is no need to call _ejbLoad_ unless the
instance’s state in the persistent storage has changed. In this case,
the container must ensure that in order for the transaction to be
successfully committed, the instance’s persistent state was in sync with
the persistent storage at the beginning of the transaction.

[#50421764_pgfId-1433800]##The following table provides a summary of the
commit-time options.

======= [#50421764_pgfId-1433760]##

image:Ejb-5.gif[image]

Summary of Commit-Time Options

[#50421764_pgfId-1433768]## 

[#50421764_pgfId-1433770]##Write instance state to database

[#50421764_pgfId-1433772]##Instance stays

[#50421764_pgfId-1433773]##ready

[#50421764_pgfId-1433775]##Instance state remains valid

[#50421764_pgfId-1433777]##Option A

[#50421764_pgfId-1433779]##Yes

[#50421764_pgfId-1433781]##Yes

[#50421764_pgfId-1433783]##Yes

[#50421764_pgfId-1433785]##Option B

[#50421764_pgfId-1433787]##Yes

[#50421764_pgfId-1433789]##Yes

[#50421764_pgfId-1433791]##No

[#50421764_pgfId-1433793]##Option C

[#50421764_pgfId-1433795]##Yes

[#50421764_pgfId-1433797]##No

[#50421764_pgfId-1433799]##No

[#50421764_pgfId-1433801]##Note that the container synchronizes the
instance’s state with the persistent storage at transaction commit for
all three options.

[#50421764_pgfId-1433802]##The selection of the commit option is
transparent to the entity bean implementation—the entity bean will work
correctly regardless of the commit-time option chosen by the container.
The Bean Provider writes the entity bean in the same way.

[#50421764_pgfId-1433807]## _Note: The Bean Provider relies on the
ejbLoad method to be invoked in order to resynchronize the bean’s
transient state with its persistent state. It is the responsibility of
the container to call the ejbLoad method at the beginning of a new
transaction if the bean instance’s persistent data has
changed.link:#pgfId-1629739[12]_

====== [#50421764_pgfId-1433808]##Concurrent Access from Multiple Transactions

[#50421764_pgfId-1433809]##When writing the entity bean business
methods, the Bean Provider does not have to worry about concurrent
access from multiple transactions. The Bean Provider may assume that the
container will ensure appropriate
[#50421764_marker-1502959]##synchronization for entity objects that are
accessed concurrently from multiple transactions.

[#50421764_pgfId-1433811]##[#50421764_marker-1433810]##The container
typically uses one of the following implementation strategies to achieve
proper synchronization. (These strategies are illustrative, not
prescriptive.)

[#50421764_pgfId-1433812]##The container activates multiple instances of
the entity bean, one for each transaction in which the entity object is
being accessed. The transaction synchronization is performed by the
underlying database during the accessor method calls performed by the
business methods, the _ejbTimeout_ method, and by the _ejbLoad_ ,
_ejbCreate<METHOD>_ , _ejbStore_ , and _ejbRemove_ methods. The
commit-time options B and C in Subsection
link:Ejb.htm#50421764_48021[See Commit Options] apply to this type of
container.

======= [#50421764_pgfId-1433849]##

image:Ejb-5.gif[image]

Multiple Clients Can Access the Same Entity Object Using Multiple
Instances

image:Ejb-35.gif[image]

[#50421764_pgfId-1433850]##With this strategy, the type of lock acquired
by _ejbLoad_ or get accessor method (if a lazy loading cache management
strategy is used) leads to a trade-off. If _ejbLoad_ or the accessor
method acquires an exclusive lock on the instance's state in the
database, the throughput of read-only transactions could be impacted. If
_ejbLoad_ or the accessor method acquires a shared lock and the instance
is updated, then either _ejbStore_ or a set accessor method will need to
promote the lock to an exclusive lock (which may cause a deadlock if it
happens concurrently under multiple transactions), or, if the container
uses an optimistic cache concurrency control strategy, the container
will need to validate the state of the cache against the database at
transaction commit (which may result in a rollback of the transaction).

[#50421764_pgfId-1433852]##[#50421764_marker-1433851]##It is expected
that containers will provide deployment-time configuration options that
will allow control to be exercised over the logical transaction
isolation levels that their caching strategies provide.

[#50421764_pgfId-1433853]##The container acquires exclusive access to
the entity object’s state in the database. The container activates a
single instance and serializes the access from multiple transactions to
this instance. The commit-time option A in Subsection
link:Ejb.htm#50421764_48021[See Commit Options] applies to this type of
container.

======= [#50421764_pgfId-1433887]##

image:Ejb-5.gif[image]

Multiple Clients Can Access the Same Entity Object Using Single Instance

image:Ejb-36.gif[image]

====== [#50421764_pgfId-1477248]##[#50421764_85322]##Non-reentrant and Re-entrant Instances

[#50421764_pgfId-1477250]##[#50421764_marker-1477249]##An entity Bean
Provider can specify that an entity bean is non-reentrant. If an
instance of a non-reentrant entity bean executes a client request in a
given transaction context, and another request with the same transaction
context arrives for the same entity object, the container will throw an
exception to the second request. This rule allows the Bean Provider to
program the [#50421764_marker-1502960]##entity bean as single-threaded,
non-reentrant code.

[#50421764_pgfId-1477251]##The functionality of entity beans with
container-managed persistence may require loopbacks in the same
transaction context. An example of a loopback is when the client calls
entity object A, A calls entity object B, and B calls back A in the same
transaction context. The entity bean’s method invoked by the loopback
shares the current execution context (which includes the transaction and
security contexts) with the Bean’s method invoked by the client.

[#50421764_pgfId-1477252]##If the entity bean is specified as
non-reentrant in the deployment descriptor, the container must reject an
attempt to re-enter the instance via the entity bean’s component
interface while the instance is executing a business method. (This can
happen, for example, if the instance has invoked another enterprise
bean, and the other enterprise bean tries to make a
[#50421764_marker-1502962]##loopback call.) If the attempt is made to
reenter the instance through the remote interface, the container must
throw the _java.rmi.RemoteException_ to the caller. If the attempt is
made to reenter the instance through the local interface, the container
must throw the _javax.ejb.EJBException_ to the caller. The container
must allow the call if the Bean’s deployment descriptor specifies that
the entity bean is re-entrant.

[#50421764_pgfId-1477253]##Re-entrant [#50421764_marker-1502961]##entity
beans must be programmed and used with caution. First, the Bean Provider
must code the entity bean with the anticipation of a
[#50421764_marker-1502963]##loopback call. Second, since the container
cannot, in general, tell a loopback from a concurrent call from a
different client, the client programmer must be careful to avoid code
that could lead to a concurrent call in the same transaction context.

[#50421764_pgfId-1477254]##Concurrent calls in the same transaction
context targeted at the same entity object are illegal and may lead to
unpredictable results. Since the container cannot, in general,
distinguish between an illegal concurrent call and a legal loopback,
application programmers are encouraged to avoid using loopbacks. Entity
beans that do not need callbacks should be marked as non-reentrant in
the deployment descriptor, allowing the container to detect and prevent
illegal concurrent calls from clients.

==== [#50421764_pgfId-1433898]##Responsibilities of the Enterprise Bean Provider

image:Ejb-4.gif[image]

[#50421764_pgfId-1433899]##This section describes the responsibilities
of an entity Bean Provider to ensure that an entity bean with
container-managed persistence can be deployed in any EJB container.

====== [#50421764_pgfId-1433900]##Classes and Interfaces

[#50421764_pgfId-1433902]##[#50421764_marker-1433901]##The entity Bean
Provider is responsible for providing the following class files:

[#50421764_pgfId-1433903]##Entity bean class and any dependent classes

[#50421764_pgfId-1478854]##Primary key class

[#50421764_pgfId-1433904]##Entity bean’s remote interface and entity
bean’s remote home interface, if the entity bean provides a remote
client view

[#50421764_pgfId-1466714]##Entity bean’s local interface and local home
interface, if the entity bean provides a local client view

[#50421764_pgfId-1478857]##The Bean Provider must provide a remote
interface and a remote home interface or a local interface and a local
home interface for the bean. The Bean Provider may provide a remote
interface, remote home interface, local interface, and local home
interface for the bean. Other combinations are not allowed.

====== [#50421764_pgfId-1433907]##Enterprise Bean Class

[#50421764_pgfId-1433909]##[#50421764_marker-1433908]##The following are
the requirements for an entity bean class:

[#50421764_pgfId-1433911]##[#50421764_marker-1433910]##The class must
implement, directly or indirectly, the javax.ejb.EntityBean interface.

[#50421764_pgfId-1555359]##The class may implement, directly or
indirectly, the _javax.ejb.TimedObject_ interface.

[#50421764_pgfId-1433912]##The class must be defined as public and must
be abstract. The class must be a top level class.

[#50421764_pgfId-1433913]##The class must define a public constructor
that takes no arguments.

[#50421764_pgfId-1433914]##The class must not define the finalize()
method.

[#50421764_pgfId-1433918]##The class may, but is not required to,
implement the entity bean’s component interfacelink:#pgfId-1433917[13].
If the class implements the entity bean’s component interface, the class
must provide no-op implementations of the methods defined by that
interface. The container will never invoke these methods on the bean
instances at runtime.

[#50421764_pgfId-1433919]##The entity bean class must implement the
business methods, and the ejbCreate _<METHOD>_ and ejbPostCreate
_<METHOD>_ methods as described later in this section.

[#50421764_pgfId-1433920]##The entity bean class must implement the
ejbHome<METHOD> methods that correspond to the home business methods
specified in the bean’s home interface. These methods are executed on an
instance in the pooled state; hence they must not access state that is
particular to a specific bean instance (e.g., the accessor methods for
the bean’s abstract persistence schema must not be used by these
methods).

[#50421764_pgfId-1433921]##The entity bean class must implement the get
and set accessor methods of the bean’s abstract persistence schema as
_abstract_ methods.

[#50421764_pgfId-1461275]##The entity bean class may have superclasses
and/or superinterfaces. If the entity bean has superclasses, the
business methods, the ejbCreate _<METHOD>_ and ejbPostCreate _<METHOD>_
methods, and the methods of the EntityBean interface and/or the
_TimedObject_ interface may be implemented in the enterprise bean class
or in any of its superclasses.

[#50421764_pgfId-1433923]##The entity bean class is allowed to implement
other methods (for example helper methods invoked internally by the
business methods) in addition to the methods required by the EJB
specification.

[#50421764_pgfId-1433924]##The entity bean class does not implement the
finder methods. The implementations of the finder methods are provided
by the container.

[#50421764_pgfId-1433925]##The entity bean class must implement any
ejbSelect<METHOD> methods as abstract methods.

====== [#50421764_pgfId-1433936]##Dependent Value Classes

[#50421764_pgfId-1433938]##[#50421764_marker-1433937]##The following are
the requirements for a dependent value class:

[#50421764_pgfId-1433939]##The class must be defined as public and must
not be abstract.

[#50421764_pgfId-1433940]##The class must be serializable.

====== [#50421764_pgfId-1433941]##ejbCreate<METHOD> Methods

[#50421764_pgfId-1511475]##[#50421764_marker-1433942]##The entity bean
class must implement the ejbCreate<METHOD> methods that correspond to
the create<METHOD> methods specified in the entity bean’s home interface
or local home interface.

[#50421764_pgfId-1511463]##The entity bean class may define zero or more
ejbCreate<METHOD> methods whose signatures must follow these rules:

[#50421764_pgfId-1433944]##The method name must have ejbCreate as its
prefix.

[#50421764_pgfId-1433945]##The method must be declared as public.

[#50421764_pgfId-1433946]##The method must not be declared as final or
static.

[#50421764_pgfId-1433947]##The return type must be the entity bean’s
primary key type.

[#50421764_pgfId-1466720]##If the _ejbCreate<METHOD>_ method corresponds
to a _create<METHOD>_ on the entity bean’s remote home interface, the
method arguments and return value types must be legal types for
RMI-IIOP.

[#50421764_pgfId-1433949]##The _throws_ clause must define the
_javax.ejb.CreateException_ . The _throws_ clause may define arbitrary
application specific exceptions.

[#50421764_pgfId-1433950]##EJB 1.0 allowed the _ejbCreate_ method to
throw the java.rmi.RemoteException to indicate a non-application
exception. This practice was deprecated in EJB 1.1—an EJB 1.1 or EJB 2.0
or later compliant enterprise bean should throw the
_javax.ejb.EJBException_ or another _java.lang.RuntimeException_ to
indicate non-application exceptions to the container (see Section
link:Ejb.htm#50421764_33935[See System Exceptions]). The _ejbCreate_
method of an entity bean with cmp-version 2.x must not throw the
java.rmi.RemoteException..

====== [#50421764_pgfId-1433954]##ejbPostCreate<METHOD> Methods

[#50421764_pgfId-1433956]##[#50421764_marker-1433955]##For each
ejbCreate<METHOD> method, the entity bean class must define a matching
ejbPostCreate<METHOD> method, using the following rules:

[#50421764_pgfId-1433957]##The method name must have ejbPostCreate as
its prefix.

[#50421764_pgfId-1433958]##The method must be declared as public.

[#50421764_pgfId-1433959]##The method must not be declared as final or
static.

[#50421764_pgfId-1433960]##The return type must be _void_ .

[#50421764_pgfId-1433961]##The method arguments must be the same as the
arguments of the matching ejbCreate<METHOD> method.

[#50421764_pgfId-1433962]##The _throws_ clause may define arbitrary
application specific exceptions, including the
javax.ejb.CreateException.

[#50421764_pgfId-1433963]##EJB 1.0 allowed the _ejbPostCreate_ method to
throw the java.rmi.RemoteException to indicate a non-application
exception. This practice was deprecated in EJB 1.1—an EJB 1.1 or EJB 2.0
or later compliant enterprise bean should throw the
_javax.ejb.EJBException_ or another _java.lang.RuntimeException_ to
indicate non-application exceptions to the container (see Section
link:Ejb.htm#50421764_33935[See System Exceptions]). The _ejbPostCreate_
method of an entity bean with cmp-version 2.x must not throw the
java.rmi.RemoteException..

====== [#50421764_pgfId-1433967]##[#50421764_71108]##ejbHome<METHOD> Methods

[#50421764_pgfId-1433969]##[#50421764_marker-1433968]##The entity bean
class may define zero or more home methods whose signatures must follow
the following rules:

[#50421764_pgfId-1433970]##An _ejbHome<METHOD>_ method must exist for
every home _<METHOD>_ method on the entity bean’s remote home or local
home interface. The method name must have ejbHome as its prefix followed
by the name of the _<METHOD>_ method in which the first character has
been uppercased.

[#50421764_pgfId-1433971]##The method must be declared as public.

[#50421764_pgfId-1433972]##The method must not be declared as static.

[#50421764_pgfId-1433973]##If the _ejbHome<METHOD>_ method corresponds
to a home _<METHOD>_ on the entity bean’s remote home interface, the
method argument and return value types must be legal types for RMI-IIOP.

[#50421764_pgfId-1433974]##The _throws_ clause may define arbitrary
application specific exceptions. The _throws_ clause must not throw the
_java.rmi.RemoteException_ .

====== [#50421764_pgfId-1433975]##ejbSelect<METHOD> Methods

[#50421764_pgfId-1433977]##[#50421764_marker-1433976]##The entity bean
class may define one or more select methods whose signatures must follow
the following rules:

[#50421764_pgfId-1433978]##The method name must have ejbSelect as its
prefix.

[#50421764_pgfId-1433979]##The method must be declared as public.

[#50421764_pgfId-1433980]##The method must be declared as abstract.

[#50421764_pgfId-1433982]##The _throws_ clause must define the
_javax.ejb.FinderException_ . The _throws_ clause may define arbitrary
application specific exceptions.

====== [#50421764_pgfId-1511211]##Business Methods

[#50421764_pgfId-1433990]##[#50421764_marker-1433989]##The entity bean
class may define zero or more business methods whose signatures must
follow these rules:

[#50421764_pgfId-1433991]##The method names can be arbitrary, but they
must not start with ‘ _ejb_ ’ to avoid conflicts with the callback
methods used by the EJB architecture.

[#50421764_pgfId-1433992]##The business method must be declared as
public.

[#50421764_pgfId-1433993]##The method must not be declared as final or
static.

[#50421764_pgfId-1433994]##If the business method corresponds to a
method of the entity bean’s remote interface, the method argument and
return value types must be legal types for RMI-IIOP.

[#50421764_pgfId-1433995]##The _throws_ clause may define arbitrary
application specific exceptions.

[#50421764_pgfId-1433996]##EJB 1.0 allowed the business methods to throw
the java.rmi.RemoteException to indicate a non-application exception.
This practice was deprecated in EJB 1.1—an EJB 1.1 or EJB 2.0 or later
compliant enterprise bean should throw the _javax.ejb.EJBException_ or
another _java.lang.RuntimeException_ to indicate non-application
exceptions to the container (see Section link:Ejb.htm#50421764_33935[See
System Exceptions]).The business methods of an entity bean with
cmp-version 2.x must not throw the java.rmi.RemoteException.

====== [#50421764_pgfId-1434000]##Entity Bean’s Remote Interface

[#50421764_pgfId-1434002]##[#50421764_marker-1434001]##The following are
the requirements for the entity bean’s remote interface:

[#50421764_pgfId-1434004]##[#50421764_marker-1434003]##The interface
must extend the javax.ejb.EJBObject interface.

[#50421764_pgfId-1434006]##[#50421764_marker-1434005]##The methods
defined in the remote interface must follow the rules for RMI-IIOP. This
means that their argument and return value types must be valid types for
RMI-IIOP, and their _throws_ clauses must include the
java.rmi.RemoteException.

[#50421764_pgfId-1434007]##The remote interface is allowed to have
superinterfaces. Use of interface inheritance is subject to the RMI-IIOP
rules for the definition of remote interfaces.

[#50421764_pgfId-1434008]##For each method defined in the remote
interface, there must be a matching method in the entity bean’s class.
The matching method must have:

[#50421764_pgfId-1434009]##The same name.

[#50421764_pgfId-1434010]##The same number and types of its arguments,
and the same return type.

[#50421764_pgfId-1434011]##All the exceptions defined in the _throws_
clause of the matching method of the enterprise Bean class must be
defined in the _throws_ clause of the method of the remote interface.

[#50421764_pgfId-1555362]##The remote interface methods must not expose
local interface types, local home interface types, timer handles, or the
managed collection classes that are used for entity beans with
container-managed persistence as arguments or results.

====== [#50421764_pgfId-1434017]##Entity Bean’s Remote Home Interface

[#50421764_pgfId-1434019]##[#50421764_marker-1434018]##The following are
the requirements for the entity bean’s home interface:

[#50421764_pgfId-1434021]##[#50421764_marker-1434020]##The interface
must extend the javax.ejb.EJBHome interface.

[#50421764_pgfId-1434022]##The methods defined in this interface must
follow the rules for RMI-IIOP. This means that their argument and return
types must be of valid types for RMI-IIOP, and their _throws_ clauses
must include the java.rmi.RemoteException.

[#50421764_pgfId-1434023]##The remote home interface is allowed to have
superinterfaces. Use of interface inheritance is subject to the RMI-IIOP
rules for the definition of remote interfaces.

[#50421764_pgfId-1434024]##Each method defined in the remote home
interface must be one of the following:

[#50421764_pgfId-1434025]##A create method.

[#50421764_pgfId-1434026]##A finder method.

[#50421764_pgfId-1434027]##A home method.

[#50421764_pgfId-1434028]##Each create method must be named “
_create<METHOD>_ ”, e.g. createLargeAccounts. Each create method name
must match one of the ejbCreate<METHOD> methods defined in the
enterprise bean class. The matching ejbCreate<METHOD> method must have
the same number and types of its arguments. (Note that the return type
is different.)

[#50421764_pgfId-1434029]##The return type for a create<METHOD> method
must be the entity bean’s remote interface type.

[#50421764_pgfId-1434030]##All the exceptions defined in the _throws_
clause of the matching ejbCreate _<METHOD>_ and ejbPostCreate _<METHOD>_
methods of the enterprise bean class must be included in the _throws_
clause of the matching create method of the home interface (i.e., the
set of exceptions defined for the create method must be a superset of
the union of exceptions defined for the ejbCreate _<METHOD>_ and
ejbPostCreate _<METHOD>_ methods).

[#50421764_pgfId-1434031]##The _throws_ clause of a create _<METHOD>_
method must include the javax.ejb.CreateException.

[#50421764_pgfId-1434032]##Each finder method must be named “ _find_
<METHOD>” (e.g. findLargeAccounts).

[#50421764_pgfId-1434033]##The return type for a find<METHOD> method
must be the entity bean’s remote interface type (for a single-object
finder), or a collection thereof (for a multi-object finder).

[#50421764_pgfId-1434034]##The remote home interface must always include
the findByPrimaryKey method, which is always a single-object finder. The
method must declare the primary key class as the method argument.

[#50421764_pgfId-1434035]##The _throws_ clause of a finder method must
include the javax.ejb.FinderException.

[#50421764_pgfId-1482715]##Home methods can have arbitrary names, but
they must not start with “create”, “find”, or “ _remove_ ”. Their
argument and return types must be of valid types for RMI-IIOP, and their
_throws_ clauses must include the java.rmi.RemoteException. The matching
ejbHome method specified in the entity bean class must have the same
number and types of arguments and must return the same type as the home
method as specified in the remote home interface of the bean.

[#50421764_pgfId-1482718]##The remote home interface methods must not
expose local interface types, local home interface types, timers or
timer handles, or the managed collection classes that are used for
entity beans with container-managed persistence as arguments or results.

====== [#50421764_pgfId-1466782]##Entity Bean’s Local Interface

[#50421764_pgfId-1466784]##[#50421764_marker-1466783]##The following are
the requirements for the entity bean’s local interface:

[#50421764_pgfId-1466786]##[#50421764_marker-1466785]##The interface
must extend the javax.ejb.EJBLocalObject interface.

[#50421764_pgfId-1466790]##For each method defined in the local
interface, there must be a matching method in the entity bean’s class.
The matching method must have:

[#50421764_pgfId-1466791]##The same name.

[#50421764_pgfId-1466792]##The same number and types of its arguments,
and the same return type.

[#50421764_pgfId-1466793]##All the exceptions defined in the _throws_
clause of the matching method of the enterprise Bean class must be
defined in the _throws_ clause of the method of the local interface.

====== [#50421764_pgfId-1466873]##Entity Bean’s Local Home Interface

[#50421764_pgfId-1466875]##[#50421764_marker-1466874]##The following are
the requirements for the entity bean’s local home interface:

[#50421764_pgfId-1466877]##[#50421764_marker-1466876]##The interface
must extend the javax.ejb.EJBLocalHome interface.

[#50421764_pgfId-1466880]##Each method defined in the home interface
must be one of the following:

[#50421764_pgfId-1466881]##A create method.

[#50421764_pgfId-1466882]##A finder method.

[#50421764_pgfId-1468082]##A home method.

[#50421764_pgfId-1466884]##Each create method must be named “
_create<METHOD>_ ”, e.g. createLargeAccounts. Each create method name
must match one of the ejbCreate<METHOD> methods defined in the
enterprise bean class. The matching ejbCreate<METHOD> method must have
the same number and types of its arguments. (Note that the return type
is different.)

[#50421764_pgfId-1466885]##The return type for a create<METHOD> method
on the local home interface must be the entity bean’s local interface
type.

[#50421764_pgfId-1466886]##All the exceptions defined in the _throws_
clause of the matching ejbCreate _<METHOD>_ and ejbPostCreate _<METHOD>_
methods of the enterprise bean class must be included in the _throws_
clause of the matching create method of the local home interface (i.e.,
the set of exceptions defined for the create method must be a superset
of the union of exceptions defined for the ejbCreate _<METHOD>_ and
ejbPostCreate _<METHOD>_ methods).

[#50421764_pgfId-1466887]##The _throws_ clause of a create _<METHOD>_
method must include the javax.ejb.CreateException.

[#50421764_pgfId-1466888]##Each finder method must be named “ _find_
<METHOD>” (e.g. findLargeAccounts).

[#50421764_pgfId-1466889]##The return type for a find<METHOD> method
defined on the local home interface must be the entity bean’s local
interface type (for a single-object finder), or a collection thereof
(for a multi-object finder).

[#50421764_pgfId-1466890]##The local home interface must always include
the findByPrimaryKey method, which is always a single-object finder. The
method must declare the primary key class as the method argument.

[#50421764_pgfId-1466891]##The _throws_ clause of a finder method must
include the javax.ejb.FinderException.

[#50421764_pgfId-1468085]##Home methods can have arbitrary names, but
they must not start with “create”, “find”, or “ _remove_ ”. The matching
ejbHome method specified in the entity bean class must have the same
number and types of arguments and must return the same type as the home
method as specified in the home interface of the bean. The _throws_
clause of a home method defined on the local home interface must not
include the java.rmi.RemoteException.

====== [#50421764_pgfId-1434038]##[#50421764_68555]##Entity Bean’s Primary Key Class

[#50421764_pgfId-1434040]##[#50421764_marker-1434039]##The Bean Provider
must specify a primary key class in the deployment descriptor.

[#50421764_pgfId-1434042]##[#50421764_marker-1434041]##The primary key
type must be a legal Value Type in RMI-IIOP.

[#50421764_pgfId-1434043]##The class must provide suitable
implementation of the hashCode() and equals(Object other) methods to
simplify the management of the primary keys by the container.

====== [#50421764_pgfId-1434044]##Entity Bean’s Deployment Descriptor

[#50421764_pgfId-1434047]##The Bean Provider must specify the
relationships in which the entity beans participate in the
_relationships_ element.

[#50421764_pgfId-1434049]##The Bean Provider must provide unique names
to designate entity beans as follows, and as described in
link:Ejb.htm#50421764_59958[See The Bean Provider’s View of the
Deployment Descriptor].

[#50421764_pgfId-1434050]##The Bean Provider must specify unique names
for entity beans which are defined in the ejb-jar file by using the
ejb-name element.

[#50421764_pgfId-1434052]##The Bean Provider must specify a unique
abstract schema name for an entity bean using the _abstract-schema-name_
deployment descriptor element.

[#50421764_pgfId-1434058]##[#50421764_marker-1434057]##The Bean Provider
must define a query for each finder or select method except
_findByPrimaryKey(key)_ . Typically this will be provided as the content
of the ejb-ql element contained in the query element for the entity
bean. The syntax of EJB QL is defined in Chapter
link:Ejb.htm#50421764_22458[See EJB QL: EJB 2.1 Query Language for
Container-Managed Persistence Query Methods].

[#50421764_pgfId-1434062]##Since EJB QL query strings are embedded in
the deployment descriptor, which is an XML document, it may be necessary
to encode the following characters in the query string: “ _>_ ”, “ _<_
“.

==== [#50421764_pgfId-1434135]##The Responsibilities of the Container Provider

image:Ejb-4.gif[image]

[#50421764_pgfId-1434137]##[#50421764_marker-1434136]##This section
describes the responsibilities of the Container Provider to support
entity beans. The Container Provider is responsible for providing the
deployment tools, and for managing the entity beans at runtime,
including their persistent state and relationships.

[#50421764_pgfId-1434138]##Because the EJB specification does not define
the API between deployment tools and the container, we assume that the
deployment tools described in this section are provided by the Container
Provider. Alternatively, the deployment tools may be provided by a
different vendor who uses the container vendor’s specific API.

====== [#50421764_pgfId-1434139]##Generation of Implementation Classes

[#50421764_pgfId-1434141]##[#50421764_marker-1434140]##The deployment
tools provided by the Container Provider are responsible for the
generation of additional classes when the entity bean is deployed. The
tools obtain the information that they need for generation of the
additional classes by introspecting the classes and interfaces provided
by the Bean Provider and by examining the entity bean’s deployment
descriptor.

[#50421764_pgfId-1434142]##The deployment tools must generate the
following classes:

[#50421764_pgfId-1434143]##A class that implements the entity bean’s
remote home interface (i.e., the entity EJBHome class).

[#50421764_pgfId-1434144]##A class that implements the entity bean’s
remote interface (i.e., the entity EJBObject class).

[#50421764_pgfId-1466940]##A class that implements the entity bean’s
local home interface (i.e., the entity EJBLocalHome class).

[#50421764_pgfId-1466941]##A class that implements the entity bean’s
local interface (i.e., the EJBLocalObject class).

[#50421764_pgfId-1463582]##A class that implements the entity bean class
(i.e., a concrete class corresponding to the abstract entity bean class
that was provided by the Bean Provider).

[#50421764_pgfId-1434145]##The deployment tools may also generate a
class that mixes some container-specific code with the entity bean
class. The code may, for example, help the container to manage the
entity bean instances at runtime. Tools can use subclassing, delegation,
and code generation.

[#50421764_pgfId-1434146]##The deployment tools may also allow
generation of additional code that wraps the business methods and that
is used to customize the business logic for an existing operational
environment. For example, a wrapper for a debit function on the Account
bean may check that the debited amount does not exceed a certain limit,
or perform security checking that is specific to the operational
environment.

====== [#50421764_pgfId-1463470]##Enterprise Bean Class

[#50421764_pgfId-1463472]##[#50421764_marker-1463471]##The following are
the requirements for a concrete entity bean class:

[#50421764_pgfId-1481621]##The class must extend the abstract entity
bean class provided by the Bean Provider.

[#50421764_pgfId-1463474]##The class must be defined as public and must
not be abstract.

[#50421764_pgfId-1463476]##The class must define a public constructor
that takes no arguments.

[#50421764_pgfId-1463477]##The class must implement the get and set
accessor methods of the bean’s abstract persistence schema.

[#50421764_pgfId-1485175]##The class must not define the _finalize_
method.

[#50421764_pgfId-1488292]##The entity bean class must implement the
_ejbFind<METHOD>_ methods.

[#50421764_pgfId-1463482]##The entity bean class must implement the
_ejbSelect<METHOD>_ methods.

[#50421764_pgfId-1463484]##The entity bean class is allowed to implement
other methods in addition to the methods required by the EJB
specification.

====== [#50421764_pgfId-1488296]##ejbFind<METHOD> Methods

[#50421764_pgfId-1488297]##For each
[#50421764_marker-1502964]##find<METHOD> method in the remote home
interface or local home interface of the entity bean, there must be a
corresponding _ejbFind<METHOD>_ [#50421764_marker-1502965]## method with
the same argument types in the concrete entity bean class.

[#50421764_pgfId-1488298]##The method name must have ejbFind as its
prefix.

[#50421764_pgfId-1488299]##The method must be declared as public.

[#50421764_pgfId-1488300]##If the _ejbFind<METHOD>_ method corresponds
to a _find<METHOD>_ on the entity bean’s remote home interface, the
method argument and return value types must be legal types for RMI-IIOP.

[#50421764_pgfId-1488301]##The return type of an _ejbFind<METHOD>_
method must be the entity bean’s primary key type, or a collection of
primary keys.

[#50421764_pgfId-1488302]##The _throws_ clause must define the
_javax.ejb.FinderException_ [#50421764_marker-1502966]##. The _throws_
clause may define arbitrary application specific exceptions.

[#50421764_pgfId-1488303]##Every finder method except
_ejbFindByPrimaryKey(key)_ is specified in the _query_ deployment
descriptor element for the entity. The container must use the EJB QL
query string that is the content of the _ejb-ql_ element or the
descriptive query specification contained in the _description_ element
as the definition of the query of the corresponding ejbFind<METHOD>
method.

====== [#50421764_pgfId-1468142]##ejbSelect<METHOD> Methods

[#50421764_pgfId-1463545]##[#50421764_marker-1463544]##For each
ejbSelect<METHOD> method in the abstract entity bean class, there must
be a method with the same argument and result types in the concrete
entity bean class.

[#50421764_pgfId-1463546]##Every select method is specified in a _query_
deployment descriptor element for the entity. The container must use the
EJB QL query string that is the content of the _ejb-ql_ element or the
descriptive query specification that is contained in the _description_
element as the definition of the query of the corresponding
ejbSelect<METHOD>method.

[#50421764_pgfId-1463548]##The container must use the contents of the
_query_ element, the corresponding EJB QL string and the type of the
values selected as specified by the SELECT clause to determine the type
of the values returned by a select method.

[#50421764_pgfId-1463549]##The container must ensure that there are no
duplicates returned by a select method if the return type is
java.util.Set.

====== [#50421764_pgfId-1434147]##Entity EJBHome Class

[#50421764_pgfId-1434149]##[#50421764_marker-1434148]##The entity
EJBHome class, which is generated by deployment tools, implements the
entity bean’s remote home interface. This class implements the methods
of the javax.ejb.EJBHome interface, and the type-specific create and
finder methods specific to the entity bean.

[#50421764_pgfId-1434150]##The implementation of each create<METHOD>
method invokes a matching ejbCreate<METHOD> method, followed by the
matching ejbPostCreate<METHOD> method, passing the create<METHOD>
parameters to these matching methods.

[#50421764_pgfId-1434151]##The implementation of the remove methods
defined in the javax.ejb.EJBHome interface must activate an instance (if
an instance is not already in the ready state) and invoke the ejbRemove
method on the instance.

[#50421764_pgfId-1488307]##The implementation of each find<METHOD>
method invokes a matching ejbFind<METHOD> method. The implementation of
the find<METHOD> method must create an entity object reference for the
primary key returned from the ejbFind<METHOD> and return the entity
object reference to the client. If the ejbFind<METHOD> method returns a
collection of primary keys, the implementation of the find<METHOD>
method must create a collection of entity object references for the
primary keys and return the collection to the client.

[#50421764_pgfId-1434154]##The implementation of each <METHOD> home
method invokes a matching ejbHome<METHOD> method (in which the first
character of _<METHOD>_ is uppercased in the name of the ejbHome<METHOD>
method), passing the parameters of the <METHOD> method to the matching
ejbHome<METHOD>method.

====== [#50421764_pgfId-1434155]##Entity EJBObject Class

[#50421764_pgfId-1434157]##[#50421764_marker-1434156]##The entity
EJBObject class, which is generated by deployment tools, implements the
entity bean’s remote interface. It implements the methods of the
javax.ejb.EJBObject interface and the remote business methods specific
to the entity bean.

[#50421764_pgfId-1434158]##The implementation of the remove method
(defined in the javax.ejb.EJBObject interface) must activate an instance
(if an instance is not already in the ready state) and invoke the
ejbRemove method on the instance.

[#50421764_pgfId-1434159]##The implementation of each remote business
method must activate an instance (if an instance is not already in the
ready state) and invoke the matching business method on the instance.

====== [#50421764_pgfId-1466955]##Entity EJBLocalHome Class

[#50421764_pgfId-1466957]##[#50421764_marker-1466956]##The entity
EJBLocalHome class, which is generated by deployment tools, implements
the entity bean’s local home interface. This class implements the
methods of the javax.ejb.EJBLocalHome interface, and the type-specific
create and finder methods specific to the entity bean.

[#50421764_pgfId-1466958]##The implementation of each create<METHOD>
method invokes a matching ejbCreate<METHOD> method, followed by the
matching ejbPostCreate<METHOD> method, passing the create<METHOD>
parameters to these matching methods.

[#50421764_pgfId-1466959]##The implementation of the remove method
defined in the javax.ejb.EJBLocalHome interface must activate an
instance (if an instance is not already in the ready state) and invoke
the ejbRemove method on the instance.

[#50421764_pgfId-1488312]##The implementation of each find<METHOD>
method invokes a matching ejbFind<METHOD> method. The implementation of
the find<METHOD> method must create a local entity object reference for
the primary key returned from the ejbFind<METHOD> and return the local
entity object reference to the local client. If the ejbFind<METHOD>
method returns a collection of primary keys, the implementation of the
find<METHOD> method must create a collection of local entity object
references for the primary keys and return the collection to the local
client.

[#50421764_pgfId-1468179]##The implementation of each <METHOD> home
method invokes a matching ejbHome<METHOD> method (in which the first
character of _<METHOD>_ is uppercased in the name of the ejbHome<METHOD>
method), passing the parameters of the <METHOD> method to the matching
ejbHome<METHOD> method.

====== [#50421764_pgfId-1467003]##Entity EJBLocalObject Class

[#50421764_pgfId-1467005]##[#50421764_marker-1467004]##The entity
EJBLocalObject class, which is generated by deployment tools, implements
the entity bean’s local interface. It implements the methods of the
javax.ejb.EJBLocalObject interface and the local business methods
specific to the entity bean.

[#50421764_pgfId-1467006]##The implementation of the remove method
(defined in the javax.ejb.EJBLocalObject interface) must activate an
instance (if an instance is not already in the ready state) and invoke
the ejbRemove method on the instance.

[#50421764_pgfId-1467007]##The implementation of each local business
method must activate an instance (if an instance is not already in the
ready state) and invoke the matching business method on the instance.

====== [#50421764_pgfId-1434160]##Handle Class

[#50421764_pgfId-1434162]##[#50421764_marker-1434161]##The deployment
tools are responsible for implementing the handle class for the entity
bean. The handle class must be serializable by the Java Serialization
protocol.

[#50421764_pgfId-1434163]##As the handle class is not entity bean
specific, the container may, but is not required to, use a single class
for all deployed entity beans.

====== [#50421764_pgfId-1434164]##Home Handle Class

[#50421764_pgfId-1434166]##[#50421764_marker-1434165]##The deployment
tools responsible for implementing the [#50421764_marker-1502968]##home
handle class for the entity bean. The [#50421764_marker-1502967]##handle
class must be serializable by the Java Serialization protocol.

[#50421764_pgfId-1434167]##Because the home handle class is not entity
bean specific, the container may, but is not required to, use a single
class for the home handles of all deployed entity beans.

====== [#50421764_pgfId-1434168]##Metadata Class

[#50421764_pgfId-1434170]##[#50421764_marker-1434169]##The deployment
tools are responsible for implementing the class that provides metadata
information to the remote client view contract. The class must be a
valid RMI-IIOP Value Type, and must implement the javax.ejb.EJBMetaData
interface.

[#50421764_pgfId-1434171]##Because the metadata class is not entity bean
specific, the container may, but is not required to, use a single class
for all deployed enterprise beans.

====== [#50421764_pgfId-1434172]##Instance’s Re-entrance

[#50421764_pgfId-1434176]##The container runtime must enforce the rules
defined in Section link:Ejb.htm#50421764_85322[See Non-reentrant and
Re-entrant Instances].

====== [#50421764_pgfId-1434177]##Transaction Scoping, Security, Exceptions

[#50421764_pgfId-1434178]##The container runtime must follow the rules
on [#50421764_marker-1694711]##transaction scoping and
[#50421764_marker-1694712]##exception handling described in Chapters 9
and link:Ejb.htm#50421764_13750[See Exception Handling]. The container
runtime must follow the rules on [#50421764_marker-1694717]##security
checking described in the EJB Core Contracts and Requirements document
link:Ejb.htm#50421764_39461[See EJB 3.2 Core Contracts and Requirements.
http://jcp.org/en/jsr/detail?id=345] Chapter “Security Management”.

====== [#50421764_pgfId-1434188]##Implementation of Object References

[#50421764_pgfId-1434190]##[#50421764_marker-1434189]##The container
should implement the distribution protocol between the remote client and
the container such that the object references of the remote home and
remote interfaces used by entity bean clients are usable for a long
period of time. Ideally, a remote client should be able to use an object
reference across a server crash and restart. An object reference should
become invalid only when the entity object has been removed, or after a
reconfiguration of the server environment (for example, when the entity
bean is moved to a different EJB server or container).

[#50421764_pgfId-1434191]##The motivation for this is to simplify the
programming model for the entity bean client. While the client code
needs to have a recovery handler for the system exceptions thrown from
the individual method invocations on the remote home and remote
interface, the client should not be forced to re-obtain the object
references.

====== [#50421764_pgfId-1434192]##EntityContext

[#50421764_pgfId-1467173]##The container must implement the
[#50421764_marker-1502969]##EntityContext.getEJBObject method such that
the bean instance can use the Java language cast to convert the returned
value to the entity bean’s remote interface type. Specifically, the bean
instance does not have to use the PortableRemoteObject.narrow method for
the type conversion.[#50421764_marker-1467174]##

==== [#50421764_pgfId-1467182]##[#50421764_72199]##Primary Keys

image:Ejb-4.gif[image]

[#50421764_pgfId-1467185]##[#50421764_marker-1467184]##The container
must be able to manipulate the primary key type of an entity bean.
Therefore, the primary key type for an entity bean with
container-managed persistence must follow the rules in this subsection,
in addition to those specified in Subsection
link:Ejb.htm#50421764_68555[See Entity Bean’s Primary Key Class].

[#50421764_pgfId-1467189]##There are two ways to specify a primary key
class for an entity bean with container-managed persistence:

[#50421764_pgfId-1467190]##Primary key that maps to a single field in
the entity bean class.

[#50421764_pgfId-1467191]##Primary key that maps to multiple fields in
the entity bean class.

[#50421764_pgfId-1467192]##The second method is necessary for
implementing compound keys, and the first method is convenient for
single-field keys. Without the first method, simple types such as String
would have to be wrapped in a user-defined class.

====== [#50421764_pgfId-1467193]##Primary Key That Maps to a Single Field in the Entity Bean Class

[#50421764_pgfId-1467195]##[#50421764_marker-1467194]##The Bean Provider
uses the [#50421764_marker-1502970]##primkey-field element of the
deployment descriptor to specify the container-managed field of the
entity bean class that contains the primary key. The field’s type must
be the primary key type.

====== [#50421764_pgfId-1467196]##Primary Key That Maps to Multiple Fields in the Entity Bean Class

[#50421764_pgfId-1467198]##[#50421764_marker-1467197]##The primary key
class must be public, and must have a public constructor with no
parameters.

[#50421764_pgfId-1467199]##All fields in the primary key class must be
declared as public.

[#50421764_pgfId-1467200]##The names of the fields in the primary key
class must be a subset of the names of the container-managed fields.
(This allows the container to extract the primary key fields from an
instance’s container-managed fields, and vice versa.)

====== [#50421764_pgfId-1467202]##[#50421764_84543]##Special Case: Unknown Primary Key Class

[#50421764_pgfId-1467204]##[#50421764_marker-1467203]##In special
situations, the entity Bean Provider may choose not to specify the
primary key class or the primary key fields for an entity bean with
container-managed persistence. This case usually happens when the entity
bean does not have a natural primary key, and/or the Bean Provider wants
to allow the Deployer using the Container Provider’s tools to select the
primary key fields at deployment time. The entity bean’s primary key
type will usually be derived from the primary key type used by the
underlying database system that stores the entity objects. The primary
key used by the database system may not be known to the Bean Provider.

[#50421764_pgfId-1487698]##In this special case, the type of the
argument of the findByPrimaryKey method must be declared as
java.lang.Object. The Bean Provider must specify the primary key class
in the deployment descriptor as of the type java.lang.Object.

[#50421764_pgfId-1467205]##When defining the primary key for the
enterprise bean, the Deployer using the Container Provider’s tools will
typically add additional container-managed fields to the concrete
subclass of the entity bean class (this typically happens for entity
beans that do not have a natural primary key, and the primary keys are
system-generated by the underlying database system that stores the
entity objects). In this case, the container must generate the primary
key value when the entity bean instance is created (and before
_ejbPostCreate_ is invoked on the instance.)

[#50421764_pgfId-1467207]##The primary key class is specified at
deployment time in the situations when the Bean Provider develops an
entity bean that is intended to be used with multiple back-ends that
provide persistence, and when these multiple back-ends require different
primary key structures.

[#50421764_pgfId-1467208]##Use of entity beans with a deferred primary
key type specification limits the client application programming model,
because the clients written prior to deployment of the entity bean may
not use, in general, the methods that rely on the knowledge of the
primary key type.

[#50421764_pgfId-1467209]##The implementation of the enterprise bean
class methods must be done carefully. For example, the methods should
not depend on the type of the object returned from
_EntityContext.getPrimaryKey,_ because the return type is determined by
the Deployer after the EJB class has been written.

=== [#50421764_pgfId-1640549]##[#50421764_22458]##EJB QL: EJB 2.1 Query Language for Container-Managed Persistence Query Methods

[#50421764_pgfId-1640551]##[#50421764_marker-1640550]##The Enterprise
JavaBeans query language, EJB QL, is used to define queries for entity
beans with container-managed persistence. EJB QL enables the Bean
Provider to specify the semantics of query methods in a portable way.

[#50421764_pgfId-1642284]##This chapter provides the complete definition
of EJB QL that is required to be supported for use with EJB 2.1 entity
beans with container managed persistence. Implementations of this
specification are permitted, but not required, to provide the extensions
to EJB QL defined by the Java Persistence query language
link:Ejb.htm#50421764_29642[See Java™ Persistence API, version 2.1.
http://jcp.org/en/jsr/detail?id=338.] for use with finder and select
methods. Applications that make use of such extensions in finder and
select methods will not be portable.

==== [#50421764_pgfId-1640553]##[#50421764_78778]##Overview

image:Ejb-4.gif[image]

[#50421764_pgfId-1640555]##[#50421764_marker-1640554]##EJB QL is a query
specification language for the finder and select methods of entity beans
with container-managed persistence. EJB QL can be compiled to a target
language, such as SQL, of a database or other persistent store. This
allows the execution of queries to be shifted to the native language
facilities provided by the persistent store, instead of requiring
queries to be executed on the runtime representation of the entity
beans’ state. As a result, query methods can be optimizable as well as
portable.

[#50421764_pgfId-1640556]##The Enterprise JavaBeans query language uses
the abstract persistence schemas of entity beans, including their
relationships, for its data model. It defines operators and expressions
based on this data model.

[#50421764_pgfId-1640557]##The Bean Provider uses EJB QL to write
queries based on the abstract persistence schemas and the relationships
defined in the deployment descriptor. EJB QL depends on navigation and
selection __ based on the cmp-fields and cmr-fields of the related
entity beans. The Bean Provider can navigate from an entity bean to
other entity beans by using the names of cmr-fields in EJB QL queries.

[#50421764_pgfId-1640559]##[#50421764_marker-1640558]##EJB QL allows the
Bean Provider to use the abstract schema types of entity beans in a
query if the abstract persistence schemas of the beans are defined in
the same deployment descriptor as the query.

[#50421764_pgfId-1640560]##It is possible to parse and validate EJB QL
queries before entity beans are deployed because EJB QL is based on the
abstract schema types of entity beans.

[#50421764_pgfId-1640561]##EJB QL queries can be used in two different
ways:

[#50421764_pgfId-1640562]##as queries for selecting entity objects
through finder methods defined in the home interface. Finder methods
allow the results of an EJB QL query to be used by the clients of the
entity bean.

[#50421764_pgfId-1640563]##as queries for selecting entity objects or
other values derived from an entity bean’s abstract schema type through
select methods defined on the entity bean class. Select methods allow
the Bean Provider to use EJB QL to find objects or values related to the
state of an entity bean without directly exposing the results to the
client.

==== [#50421764_pgfId-1640564]##EJB QL Definition

image:Ejb-4.gif[image]

[#50421764_pgfId-1640565]##EJB QL uses a SQL-like syntax to select
objects or values based on the abstract schema types and relationships
of entity beans. The path expressions of EJB QL allow the Bean Provider
to navigate over relationships defined by the cmr-fields of the abstract
schema types of entity beans.

[#50421764_pgfId-1640566]##This chapter provides the full definition of
the language.

[#50421764_pgfId-1640568]##[#50421764_marker-1640567]##An EJB QL query
is a string which consists of the following clauses:

[#50421764_pgfId-1640570]##a [#50421764_marker-1640569]##SELECT clause,
which determines the type of the objects or values to be selected.

[#50421764_pgfId-1640572]##a [#50421764_marker-1640571]##FROM clause,
which provides declarations that designate the domain to which the
expressions specified in the SELECT clause and WHERE clause of the query
apply.

[#50421764_pgfId-1640574]##an optional [#50421764_marker-1640573]##WHERE
clause, which may be used to restrict the results that are returned by
the query.

[#50421764_pgfId-1640575]##an optional ORDER BY clause, which may be
used to order the results that are returned by the query.

[#50421764_pgfId-1640576]##In BNF syntax, an EJB QL query is defined as:

{empty}[#50421764_pgfId-1640577]##EJB QL :: = select_clause from_clause
[where_clause] [orderby_clause]

[#50421764_pgfId-1640579]##[#50421764_marker-1640578]##An EJB QL query
must always have a SELECT and a FROM clause. The square brackets []
indicate that the WHERE and ORDER BY clauses are optional.

[#50421764_pgfId-1640580]##An EJB QL query may have parameters that
correspond to the parameters of the finder or select method for which it
is defined.

[#50421764_pgfId-1640581]##An EJB QL query is statically defined in the
_ejb-ql_ deployment descriptor element.

====== [#50421764_pgfId-1640583]##[#50421764_marker-1640582]##[#50421764_32279]##Abstract Schema Types and Query Domains

[#50421764_pgfId-1640585]##EJB QL is a typed language whose design is
based on the type model of EJB 2.0 container-managed persistence. Every
expression in EJB QL has a type. The type of the expression is derived
from the structure of the expression; the abstract schema types of the
identification variable declarations; the types to which the cmp-fields
and cmr-fields evaluate; and the types of literals. The allowable types
in EJB QL are the abstract schema types of entity beans and cmp-fields.

[#50421764_pgfId-1640586]##The abstract schema type of an entity bean is
derived from its entity bean class and the information provided in the
deployment descriptor. There is a one-to-one mapping between entity bean
abstract schema types and entity bean homes. Abstract schema names, as
specified by the _abstract-schema-name_ elements in the deployment
descriptor, are used to denote entity bean abstract schema types in EJB
QL.

[#50421764_pgfId-1640587]##Informally, the abstract schema type of an
entity bean can be characterized as follows:

[#50421764_pgfId-1640588]## _For every get accessor method of the entity
bean class that corresponds to a_ _cmp-field element in the deployment
descriptor, there is a field (“cmp-field”) whose abstract schema type
corresponds to the result type of the accessor method._

[#50421764_pgfId-1640589]## _For every get accessor method of the entity
bean that corresponds to a_ _cmr-field_ _element in the deployment
descriptor, there is a field (“cmr-field”) whose type is the abstract
schema type of the entity bean denoted by the ejb-name element contained
in the corresponding ejb-relationship-role element (or, if the role has
a multiplicity of Many, a collection of such)._

[#50421764_pgfId-1640590]##Abstract schema types are specific to the EJB
QL data model. The container is not required to implement or otherwise
materialize an abstract schema type.

[#50421764_pgfId-1640592]##[#50421764_marker-1640591]##[#50421764_marker-1640593]##The
domain of an EJB QL query consists of the abstract schema types of all
entity beans with container-managed persistence that are defined in the
same deployment descriptor.

[#50421764_pgfId-1640594]##The Bean Provider creates an ejb-jar file
which contains a deployment descriptor describing several entity beans
and their relationships. EJB QL assumes that a single deployment
descriptor in an ejb-jar file constitutes a nondecomposable unit for the
container responsible for implementing the abstract persistence schemas
of the entity beans and the relationships defined in the deployment
descriptor and the ejb-jar file. Queries can be written by utilizing
navigation over the cmr-fields of related beans supplied in the same
ejb-jar by the Bean Provider because they are implemented and managed by
the same container.

[#50421764_pgfId-1640596]##[#50421764_marker-1640595]##The domain of a
query may be restricted by the _navigability_ of the relationships of
the entity bean on which it is based. The cmr-fields of an entity bean’s
abstract schema type determine navigability. Using the cmr-fields and
their values, a query can select related entity beans and use their
abstract schema types in the query.

====== [#50421764_pgfId-1640597]##Query Methods

[#50421764_pgfId-1640598]##EJB QL is used for two types of query
methods:

[#50421764_pgfId-1640600]##[#50421764_marker-1640599]##Finder
methods—Finder methods are defined in the home interface(s) of an entity
bean and return entity objects or local entity objects. A finder method
that is defined on the remote home interface must return either an
EJBObject or a collection of EJBObjects; a finder method that is defined
on the local home interface must return either an EJBLocalObject or a
collection of EJBLocalObjects. The result type of a finder method
defined on the remote home interface of an entity bean is the entity
bean’s remote interface (or a collection of objects implementing the
entity bean’s remote interface). The result type of a finder method
defined on the local home interface of an entity bean is the entity
bean’s local interface (or a collection of objects implementing the
entity bean’s local interface).

[#50421764_pgfId-1640602]##[#50421764_marker-1640601]##Select
methods—Select methods are a special type of query method not directly
exposed through the client view. The Bean Provider typically uses select
methods to select the persistent state of an entity object or to select
entities that are related to the entity bean for which the query is
defined. The result type of a select method can be an EJBLocalObject (or
a collection of EJBLocalObjects), an EJBObject (or a collection of
EJBObjects), a cmp-field value (or a collection of such), or the result
of an aggregate function.

====== [#50421764_pgfId-1640604]##[#50421764_56138]##Naming

[#50421764_pgfId-1640606]##[#50421764_marker-1640605]##Entity beans are
designated in EJB QL query strings by their abstract schema names.
[#50421764_marker-1640607]##The Bean Provider assigns unique abstract
schema names to entity beans as part of the development process so that
they can be used within queries. These unique names are scoped within
the deployment descriptor file.

====== [#50421764_pgfId-1640609]##[#50421764_94337]##Examples

[#50421764_pgfId-1640610]##The following convention refers to the names
used for entity beans in subsequent examples: An entity bean as a whole
is designated by _<name>EJB,_ and its entity bean class and abstract
schema type are designated by _<name>_ , following the convention used
to name the local interface of an entity bean.

[#50421764_pgfId-1640611]##The first example assumes that the Bean
Provider provides several entity beans, _OrderEJB_ , _ProductEJB_ ,
_LineItemEJB_ , _ShippingAddressEJB_ , and _BillingAddressEJB_ . The
abstract schema types for these entity beans are _Order_ , _Product_ ,
_LineItem_ , _ShippingAddress_ , and _BillingAddress_ respectively.
These beans are logically in the same ejb-jar file, as shown in
link:Ejb.htm#50421764_90483[See Several Entity Beans with Abstract
Persistence Schemas Defined in the Same Ejb-jar File.]. Only two of the
entity beans, OrderEJB and ProductEJB, have remote interfaces and remote
home interfaces.

======= [#50421764_pgfId-1640654]##

image:Ejb-5.gif[image]

[#50421764_90483]##Several Entity Beans with Abstract Persistence
Schemas Defined in the Same Ejb-jar File.

image:Ejb-37.gif[image]

[#50421764_pgfId-1640655]##The entity beans _ShippingAddress_ and
_BillingAddress_ each have one-to-many relationships with _Order_ .
There is also a one-to-many relationship between _Order_ and _Lineitem_
. The entity bean _LineItem_ is related to _Product_ in a many-to-one
relationship.

[#50421764_pgfId-1640656]##EJB QL allows the Bean Provider to specify
finder queries for OrderEJB by navigating over the cmr-fields and
cmp-fields defined by _Order_ and _LineItem_ . A finder method query to
find all orders with pending line items might be written as follows:

[#50421764_pgfId-1640657]## SELECT DISTINCT OBJECT(o)

[#50421764_pgfId-1640658]## _FROM Order AS o, IN(o.lineItems) AS l_

[#50421764_pgfId-1640659]## _WHERE l.shipped = FALSE_

[#50421764_pgfId-1640660]##This query navigates over the cmr-field
_lineItems_ of the abstract schema type _Order_ to find line items, and
uses the cmp-field _shipped_ of _LineItem_ to select those orders that
have at least one line item that has not yet shipped. (Note that this
query does not select orders that have no line items.)

[#50421764_pgfId-1640661]##Although predefined reserved identifiers,
such as DISTINCT, OBJECT, FROM, AS, IN, WHERE, and FALSE appear in upper
case in this example, predefined reserved identifiers are case
insensitive.

[#50421764_pgfId-1640662]##The SELECT clause of this example designates
the return type of this query to be of type Order. If this query is
defined for a finder method on the entity bean’s remote home interface,
the finder method will return objects of the entity bean’s remote
interface type corresponding to the abstract schema type instances
selected by the query. If this same query is defined for a finder method
on the entity bean’s local home interface, the finder method will return
objects of the entity bean’s local interface type corresponding to these
same abstract schema type instances. Finder methods must always return
EJBObjects or EJBLocalObjects of the bean type for which the query
method is defined.

[#50421764_pgfId-1640663]##Because the same deployment descriptor
defines the abstract persistence schemas of the related entity beans,
the Bean Provider can also specify a query for _OrderEJB_ that utilizes
the abstract schema type of _ProductEJB_ , and hence the cmp-fields and
cmr-fields of both the abstract schema types _Order_ and _Product_ . For
example, if the abstract schema type _Product_ has a cmp-field named
_product_type_ , a finder query for _OrderEJB_ can be specified using
this cmp-field. Such a finder query might be: “Find all orders for
products with product type office supplies”. An EJB QL query string for
this might be as follows.

[#50421764_pgfId-1640664]## SELECT DISTINCT OBJECT(o)

[#50421764_pgfId-1640665]## FROM Order o, IN(o.lineItems) l

[#50421764_pgfId-1640666]## WHERE l.product.product_type = _‘_
office_supplies’

[#50421764_pgfId-1640667]##Because _Order_ is related to _Product_ by
means of the relationships between _Order_ and _LineItem_ and between
_LineItem_ and _Product_ , navigation using the cmr-fields _lineItems_
and _product_ is needed to express the query. This query is specified by
using the _abstract-schema-name_ for _OrderEJB_ , namely _Order_ , which
designates the abstract schema type over which the query ranges. The
basis for the navigation is provided by the cmr-fields _lineItems_ and
_product_ of the abstract schema types Order and LineItem respectively.

====== [#50421764_pgfId-1640668]##The FROM Clause and Navigational Declarations

[#50421764_pgfId-1640670]##[#50421764_marker-1640669]##The FROM clause
of an EJB QL query defines the domain of the query by declaring
[#50421764_marker-1640671]##identification variables. The
[#50421764_marker-1640672]##domain of the query may be constrained by
path expressions.

[#50421764_pgfId-1640673]##Identification variables designate instances
of a particular entity bean abstract schema type. The FROM clause can
contain multiple identification variable declarations separated by a
comma ( _,_ ).

[#50421764_pgfId-1640674]##from_clause ::= _FROM_
identification_variable_declaration +
[, identification_variable_declaration]* +
identification_variable_declaration ::= collection_member_declaration
| +
range_variable_declaration +
collection_member_declaration ::= _IN_
(collection_valued_path_expression) [ _AS_ ] identifier

[#50421764_pgfId-1640675]##range_variable_declaration ::
abstract_schema_name [ _AS_ ] identifier

[#50421764_pgfId-1640676]##The following subsections discuss the
constructs used in the FROM clause.

====== [#50421764_pgfId-1640678]##[#50421764_23167]##Identifiers

[#50421764_pgfId-1640680]##[#50421764_marker-1640679]##[#50421764_marker-1640681]##An
identifier is a character sequence of unlimited length. The character
sequence must begin with a Java identifier start character, and all
other characters must be Java identifier part characters. An identifier
start character is any character for which the method
_Character.isJavaIdentifierStart_ returns true. This includes the
underscore ( ___ ) character and the dollar sign ( _$_ ) character. An
identifier part character is any character for which the method
_Character.isJavaIdentifierPart_ returns true. The
[#50421764_marker-1640682]##question mark ( _?_ ) character is reserved
for use by EJB QL.

[#50421764_pgfId-1640683]##The following are the reserved identifiers in
EJB QL: SELECT, FROM, WHERE, _DISTINCT_ , _OBJECT, NULL_ , _TRUE_ ,
_FALSE_ , _NOT_ , _AND_ , _OR_ , _BETWEEN_ , _LIKE_ , _IN_ , _AS_ ,
UNKNOWNlink:#pgfId-1640686[14], EMPTY, MEMBER, OF, _IS, AVG, MAX, MIN,
SUM, COUNT, ORDER, BY, ASC, DESC, MOD_ .

[#50421764_pgfId-1640687]##Reserved identifiers are case insensitive.
Reserved identifiers must not be used as identification variables.

[#50421764_pgfId-1640688]##It is recommended that the Bean Provider not
use other SQL reserved words as identification variables in EJB QL
queries because they may be used as EJB QL reserved identifiers in
future versions of the EJB specification.

====== [#50421764_pgfId-1640690]##[#50421764_48402]##Identification Variables

[#50421764_pgfId-1640692]##[#50421764_marker-1640691]##An identification
variable is a valid identifier declared in the
[#50421764_marker-1640693]##FROM clause of an EJB QL query. An
identification variable may be declared using the special operators IN
and, optionally, AS.

[#50421764_pgfId-1640694]##All identification variables must be declared
in the FROM clause. Identification variables cannot be declared in other
clauses.

[#50421764_pgfId-1640695]##An identification variable must not be a
reserved identifier or have the same name as any of the following:

[#50421764_pgfId-1640696]##abstract-schema-name

{empty}[#50421764_pgfId-1640700]##ejb-namelink:#pgfId-1640699[15]

[#50421764_pgfId-1640701]##Identification variables are case
insensitive.

[#50421764_pgfId-1640702]##An identification variable evaluates to a
value of the type of the expression used in declaring the variable. For
example, consider the previous finder query for OrderEJB:

[#50421764_pgfId-1640703]##SELECT DISTINCT OBJECT(o)

[#50421764_pgfId-1640704]##FROM Order o, IN(o.lineItems) l

[#50421764_pgfId-1640705]##WHERE l.product.product_type =
‘office_supplies’

[#50421764_pgfId-1640706]##In the FROM clause declaration
_IN(o.lineItems) l_ , __ the identification variable _l_ evaluates to
any LineItem value directly reachable from Order. The cmr-field
_lineItems_ is a collection of instances of the abstract schema type
LineItem and the identification variable _l_ refers to an element of
this collection. The type of _l_ is the abstract schema type of
_LineItem_ .

[#50421764_pgfId-1640707]##An identification variable ranges over the
abstract schema type of an entity bean. An identification variable
designates an instance of an entity bean abstract schema type or an
element of a collection of entity bean abstract schema types instances.
Identification variables are existentially quantified in an EJB QL
query.

[#50421764_pgfId-1640709]##[#50421764_marker-1640708]##An identification
variable always designates a reference to a single value. It is declared
in one of two ways; as a range variable or as a collection member
identification variable:

[#50421764_pgfId-1640710]##A range variable is declared using the
abstract schema name of an entity bean.

[#50421764_pgfId-1640711]##A collection member identification variable
is declared using a collection-valued path expression.

[#50421764_pgfId-1640712]##The identification variable declarations are
evaluated from left to right in the FROM clause. A collection member
identification variable declaration can use the result of a preceding
identification variable declaration of the query string.

====== [#50421764_pgfId-1640713]##Range Variable Declarations

[#50421764_pgfId-1640715]##[#50421764_marker-1640714]##The EJB QL syntax
for declaring an identification variable as a range variable is similar
to that of SQL; optionally, it uses the AS keyword.

[#50421764_pgfId-1640716]##range_variable_declaration ::=
abstract_schema_name [ _AS_ ] identifier

[#50421764_pgfId-1640717]##Objects or values that are related to an
entity bean are typically obtained by navigation using path expressions.
However, navigation does not reach all objects. Range variable
declarations allow the Bean Provider to designate a “root” for objects
which may not be reachable by navigation.

[#50421764_pgfId-1640718]##If the Bean Provider wants to select values
by comparing more than one instance of an entity bean abstract schema
type, more than one identification variable ranging over the abstract
schema type is needed in the FROM clause.

[#50421764_pgfId-1640719]##The following finder method query returns
orders whose quantity is greater than the order quantity for John Smith.
This example illustrates the use of two different identification
variables in the FROM clause, both of the abstract schema type Order.
The SELECT clause of this query determines that it is the orders with
quantities larger than John Smith’s that are returned.

[#50421764_pgfId-1640720]##SELECT DISTINCT OBJECT(o1)

[#50421764_pgfId-1640721]##FROM Order o1, Order o2

[#50421764_pgfId-1640722]##WHERE o1.quantity > o2.quantity AND

[#50421764_pgfId-1640723]## o2.customer.lastname = ‘Smith’ AND

[#50421764_pgfId-1640724]## o2.customer.firstname= ‘John’

[#50421764_pgfId-1640725]## 

====== [#50421764_pgfId-1640726]##Collection Member Declarations

[#50421764_pgfId-1640728]##[#50421764_marker-1640727]##An identification
variable declared by a collection_member_declaration ranges over values
of a collection obtained by navigation using a path expression. Such a
path expression represents a navigation involving the cmr-fields of an
entity bean abstract schema type. Because a path expression can be based
on another path expression, the navigation can use the cmr-fields of
related entity beans. Path expressions are discussed in
link:Ejb.htm#50421764_77253[See Path Expressions].

[#50421764_pgfId-1640732]##An identification variable of a collection
member declaration is declared using a special operator, the reserved
identifier IN. The argument to the [#50421764_marker-1640733]##IN
operator is a collection-valued path expression. The path expression
evaluates to a collection type specified as a result of navigation to a
collection-valued cmr-field of an entity bean abstract schema type.

[#50421764_pgfId-1640734]##The syntax for declaring a collection member
identification variable is as follows:

[#50421764_pgfId-1640735]##collection_member_declaration ::= _IN (_
collection_valued_path_expression _)_ [AS] identifier

[#50421764_pgfId-1640736]##For example, the FROM clause for a query
defined for _OrderEJB_ might contain the following collection member
declaration:

[#50421764_pgfId-1640737]##IN(o.lineItems) l

[#50421764_pgfId-1640738]##In this example, lineItems is the name of a
cmr-field whose value is a collection of instances of the abstract
schema type LineItem of the LineItemEJB entity bean. The identification
variable _l_ designates a member of this collection, a single LineItem
abstract schema type instance. In this example, _o_ is an identification
variable of the abstract schema type Order.

====== [#50421764_pgfId-1640739]##Example

[#50421764_pgfId-1640740]##The following FROM clause contains two
identification variable declaration clauses. The identification variable
declared in the first clause is used in the second clause. The clauses
declare the variables _o_ and _l_ respectively. The range variable
declaration _Order_ AS o designates the identification variable _o_ as a
range variable whose type is the abstract schema type, Order. The
identification variable _l_ has the abstract schema type _LineItem_ .
Because the clauses are evaluated from left to right, the identification
variable _l_ can utilize the results of the navigation on _o_ .

[#50421764_pgfId-1640741]## FROM Order AS o, IN(o.lineItems) l

====== [#50421764_pgfId-1640743]##[#50421764_77253]##Path Expressions

[#50421764_pgfId-1640745]##[#50421764_marker-1640744]##An identification
variable followed by the navigation operator ( _._ ) and a cmp-field or
cmr-field is a path expression. The type of the path expression is the
type computed as the result of navigation; that is, the type of the
cmp-field or cmr-field to which the expression navigates.

[#50421764_pgfId-1640746]##Depending on navigability, a path expression
that leads to a cmr-field may be further composed. Path expressions can
be composed from other path expressions if the original path expression
evaluates to a single-valued type (not a collection) corresponding to a
cmr-field. A path expression that ends in a cmp-field is terminal and
cannot be further composed.

[#50421764_pgfId-1640747]##Path expression navigability is composed
using “inner join” semantics. That is, if the value of a non-terminal
cmr-field in the path expression is null, the path is considered to have
no value, and does not participate in the determination of the result.

[#50421764_pgfId-1640748]##The syntax for single-valued path expressions
and collection valued path expressions is as follows:

[#50421764_pgfId-1640749]##cmp_path_expression ::=

[#50421764_pgfId-1640750]## \{identification_variable |
single_valued_cmr_path_expression}.cmp_field

[#50421764_pgfId-1640751]##single_valued_cmr_path_expression ::=

[#50421764_pgfId-1640752]##
identification_variable.[single_valued_cmr_field
.]*single_valued_cmr_field

[#50421764_pgfId-1640753]##single_valued_path_expression ::=

[#50421764_pgfId-1640754]## cmp_path_expression |
single_valued_cmr_path_expression

[#50421764_pgfId-1640755]##collection_valued_path_expression ::=

[#50421764_pgfId-1640756]##
identification_variable.[single_valued_cmr_field.]*collection_valued_cmr_field

[#50421764_pgfId-1640758]##A _single_valued_cmr_field_
[#50421764_marker-1640757]## is designated by the name of a cmr-field in
a one-to-one or many-to-one relationship. The type of a
_single_valued_cmr_path_expression_ is the abstract schema type of the
related entity bean.

[#50421764_pgfId-1640760]##A _collection_valued_cmr_field_
[#50421764_marker-1640759]## is designated by the name of a cmr-field in
a one-to-many or a many-to-many relationship. The type of a
_collection_valued_cmr_field_ is a collection of values of the abstract
schema type of the related entity bean.

[#50421764_pgfId-1640761]##Navigation to a related entity bean results
in a value of the related entity bean’s abstract schema type.

[#50421764_pgfId-1640762]##The evaluation of a path expression
terminating in a cmp-field results in the abstract schema type
corresponding to the Java type designated by the cmp-field.

[#50421764_pgfId-1640763]##It is syntactically illegal to compose a path
expression from a path expression that evaluates to a collection. For
example, if o designates Order, the path expression o.lineItems.product
is illegal since navigation to _lineItems_ results in a collection. This
case should produce an error when the EJB QL query string is verified.
To handle such a navigation, an identification variable must be declared
in the FROM clause to range over the elements of the _lineItems_
collection. Another path expression must be used to navigate over each
such element in the WHERE clause of the query, as in the following:

[#50421764_pgfId-1640764]##SELECT OBJECT(o)

[#50421764_pgfId-1640765]##FROM Order AS o, IN(o.lineItems) l

[#50421764_pgfId-1640766]##WHERE l.product.name = ‘widget’

[#50421764_pgfId-1640767]## 

====== [#50421764_pgfId-1640768]##WHERE Clause and Conditional Expressions

[#50421764_pgfId-1640770]##[#50421764_marker-1640769]##The WHERE clause
of a query consists of a conditional expression used to select objects
or values that satisfy the expression. The WHERE clause thus restricts
the result of a query.

[#50421764_pgfId-1640771]##A WHERE clause is defined as follows:

[#50421764_pgfId-1640772]##where_clause ::= _WHERE_
conditional_expression

[#50421764_pgfId-1640773]##The following sections describe the language
constructs that can be used in a conditional expression of the WHERE
clause.

====== [#50421764_pgfId-1640774]##Literals

[#50421764_pgfId-1640776]##[#50421764_marker-1640775]##A string literal
is enclosed in single quotes—for example: ‘literal’. A string literal
that includes a single quote is represented by two single quotes—for
example: ‘literal’’s’. EJB QL string literals, like Java _String_
literals, use unicode character encoding.

[#50421764_pgfId-1640778]##An exact [#50421764_marker-1640777]##numeric
literal is a numeric value without a decimal point, such as 57, -957,
+62. Exact numeric literals support numbers in the range of Java _long_
. Exact numeric literals use the Java integer literal syntax.

[#50421764_pgfId-1640780]##An approximate
[#50421764_marker-1640779]##numeric literal is a numeric value in
scientific notation, such as 7E3, -57.9E2, or a numeric value with a
decimal, such as 7., -95.7, +6.2. Approximate numeric literals support
numbers in the range of Java _double_ . Approximate literals use the
Java floating point literal syntax.

[#50421764_pgfId-1640781]##The Bean Provider may utilize appropriate
suffixes to indicate the specific type of the literal in accordance with
the Java Language Specification.

[#50421764_pgfId-1640783]##The [#50421764_marker-1640782]##boolean
literals are _TRUE_ and _FALSE_ .

[#50421764_pgfId-1640784]##Although predefined reserved literals appear
in upper case, they are case insensitive.

====== [#50421764_pgfId-1640785]##Identification Variables

[#50421764_pgfId-1640787]##[#50421764_marker-1640786]##All
identification variables used in the WHERE clause of an EJB QL query
must be declared in the FROM clause, as described in
link:Ejb.htm#50421764_48402[See Identification Variables].

[#50421764_pgfId-1640792]##Identification variables are existentially
quantified in the [#50421764_marker-1640791]##WHERE clause. This means
that an identification variable represents a member of a collection or
an instance of an entity bean’s abstract schema type. An identification
variable never designates a collection in its entirety.

====== [#50421764_pgfId-1640793]##Path Expressions

[#50421764_pgfId-1640795]##[#50421764_marker-1640794]##It is illegal to
use a _collection_valued_path_expression_ within a WHERE clause as part
of a conditional expression except in an
_empty_collection_comparison_expression or collection_member_expression_
.

====== [#50421764_pgfId-1640796]##Input Parameters

[#50421764_pgfId-1640798]##[#50421764_marker-1640797]##The following
rules apply to input parameters. Input parameters can only be used in
the [#50421764_marker-1640799]##WHERE clause of a query.

[#50421764_pgfId-1640800]##Input parameters are designated by the
question mark ( _?_ ) prefix followed by an integer. For example: _?1_ .

[#50421764_pgfId-1640801]##Input parameters are numbered starting from
1.

[#50421764_pgfId-1640802]##The number of distinct input parameters in an
EJB QL query must not exceed the number of input parameters for the
finder or select method. It is not required that the EJB QL query use
all of the input parameters for the finder or select method.

[#50421764_pgfId-1640803]##An input parameter evaluates to the abstract
schema type of the corresponding parameter defined in the signature of
the finder or select method with which the query is associated. It is
the responsibility of the container to map the input parameter to the
appropriate abstract schema type value.

[#50421764_pgfId-1640804]##Note that if an input parameter value is
null, comparison operations or arithmetic operations involving the input
parameter will return an unknown value. See
link:Ejb.htm#50421764_47150[See Null Values].

====== [#50421764_pgfId-1640808]##Conditional Expression Composition

[#50421764_pgfId-1640810]##[#50421764_marker-1640809]##Conditional
expressions are composed of other conditional expressions, comparison
operations, logical operations, path expressions that evaluate to
boolean values, and boolean literals.

[#50421764_pgfId-1640812]##[#50421764_marker-1640811]##Arithmetic
expressions can be used in comparison expressions. Arithmetic
expressions are composed of other arithmetic expressions, arithmetic
operations, path expressions that evaluate to numeric values, and
numeric literals.

[#50421764_pgfId-1640813]##Arithmetic operations use numeric promotion.

[#50421764_pgfId-1640814]##Standard bracketing _()_ for ordering
expression evaluation is supported.

[#50421764_pgfId-1640815]##Conditional expressions are defined as
follows:

[#50421764_pgfId-1640816]##conditional_expression ::= conditional_term |
conditional_expression _OR_ conditional_term +
conditional_term ::= conditional_factor | conditional_term _AND_
conditional_factor +
conditional_factor ::= [ _NOT_ ] conditional_primary +
conditional_primary ::= simple_cond_expression |
(conditional_expression) +
simple_cond_expression ::= comparison_expression | between_expression |
like_expression | +
in_expression | null_comparison_expression | +
empty_collection_comparison_expression |

[#50421764_pgfId-1640817]## collection_member_expression

====== [#50421764_pgfId-1640818]##Operators and Operator Precedence

[#50421764_pgfId-1640820]##[#50421764_marker-1640819]##The operators are
listed below in order of decreasing precedence.

[#50421764_pgfId-1640821]##Navigation operator ( _._ )

[#50421764_pgfId-1640822]##Arithmetic operators:

[#50421764_pgfId-1640823]##+, - unary

[#50421764_pgfId-1640824]##*, / multiplication and division

[#50421764_pgfId-1640825]##+, - addition and subtraction

[#50421764_pgfId-1640826]##Comparison operators : _=_ , _>_ , _>=_ , _<_
, _<=_ , _<>_ (not equal)

[#50421764_pgfId-1640827]##Logical operators: _NOT_ , _AND_ , _OR_

[#50421764_pgfId-1640828]##The following sections describe other
operators used in specific expressions.

====== [#50421764_pgfId-1640829]##Between _Expressions_

[#50421764_pgfId-1640831]## _The syntax for the use of the comparison
operator [NOT] BETWEEN in an conditional expression is as follows:_
[#50421764_marker-1640830]##[#50421764_marker-1640832]##

[#50421764_pgfId-1640833]## _arithmetic_expression_ [ _NOT_ ] _BETWEEN_
_arithmetic-expression_ _AND_ _arithmetic-expression_

[#50421764_pgfId-1640834]##The BETWEEN expression

[#50421764_pgfId-1640835]##x BETWEEN y AND z

[#50421764_pgfId-1640836]##is semantically equivalent to:

[#50421764_pgfId-1640837]##y <= x AND x <= z

[#50421764_pgfId-1640841]##The rules for unknown and NULL values in
comparison operations apply. See link:Ejb.htm#50421764_47150[See Null
Values].

[#50421764_pgfId-1640842]##Examples are:

[#50421764_pgfId-1640843]## _p.age BETWEEN 15 and 19_ is equivalent to
_p.age >= 15 AND p.age <= 19_

[#50421764_pgfId-1640844]## _p.age NOT BETWEEN 15 and 19_ is equivalent
to _p.age < 15 OR p.age > 19_

====== [#50421764_pgfId-1640845]##In Expressions

[#50421764_pgfId-1640847]##[#50421764_marker-1640846]##The syntax for
the use of the comparison operator [NOT] IN in a conditional expression
is as follows:

[#50421764_pgfId-1640848]## _cmp_path_expression_ [ _NOT_ ] _IN_ (
\{literal | input_parameter} _[_ , \{ _literal | input_parameter}]*_ )

[#50421764_pgfId-1640849]##The _cmp_path_expression_ __ must have a
string or numeric value. The literal and/or input_parameter values must
be _like_ the same abstract schema type of the cmp_path_expression in
type. (See link:Ejb.htm#50421764_39501[See Equality and Comparison
Semantics]).

[#50421764_pgfId-1640853]##Examples are:

[#50421764_pgfId-1640854]## _o.country IN (’UK’, ’US’, ’France’)_ is
true for _UK_ and false for _Peru_ , and is equivalent to the expression
_(o.country = ’UK’) OR (o.country = ’US’) OR (o.country = ’ France’)_ .

[#50421764_pgfId-1640855]## _o.country NOT IN (’UK’, ’US’, ’France’)_ is
false for _UK_ and true for _Peru_ , and is equivalent to the expression
_NOT ((o.country = ’UK’) OR (o.country = ’US’) OR (o.country =
’France’))_ .

[#50421764_pgfId-1640856]##There must be at least one element in the
comma separated list that defines the set of values for the _IN_
expression.

[#50421764_pgfId-1640857]##If the value of a _cmp_path_expression_ in an
IN or NOT IN expression is _NULL_ or unknown, the value of the
expression is unknown.

====== [#50421764_pgfId-1640858]##Like _Expressions_

[#50421764_pgfId-1640860]## _The syntax for the use of the comparison
operator [NOT] LIKE in a conditional expression is as follows:_
[#50421764_marker-1640859]##

{empty}[#50421764_pgfId-1640861]## _cmp_path_expression_ [ _NOT_ ]
_LIKE_ _pattern_value_ [ _ESCAPE_ _escape_character_ ]

[#50421764_pgfId-1640862]##The _cmp_path_expression_ must have a string
value. The _pattern_value_ is a string literal or a string-valued input
parameter in which an underscore ( ___ ) stands for any single
character, a percent ( _%_ ) character stands for any sequence of
characters (including the empty sequence), and all other characters
stand for themselves. The optional _escape_character_ __ is a
single-character string literal or a character-valued input parameter
(i.e., _char_ or _Character_ ) and is used to escape the special meaning
of the underscore and percent characters in _pattern_value_
_.link:#pgfId-1640868[16]_

[#50421764_pgfId-1640869]##Examples are:

[#50421764_pgfId-1640870]## _address.phone LIKE ‘12%3’_ is true for
‘123’ ‘12993’ and false for ‘1234’

[#50421764_pgfId-1640871]## _asentence.word LIKE ‘l_se’_ is true for
‘lose’ and false for ‘loose’

[#50421764_pgfId-1640872]## _aword.underscored LIKE ‘\_%’ ESCAPE ‘\’_ is
true for ‘_foo’ and false for ‘bar’

[#50421764_pgfId-1640873]## _address.phone NOT LIKE ‘12%3’_ is false for
‘123’ and ‘12993’ and true for ‘1234’

[#50421764_pgfId-1640874]##If _the value of the_ _cmp_path_expression_
or _pattern_value_ is _NULL_ or unknown, the value of the LIKE
expression is unknown. If the _escape_character_ is specified and is
_NULL_ , the value of the LIKE expression is unknown.

====== [#50421764_pgfId-1640875]##Null Comparison Expressions

[#50421764_pgfId-1640877]##[#50421764_marker-1640876]##The syntax for
the use of the comparison operator IS NULL in a conditional expression
is as follows:

[#50421764_pgfId-1640878]##\{single_valued_path_expression |
input_parameter } _IS_ [ _NOT_ ] _NULL_ __

[#50421764_pgfId-1640879]##A null comparison expression tests whether or
not the single-valued path expression or input parameter is a _NULL_
value.

====== [#50421764_pgfId-1640881]##[#50421764_64226]##Empty Collection Comparison Expressions

[#50421764_pgfId-1640883]##[#50421764_marker-1640882]##The syntax for
the use of the comparison operator IS EMPTY in an
_empty_collection_comparison_expression_ is as follows:

[#50421764_pgfId-1640884]##collection_valued_path_expression _IS_ [
_NOT_ ] _EMPTY_

[#50421764_pgfId-1640885]##This expression tests whether or not the
collection designated by the collection-valued path expression is empty
(i.e, has no elements).

[#50421764_pgfId-1640886]##Note that a collection-valued path expression
can only be used in the WHERE clause in an empty collection comparison
expression or in a collection member expression.

[#50421764_pgfId-1640888]##The collection designated by the
[#50421764_marker-1640887]##collection-valued path expression used in an
empty collection comparison expression must not be used in the FROM
clause for the declaration of an identification variable. An
identification variable declared as a member of a collection implicitly
designates the existence of a non-empty relationship; testing whether
the same collection is empty is contradictory. Therefore, the following
query is invalid.

[#50421764_pgfId-1640889]##SELECT OBJECT(o)

[#50421764_pgfId-1640890]##FROM Order o, IN(o.lineItems) l

[#50421764_pgfId-1640891]##WHERE o.lineItems IS EMPTY

[#50421764_pgfId-1640892]##If the value of the collection-valued path
expression in an empty collection comparison expression is unknown, the
value of the empty comparison expression is unknown.

====== [#50421764_pgfId-1640893]##Collection Member Expressions

[#50421764_pgfId-1640895]##[#50421764_marker-1640894]##The syntax for
the use of the comparison operator MEMBER OFlink:#pgfId-1640898[17] in
an _collection_member_expression_ is as follows:

[#50421764_pgfId-1640899]##\{single_valued_cmr_path_expression |
identification_variable | input_parameter }

[#50421764_pgfId-1640900]## _[NOT] MEMBER [OF]_
collection_valued_path_expression

[#50421764_pgfId-1640901]##This expression tests whether the designated
value is a member of the collection specified by the collection-valued
path expression.

[#50421764_pgfId-1640902]##Note that a collection-valued path expression
can only be used in the WHERE clause in an empty collection comparison
expression or in a collection member expression.

[#50421764_pgfId-1640903]##If the collection valued path expression
designates an empty collection, the value of the MEMBER OF expression is
FALSE and the value of the NOT MEMBER OF expression is TRUE. Otherwise,
if the value of the [#50421764_marker-1640904]##collection-valued path
expression or single-valued cmr path expression in the collection member
expression is unknown, the value of the collection member expression is
unknown.

====== [#50421764_pgfId-1640905]##Functional Expressions

[#50421764_pgfId-1640907]##[#50421764_marker-1640906]##EJB QL includes
the following built-in functionslink:#pgfId-1640910[18], which may be
used in the WHERE clause of a query.

[#50421764_pgfId-1640914]##String Functions:

[#50421764_pgfId-1640915]## _CONCAT(String, String)_ returns a _String_

[#50421764_pgfId-1640916]## _SUBSTRING(String, start, length)_ returns a
_String_

[#50421764_pgfId-1640920]## _LOCATE(String, String [,
start])link:#pgfId-1640919[19]_ returns an _int_

[#50421764_pgfId-1640921]## _LENGTH(String)_ returns an _int_

[#50421764_pgfId-1640922]##Note that _start_ and _length_ are integer
values. The first position in a string is designated as _1_ by these
functions.

[#50421764_pgfId-1640923]##Arithmetic Functions:

[#50421764_pgfId-1640924]## _ABS(number)_ returns a number ( _int_ ,
_float_ , or _double_ ) of the same type as the argument to the function

[#50421764_pgfId-1640925]## _SQRT(double)_ returns a _double_

[#50421764_pgfId-1640926]## _MOD(int, int)_ returns an _int_

[#50421764_pgfId-1640927]##Numeric arguments to these functions may
correspond to the numeric Java object types as well as the primitive
numeric types.

[#50421764_pgfId-1640928]##If the value of any argument to a functional
expression is null or unknown, the value of the functional expression is
unknown.

====== [#50421764_pgfId-1640930]##[#50421764_99507]##SELECT Clause

[#50421764_pgfId-1640932]##[#50421764_marker-1640931]##The SELECT clause
denotes the query result. The SELECT clause contains either a single
range variable that ranges over an entity bean abstract schema type, a
single-valued path expression, or an aggregate select expression. In the
case of a finder method, the SELECT clause is restricted to contain
either a single range variable or a single-valued path expression that
evaluates to the abstract schema type of the entity bean for which the
finder method is defined.

[#50421764_pgfId-1640933]##The SELECT clause has the following syntax:

[#50421764_pgfId-1640934]##select_clause ::= _SELECT_ [ _DISTINCT_ ]
\{select_expression | _OBJECT_ (identification_variable)}

[#50421764_pgfId-1640935]## 

[#50421764_pgfId-1640936]##select_expression ::=
single_valued_path_expression | aggregate_select_expression

[#50421764_pgfId-1640937]##aggregate_select_expression ::=

[#50421764_pgfId-1640938]## \{ _AVG_ | _MAX_ | _MIN_ | _SUM_ | _COUNT_
_}_ _(_ [ _DISTINCT_ ] cmp_path_expression _)_ |

[#50421764_pgfId-1640939]## _COUNT (_ [ _DISTINCT_ ]
identification_variable | single_valued_cmr_path_expression _)_

[#50421764_pgfId-1640940]## 

[#50421764_pgfId-1640942]##All standalone identification variables in
the SELECT clause must be qualified by the
[#50421764_marker-1640941]##OBJECT operator. The SELECT clause must not
use the OBJECT operator to qualify path expressions.

[#50421764_pgfId-1640943]##Note that the SELECT clause must be specified
to return a single-valued expression. The query below is therefore not
valid:

[#50421764_pgfId-1640944]## _SELECT o.lineItems FROM Order AS o_

[#50421764_pgfId-1640946]##The [#50421764_marker-1640945]##DISTINCT
keyword is used to specify that duplicate values must be eliminated from
the query result. If DISTINCT is not specified, duplicate values are not
eliminated unless the query is specified for a method whose result type
is _java.util.Set._ If a query is specified for a method whose result
type is _java.util.Set_ , but does not specify DISTINCT, the container
must interpret the query as if [#50421764_marker-1640947]##SELECT
DISTINCT had been specified. In general, however, the Bean Provider
should specify the DISTINCT keyword when writing queries for methods
that return _java.util.Set_ .

[#50421764_pgfId-1640948]##The SELECT clause determines the type of the
values returned by a query. For example, the following query returns a
collection of products:

[#50421764_pgfId-1640949]##SELECT l.product FROM Order AS o,
IN(o.lineItems) l

[#50421764_pgfId-1640950]##It is the responsibility of the container to
map the abstract schema types returned by the query to the Java types
that are returned by the finder or select method with which the query is
associated and to materialize those return types, as described in
link:Ejb.htm#50421764_79675[See Return Value Types].

====== [#50421764_pgfId-1640955]##[#50421764_18696]##Null Values in the Query Result

[#50421764_pgfId-1640956]##If the result of an EJB QL query corresponds
to a cmr-field or cmp-field whose value is null, the container must
include that null value in the result that is returned by the finder or
select method. The Bean Provider can use the IS NOT NULL construct to
eliminate such null values from the result set of the query.

[#50421764_pgfId-1640957]##If the finder or select method is a
single-object finder or select method, and the result set of the query
consists of a single null value, the container must return the null
value as the result of the method. If the result set of a query for a
single-object finder or select method contains more than one value
(whether non-null, null, or a combination), the container must throw the
FinderException.

[#50421764_pgfId-1640958]##Note, however, that cmp-field types defined
in terms of Java numeric primitive types cannot produce NULL values in
the query result. An EJB QL query that returns such a cmp-field type as
a result type must not return a null value. (If the Bean Provider wishes
to allow null values for cmp-fields, he or she should specify those
cmp-fields to have the equivalent Java object types instead of primitive
types, e.g., _Integer_ rather than _int_ .)

====== [#50421764_pgfId-1640959]##Aggregate Functions in the SELECT Clause

[#50421764_pgfId-1640960]##The result of an EJB QL query may be the
result of an aggregate function applied to a path expression.

[#50421764_pgfId-1640961]##The following aggregate functions can be used
in the SELECT clause of an EJB QL query: AVG, COUNT, MAX, MIN, SUM.

[#50421764_pgfId-1640962]##For all aggregate functions except COUNT, the
path expression that is the argument to the aggregate function must
terminate in a cmp-field. The path expression argument to COUNT may
terminate in either a cmp-field or a cmr-field, or the argument to COUNT
may be an identification variable.

[#50421764_pgfId-1640963]##Arguments to the functions SUM and AVG must
be numeric. Arguments to the functions MAX and MIN must correspond to
orderable cmp-field types (i.e., numeric types, string types, character
types, or date types).

{empty}[#50421764_pgfId-1640964]##The argument to an aggregate function
may be preceded by the keyword DISTINCT to specify that duplicate values
are to be eliminated before the aggregate function is
applied.link:#pgfId-1640967[20]

[#50421764_pgfId-1640968]##Null values are eliminated before the
aggregate function is applied, regardless of whether the keyword
DISTINCT is specified.

====== [#50421764_pgfId-1640969]##Examples

[#50421764_pgfId-1640970]##The following example returns all line items
related to some order:

[#50421764_pgfId-1640971]##SELECT OBJECT(l)

[#50421764_pgfId-1640972]##FROM Order o, IN(o.lineItems) l

[#50421764_pgfId-1640973]##The following query returns all line items
regardless of whether a line item is related to any order or product:

[#50421764_pgfId-1640974]##SELECT OBJECT(l)

[#50421764_pgfId-1640975]##FROM LineItems AS l

[#50421764_pgfId-1640976]##The following query returns the average order
quantity:

[#50421764_pgfId-1640977]##SELECT AVG(o.quantity)

[#50421764_pgfId-1640978]##FROM Order o

[#50421764_pgfId-1640979]##The following query returns the total cost of
the items that John Smith has ordered.

[#50421764_pgfId-1640980]##SELECT SUM(l.price)

[#50421764_pgfId-1640981]##FROM Order o, IN(o.lineItems) l

[#50421764_pgfId-1640982]##WHERE o.customer.lastname = ‘Smith’ AND
o.customer.firstname = ‘John’

[#50421764_pgfId-1640983]##The following query returns the number of
items in John Smith’s entire order.

[#50421764_pgfId-1640984]##SELECT COUNT(l)

[#50421764_pgfId-1640985]##FROM Order o, IN(o.lineItems) l

[#50421764_pgfId-1640986]##WHERE o.customer.lastname = ‘Smith’ AND
o.customer.firstname = ‘John’

[#50421764_pgfId-1640987]## 

[#50421764_pgfId-1640988]##The following query returns the total number
of orders.

[#50421764_pgfId-1640989]##SELECT COUNT(o)

[#50421764_pgfId-1640990]##FROM Order o

[#50421764_pgfId-1640991]##The following query counts the number of
items in John Smith’s order for which prices have been specified.

[#50421764_pgfId-1640992]##SELECT COUNT(l.price)

[#50421764_pgfId-1640993]##FROM Order o, IN(o.lineItems) l

[#50421764_pgfId-1640994]##WHERE o.customer.lastname = ‘Smith’ AND
o.customer.firstname = ‘John’

[#50421764_pgfId-1640995]##Note that this is equivalent to:

[#50421764_pgfId-1640996]##SELECT COUNT(l)

[#50421764_pgfId-1640997]##FROM Order o, IN(o.lineItems) l

[#50421764_pgfId-1640998]##WHERE o.customer.lastname = ‘Smith’ AND
o.customer.firstname = ‘John’

[#50421764_pgfId-1640999]##AND l.price IS NOT NULL

====== [#50421764_pgfId-1641000]##ORDER BY Clause

[#50421764_pgfId-1641001]##The ORDER BY clause allows the objects or
values that are returned by the query to be ordered.

[#50421764_pgfId-1641002]##The syntax of the ORDER BY clause is

[#50421764_pgfId-1641003]##orderby_clause ::= _ORDER BY_ orderby_item [,
orderby_item]*

{empty}[#50421764_pgfId-1641004]##orderby_item ::= cmp_path_expression
[ASC | DESC]

[#50421764_pgfId-1641005]##When the ORDER BY clause is used in an EJB QL
query, the SELECT clause of the query must be one of the following:

[#50421764_pgfId-1641006]##an identification variable x, denoted as
OBJECT(x)

[#50421764_pgfId-1641007]##a _single_valued_cmr_path_expression_

[#50421764_pgfId-1641008]##a _cmp_path_expression_

[#50421764_pgfId-1641009]##In the first two cases, each _orderby_item_
must be an orderable cmp-field of the entity bean abstract schema type
value returned by the SELECT clause. In the third case, the
_orderby_item_ must evaluate to the same cmp-field of the same entity
bean abstract schema type as the _cmp_path_expression_ in the SELECT
clause.

[#50421764_pgfId-1641010]##For example, the first two queries below are
legal, but the third and fourth are not.

[#50421764_pgfId-1641011]##SELECT OBJECT(o)

[#50421764_pgfId-1641012]##FROM Customer c, IN(c.orders) o

[#50421764_pgfId-1641013]##WHERE c.address.state = ‘CA’

[#50421764_pgfId-1641014]##ORDER BY o.quantity, o.totalcost

[#50421764_pgfId-1641015]## 

[#50421764_pgfId-1641016]##SELECT o.quantity

[#50421764_pgfId-1641017]##FROM Customer c, IN(c.orders) o

[#50421764_pgfId-1641018]##WHERE c.address.state = ‘CA’

[#50421764_pgfId-1641019]##ORDER BY o.quantity

[#50421764_pgfId-1641020]## 

[#50421764_pgfId-1641021]##SELECT l.product.product_name

[#50421764_pgfId-1641022]##FROM Order o, IN(o.lineItems) l

[#50421764_pgfId-1641023]##WHERE o.customer.lastname = ‘Smith’ AND
o.customer.firstname = ‘John’

[#50421764_pgfId-1641024]##ORDER BY l.product.price

[#50421764_pgfId-1641025]## 

[#50421764_pgfId-1641026]## 

[#50421764_pgfId-1641027]##SELECT l.product.product_name

[#50421764_pgfId-1641028]##FROM Order o, IN(o.lineItems) l

[#50421764_pgfId-1641029]##WHERE o.customer.lastname = ‘Smith’ AND
o.customer.firstname = ‘John’

[#50421764_pgfId-1641030]##ORDER BY o.quantity

[#50421764_pgfId-1641031]##If more than one _orderby_item_ is specified,
the left-to-right sequence of the _orderby_item_ elements determines the
precedence, whereby the leftmost _orderby_item_ has highest precedence.

[#50421764_pgfId-1641032]##The keyword ASC specifies that ascending
ordering be used; the keyword DESC specifies that descending ordering be
used. Ascending ordering is the default.

[#50421764_pgfId-1641033]##SQL rules for the ordering of null values
apply: that is, all null values must appear before all non-null values
in the ordering or all null values must appear after all non-null values
in the ordering, but it is not specified which.

[#50421764_pgfId-1641034]##It is the container’s responsibility to
ensure that the ordering of the query result is preserved in the result
of the finder or select method if the ORDER BY clause is used.

====== [#50421764_pgfId-1641036]##[#50421764_79675]##Return Value Types

[#50421764_pgfId-1641038]##The value of a query result, specified by the
SELECT clause, is an entity bean [#50421764_marker-1641037]##abstract
schema type, a cmp-field type, or the result of an aggregate function.
The finder or select method with which the query is associated in the
deployment descriptor determines how this result is mapped to the Java
type that is visible as the result of the query method.

[#50421764_pgfId-1641040]##How the [#50421764_marker-1641039]##result
type of a query is mapped depends on whether the query is defined for a
finder method on the remote home interface, for a finder method on the
local home interface, or for a select method.

[#50421764_pgfId-1641041]##The result type of a query for a finder
method must be the entity bean abstract schema type that corresponds to
the entity bean type of the entity bean on whose home interface the
finder method is defined. If the query is used for a finder method
defined on the remote home interface of the bean, the result of the
finder method is the entity bean’s remote interface (or a collection of
objects implementing the entity bean’s remote interface). If the finder
method is defined on the local home interface, the result is the entity
bean’s local interface (or a collection of objects implementing the
entity bean’s local interface).

[#50421764_pgfId-1641042]##If the result type of a query for a select
method is an entity bean abstract schema type, the return values for the
query method are instances of the entity bean’s local interface or
instances of the entity bean’s remote interface, depending on whether
the value of the _result-type-mapping_ [#50421764_marker-1641043]##
deployment descriptor element contained in the _query_ element for the
select method is _Local_ or _Remote_ . The default value for
_result-type-mapping_ is _Local_ .

[#50421764_pgfId-1641044]##If the result type of a query used for a
select method is an abstract schema type corresponding to a cmp-field
type (excluding queries whose SELECT clause uses one of the aggregate
functions AVG, COUNT, MAX, MIN, SUM), the result type of the select
method is as follows:

[#50421764_pgfId-1641045]##If the Java type of the cmp-field is an
object type and the select method is a single-object select method, the
result of the select method is an instance of that object type. If the
select method is a multi-object select method, the result is a
collection of instances of that type.

[#50421764_pgfId-1641046]##If the Java type of the cmp-field is a
primitive Java type (e.g., int), and the select method is a
single-object select method, the result of the select method is that
primitive type.

[#50421764_pgfId-1641047]##If the Java type of the cmp-field is a
primitive Java type (e.g., int), and the select method is a multi-object
select method, the result of the select method is a collection of values
of the corresponding wrappered type (e.g., Integer).

[#50421764_pgfId-1641048]##If the select method query is an aggregate
query, the select method must be a single-object select method.

[#50421764_pgfId-1641049]##The result type of the select method must be
a primitive type, a wrappered type, or an object type that is compatible
with the standard JDBC conversion mappings for the type of the cmp-field
link:Ejb.htm#50421764_15305[See JDBC™ 4.1 API (JDBC specification).
http://jcp.org/en/jsr/detail?id=221.].

[#50421764_pgfId-1641053]##If the aggregate query uses the SUM, AVG,
MAX, or MIN operator, and the result type of the select method is an
object type and there are no values to which the aggregate function can
be applied, the select method returns null.

[#50421764_pgfId-1641054]##If the aggregate query uses the SUM, AVG,
MAX, or MIN operator, and the result type of the select method is a
primitive type and there are no values to which the aggregate function
can be applied, the container must throw the _ObjectNotFoundException_ .

[#50421764_pgfId-1641055]##If the aggregate query uses the COUNT
operator, the result of the select method should be an exact numeric
type. If there are no values to which the COUNT method can be applied,
the result of the select method is 0.

[#50421764_pgfId-1641056]##The result of a finder or select method may
contain a null value if a cmp-field or cmr-field in the query result is
null.

====== [#50421764_pgfId-1641058]##[#50421764_47150]##Null Values

[#50421764_pgfId-1641060]##[#50421764_marker-1641059]##When the target
of a reference does not exist in the persistent store, its value is
regarded as _NULL_ . SQL 92 _NULL_ semantics
link:Ejb.htm#50421764_35665[See Database Language SQL. ANSI X3.135-1992
or ISO/IEC 9075:1992.] defines the evaluation of conditional expressions
containing _NULL_ values.

[#50421764_pgfId-1641064]##The following is a brief description of these
semantics:

[#50421764_pgfId-1641065]##Comparison or arithmetic operations with a
NULL value always yield an unknown value.

[#50421764_pgfId-1641066]##Two NULL values are not considered to be
equal, the comparison yields an unknown value.

[#50421764_pgfId-1641067]##Comparison or arithmetic operations with an
unknown value always yield an unknown value.

[#50421764_pgfId-1641068]##The IS NULL and IS NOT NULL operators convert
a _NULL_ cmp-field or single-valued cmr-field value into the respective
TRUE or FALSE value.

[#50421764_pgfId-1641121]##Boolean operators use three valued logic,
defined by link:Ejb.htm#50421764_53509[See Definition of the AND
Operator], link:Ejb.htm#50421764_90364[See Definition of the OR
Operator], and link:Ejb.htm#50421764_59567[See Definition of the NOT
Operator].

======= [#50421764_pgfId-1641082]##

image:Ejb-5.gif[image]

[#50421764_53509]##Definition of the [#50421764_marker-1641081]##AND
Operator

[#50421764_pgfId-1641090]##AND

[#50421764_pgfId-1641092]## T

[#50421764_pgfId-1641094]## F

[#50421764_pgfId-1641096]## U

[#50421764_pgfId-1641098]## T

[#50421764_pgfId-1641100]## T

[#50421764_pgfId-1641102]## F

[#50421764_pgfId-1641104]## U

[#50421764_pgfId-1641106]## F

[#50421764_pgfId-1641108]## F

[#50421764_pgfId-1641110]## F

[#50421764_pgfId-1641112]## F

[#50421764_pgfId-1641114]## U

[#50421764_pgfId-1641116]## U

[#50421764_pgfId-1641118]## F

[#50421764_pgfId-1641120]## U

[#50421764_pgfId-1641165]## 

== [#50421764_pgfId-1641126]##

image:Ejb-5.gif[image]

[#50421764_90364]##Definition of the [#50421764_marker-1641125]##OR
Operator

[#50421764_pgfId-1641134]##OR

[#50421764_pgfId-1641136]## T

[#50421764_pgfId-1641138]## F

[#50421764_pgfId-1641140]## U

[#50421764_pgfId-1641142]## T

[#50421764_pgfId-1641144]## T

[#50421764_pgfId-1641146]## T

[#50421764_pgfId-1641148]## T

[#50421764_pgfId-1641150]## F

[#50421764_pgfId-1641152]## T

[#50421764_pgfId-1641154]## F

[#50421764_pgfId-1641156]## U

[#50421764_pgfId-1641158]## U

[#50421764_pgfId-1641160]## T

[#50421764_pgfId-1641162]## U

[#50421764_pgfId-1641164]## U

[#50421764_pgfId-1641189]## 

== [#50421764_pgfId-1641170]##

image:Ejb-5.gif[image]

[#50421764_59567]##Definition of the [#50421764_marker-1641169]##NOT
Operator

[#50421764_pgfId-1641174]##NOT

[#50421764_pgfId-1641176]##  

[#50421764_pgfId-1641178]## T

[#50421764_pgfId-1641180]## F

[#50421764_pgfId-1641182]## F

[#50421764_pgfId-1641184]## T

[#50421764_pgfId-1641186]## U

[#50421764_pgfId-1641188]## U

[#50421764_pgfId-1641191]##Note: EJB QL defines the
[#50421764_marker-1641190]##empty string, ‘’, as a string with 0 length,
which is not equal to a NULL value. However, NULL values and empty
strings may not always be distinguished when queries are mapped to some
persistent stores. The Bean Provider should therefore not rely on the
semantics of EJB QL comparisons involving the empty string and NULL
value.

====== [#50421764_pgfId-1641193]##[#50421764_39501]##Equality and Comparison Semantics

[#50421764_pgfId-1641195]##[#50421764_marker-1641194]##EJB QL only
permits the values of _like_ types to be compared. A type is _like_
another type if they correspond to the same Java language type, or if
one is a primitive Java language type and the other is the wrappered
Java class type equivalent (e.g., _int_ and _Integer_ are like types in
this sense). There is one exception to this rule: it is valid to compare
numeric values for which the rules of numeric promotion apply.
Conditional expressions attempting to compare non-like type values are
disallowed except for this numeric case.

[#50421764_pgfId-1641196]##Note that EJB QL permits the arithmetic
operators and comparison operators to be applied to cmp-fields and input
parameters of the wrappered Java class equivalents to the primitive
numeric Java types.

[#50421764_pgfId-1641197]##Two entity objects of the same abstract
schema type are equal if and only if they have the same primary key
value.

====== [#50421764_pgfId-1641198]##Restrictions

[#50421764_pgfId-1641200]##[#50421764_marker-1641199]##Date and time
values should use the standard Java _long_ millisecond value. The
standard way to produce millisecond values is to use
_java.util.Calendar_ .

[#50421764_pgfId-1641202]##[#50421764_marker-1641201]##Although SQL
requires support for fixed decimal comparison in arithmetic expressions,
EJB QL does not. For this reason EJB QL restricts exact numeric literals
to those without a decimal point (and numerics with a decimal point as
an alternate representation for approximate numeric values).

[#50421764_pgfId-1641203]##Support for the BigDecimal and BigInteger
types is optional for containers in EJB 2.1. Applications that depend on
such types in EJB QL queries may not be portable.

[#50421764_pgfId-1641204]## _Boolean_ comparison is restricted to _=_
and _<>_ .

[#50421764_pgfId-1641206]##[#50421764_marker-1641205]##EJB QL does not
support the use of comments.

[#50421764_pgfId-1641208]##[#50421764_marker-1641207]##The data model
for container-managed persistence does not currently support
inheritance. Therefore, entity objects of different types cannot be
compared. EJB QL queries that contain such comparisons are invalid.

==== [#50421764_pgfId-1641209]##Examples

image:Ejb-4.gif[image]

[#50421764_pgfId-1641211]##[#50421764_marker-1641210]##The following
examples illustrate the syntax and semantics of EJB QL. These examples
are based on the example presented in link:Ejb.htm#50421764_94337[See
Examples].

====== [#50421764_pgfId-1641215]##Simple Queries

[#50421764_pgfId-1641216]##Find all orders:

[#50421764_pgfId-1641217]##SELECT OBJECT(o)

[#50421764_pgfId-1641218]##FROM Order o

[#50421764_pgfId-1641219]##Find all orders that need to be shipped to
California:

[#50421764_pgfId-1641220]##SELECT OBJECT(o)

[#50421764_pgfId-1641221]##FROM Order o

[#50421764_pgfId-1641222]##WHERE o.shipping_address.state = ‘CA’

[#50421764_pgfId-1641223]## 

[#50421764_pgfId-1641224]##Find all states for which there are orders:

[#50421764_pgfId-1641225]## 

[#50421764_pgfId-1641226]##SELECT DISTINCT o.shipping_address.state

[#50421764_pgfId-1641227]##FROM Order o

====== [#50421764_pgfId-1641228]##Queries with Relationships

[#50421764_pgfId-1641229]##Find all orders that have line items:

[#50421764_pgfId-1641230]##SELECT DISTINCT OBJECT(o)

[#50421764_pgfId-1641231]##FROM Order o, IN(o.lineItems) l

[#50421764_pgfId-1641232]##Note that the result of this query does not
include orders with no associated line items. This query can also be
written as:

[#50421764_pgfId-1641233]##SELECT OBJECT(o)

[#50421764_pgfId-1641234]##FROM Order o

[#50421764_pgfId-1641235]##WHERE o.lineItems IS NOT EMPTY

[#50421764_pgfId-1641236]##Find all orders that have no line items:

[#50421764_pgfId-1641237]##SELECT OBJECT(o)

[#50421764_pgfId-1641238]##FROM Order o

[#50421764_pgfId-1641239]##WHERE o.lineItems IS EMPTY

[#50421764_pgfId-1641240]##Find all pending orders:

[#50421764_pgfId-1641241]##SELECT DISTINCT OBJECT(o)

[#50421764_pgfId-1641242]##FROM Order o, IN(o.lineItems) l

[#50421764_pgfId-1641243]##WHERE l.shipped = FALSE

[#50421764_pgfId-1641244]##Find all orders in which the shipping address
differs from the billing address. This example assumes that the Bean
Provider uses two distinct entity beans to designate shipping and
billing addresses, as in link:Ejb.htm#50421764_90483[See Several Entity
Beans with Abstract Persistence Schemas Defined in the Same Ejb-jar
File.].

[#50421764_pgfId-1641248]##SELECT OBJECT(o)

[#50421764_pgfId-1641249]##FROM Order o

[#50421764_pgfId-1641250]##WHERE

[#50421764_pgfId-1641251]##NOT (o.shipping_address.state =
o.billing_address.state AND

[#50421764_pgfId-1641252]## o.shipping_address.city =
o.billing_address.city AND

[#50421764_pgfId-1641253]## o.shipping_address.street =
o.billing_address.street)

[#50421764_pgfId-1641254]##If the Bean Provider uses a single entity
bean in two different relationships for both the shipping address and
the billing address, the above expression can be simplified based on the
equality rules defined in Section link:Ejb.htm#50421764_39501[See
Equality and Comparison Semantics]. The query can then be written as:

[#50421764_pgfId-1641258]##SELECT OBJECT(o)

[#50421764_pgfId-1641259]##FROM Order o

[#50421764_pgfId-1641260]##WHERE o.shipping_address <> o.billing_address

[#50421764_pgfId-1641261]##The query checks whether the same entity bean
abstract schema type instance (identified by its primary key) is related
to an order through two distinct relationships. [#50421764_49432]##

[#50421764_pgfId-1641263]##Find all orders for a book titled ‘Applying
Enterprise JavaBeans: Component-Based Development for the J2EE
Platform’:

[#50421764_pgfId-1641264]##SELECT DISTINCT OBJECT(o)

[#50421764_pgfId-1641265]##FROM Order o, IN(o.lineItems) l

[#50421764_pgfId-1641266]##WHERE l.product.type = ‘book’ AND

[#50421764_pgfId-1641267]## l.product.name = ‘Applying Enterprise
JavaBeans:

[#50421764_pgfId-1641268]## Component-Based Development for the J2EE
Platform’

[#50421764_pgfId-1641269]## 

====== [#50421764_pgfId-1641270]##Queries Using Input Parameters

[#50421764_pgfId-1641271]##The following query finds the orders for a
product whose name is designated by an input parameter:

[#50421764_pgfId-1641272]##SELECT DISTINCT OBJECT(o)

[#50421764_pgfId-1641273]##FROM Order o, IN(o.lineItems) l

[#50421764_pgfId-1641274]##WHERE l.product.name = ?1

[#50421764_pgfId-1641275]##For this query, the input parameter must be
of the type of the cmp-field name, i.e., a string.

====== [#50421764_pgfId-1641276]##Queries for Select Methods

[#50421764_pgfId-1641277]##The following select queries illustrate the
selection of values other than entity beans.

[#50421764_pgfId-1641278]##The following EJB QL query selects the names
of all products that have been ordered.

[#50421764_pgfId-1641279]##SELECT DISTINCT l.product.name

[#50421764_pgfId-1641280]##FROM Order o, IN(o.lineItems) l

[#50421764_pgfId-1641281]##The following query finds the names of all
products in the order specified by a particular order number. The order
number is specified by a parameter that corresponds to the primary key
of Order. Note that because this query does not specify DISTINCT in its
SELECT clause, if it is specified for a query method whose return type
is _java.util.Collection_ , the collection that is returned may contain
duplicates. In this example, such duplicates correspond to products that
have been ordered multiple times in the given order.

[#50421764_pgfId-1641282]##SELECT l.product.name

[#50421764_pgfId-1641283]##FROM Order o, IN(o.lineItems) l

[#50421764_pgfId-1641284]##WHERE o.ordernumber = ?1

[#50421764_pgfId-1641285]##It is the responsibility of the container to
interpret the query such that no duplicates are produced if the result
type of the query method is _java.util.Set_ .

[#50421764_pgfId-1641286]##Consider the following query for a select
method:

[#50421764_pgfId-1641287]##SELECT o.shipping_address.city

[#50421764_pgfId-1641288]##FROM Order o

[#50421764_pgfId-1641290]##[#50421764_marker-1641289]##This query
returns the names of all the cities of the shipping addresses of all
orders. The result type of the select method, which is either
_java.util.Collection_ or _java.util.Set_ , determines whether the query
may return duplicate city names.

====== [#50421764_pgfId-1641291]##EJB QL and SQL

[#50421764_pgfId-1641293]##[#50421764_marker-1641292]##EJB QL, like SQL,
treats the FROM clause as a cartesian product. The
[#50421764_marker-1641294]##FROM clause is similar to that of SQL in
that the declared identification variables affect the results of the
query even if they are not used in the WHERE clause. The Bean Provider
should use caution in defining identification variables because the
domain of the query can depend on whether there are any values of the
declared type.

[#50421764_pgfId-1641295]##For example, the FROM clause below defines a
query over all orders that have line items and existing products. If
there are no Product instances in the persistent store, the domain of
the query is empty and no order is selected.

[#50421764_pgfId-1641296]##SELECT OBJECT(o)

[#50421764_pgfId-1641297]##FROM Order AS o, IN(o.lineItems) l, Product p

[#50421764_pgfId-1641298]## 

[#50421764_pgfId-1641299]##The container can represent the abstract
schemas of a set of entity beans in an application using a relational
database. There are multiple ways to define a mapping to a set of tables
in a relational database. Although this area is beyond the scope of this
specification, a sample mapping and translation of EJB QL to SQL is
described to clarify the semantics of EJB QL.

[#50421764_pgfId-1641300]##A mapping strategy from a set of entity beans
to a relational database might be to map each entity bean to a separate
table. One-to-many relationships may be represented by
[#50421764_marker-1641301]##foreign keys in the related table from the
many side and many-to-many relationships may be represented by using an
auxiliary table that contains the primary keys of the related objects.

[#50421764_pgfId-1641303]##Because the FROM clause represents a
cartesian product, the [#50421764_marker-1641302]##SQL result may
contain duplicates. If the query is for a method whose return type is
_java.util.Set_ , the container would therefore typically utilize a
[#50421764_marker-1641304]##SELECT DISTINCT clause in translating the
query to SQL. The query method result may contain duplicates if the
return type of the query method is _java.util.Collection_ and DISTINCT
is not specified in the SELECT clause of the EJB QL query.

[#50421764_pgfId-1641305]##The following translation example illustrates
the mapping of entity beans to relational database tables. The entity
bean OrderEJB is represented by the table ORDER and the entity bean
LineItemEJB is represented by the table LINEITEM. The column OKEY
represents the primary key for OrderEJB entity bean, FKEY represents the
foreign key column of LINEITEM that holds the values of the ORDER
primary keys. FKEY is defined in the LINEITEM table to model the
one-to-many relationship.

[#50421764_pgfId-1641306]##Using this mapping, the following EJB QL
finder query

[#50421764_pgfId-1641307]##SELECT OBJECT(o)

[#50421764_pgfId-1641308]##FROM Order o, IN(o.lineItems) l

[#50421764_pgfId-1641309]##WHERE l.quantity > 5

[#50421764_pgfId-1641310]##might be represented in SQL as

[#50421764_pgfId-1641311]##SELECT DISTINCT o.OKEY

[#50421764_pgfId-1641312]##FROM ORDERBEAN o, LINEITEM l

[#50421764_pgfId-1641313]##WHERE o.OKEY = l.FKEY AND l.QUANTITY > 5

[#50421764_pgfId-1641314]## 

==== [#50421764_pgfId-1641316]##[#50421764_25401]##EJB QL BNF

image:Ejb-4.gif[image]

[#50421764_pgfId-1641318]##[#50421764_marker-1641317]##EJB QL BNF
notation summary:

[#50421764_pgfId-1641319]##\{ ... } grouping

[#50421764_pgfId-1641320]##[ ... ] optional constructs

[#50421764_pgfId-1641321]##boldface keywords

[#50421764_pgfId-1641322]##The following is the complete BNF notation
for EJB QL:

{empty}[#50421764_pgfId-1641323]##EJB QL ::= select_clause from_clause
[where_clause] [orderby_clause]

[#50421764_pgfId-1641324]##from_clause ::= _FROM_
identification_variable_declaration

[#50421764_pgfId-1641325]## [, identification_variable_declaration]*

[#50421764_pgfId-1641326]##identification_variable_declaration ::=
collection_member_declaration |

[#50421764_pgfId-1641327]## range_variable_declaration

[#50421764_pgfId-1641328]##collection_member_declaration ::= _IN (_
collection_valued_path_expression _)_ [AS] identifier

[#50421764_pgfId-1641329]##range_variable_declaration ::=
abstract_schema_name [ _AS_ ] identifier

[#50421764_pgfId-1641330]##cmp_path_expression ::=

[#50421764_pgfId-1641331]## \{identification_variable |
single_valued_cmr_path_expression}.cmp_field

[#50421764_pgfId-1641332]##single_valued_cmr_path_expression ::=

[#50421764_pgfId-1641333]##
identification_variable.[single_valued_cmr_field.]*
single_valued_cmr_field

[#50421764_pgfId-1641334]##single_valued_path_expression ::=

[#50421764_pgfId-1641335]## cmp_path_expression |
single_valued_cmr_path_expression

[#50421764_pgfId-1641336]##collection_valued_path_expression ::=

[#50421764_pgfId-1641337]##
identification_variable.[single_valued_cmr_field.]*collection_valued_cmr_field

[#50421764_pgfId-1641338]##select_clause ::= _SELECT_ [ _DISTINCT_ ]
\{select_expression | _OBJECT(_ identification_variable _)_ }

[#50421764_pgfId-1641339]##select_expression ::=
single_valued_path_expression | aggregate_select_expression

[#50421764_pgfId-1641340]##aggregate_select_expression ::=

[#50421764_pgfId-1641341]## \{ _AVG_ | _MAX_ | _MIN_ | _SUM_ | _COUNT_
_}_ _(_ [ _DISTINCT_ ] cmp_path_expression _)_ |

[#50421764_pgfId-1641342]## _COUNT (_ [ _DISTINCT_ ]
identification_variable | single_valued_cmr_path_expression _)_

[#50421764_pgfId-1641343]##where_clause ::= _WHERE_
conditional_expression

[#50421764_pgfId-1641344]##conditional_expression ::= conditional_term |
conditional_expression _OR_ conditional_term

[#50421764_pgfId-1641345]##conditional_term ::= conditional_factor |
conditional_term _AND_ conditional_factor

[#50421764_pgfId-1641346]##conditional_factor ::= [ _NOT_ ]
conditional_primary

[#50421764_pgfId-1641347]##conditional_primary ::=
simple_cond_expression | (conditional_expression)

[#50421764_pgfId-1641348]##simple_cond_expression ::=
comparison_expression | between_expression | like_expression |

[#50421764_pgfId-1641349]## in_expression | null_comparison_expression |

[#50421764_pgfId-1641350]## empty_collection_comparison_expression |

[#50421764_pgfId-1641351]## collection_member_expression

[#50421764_pgfId-1641352]## _between_expression ::=_

[#50421764_pgfId-1641353]## _arithmetic_expression_ [ _NOT_ ] _BETWEEN_

[#50421764_pgfId-1641354]## _arithmetic_expression_ _AND_
_arithmetic_expression_

[#50421764_pgfId-1641355]## _in_expression ::=_

[#50421764_pgfId-1641356]## __ cmp_path_expression [ _NOT_ ] _IN_

[#50421764_pgfId-1641357]## _(_ _\{literal_ | input_parameter} [, _\{
literal | input_parameter} ]*_ _)_

[#50421764_pgfId-1641358]## _like_expression ::=_

{empty}[#50421764_pgfId-1641359]## __ cmp_path_expression [ _NOT_ ]
_LIKE_ _pattern_value_ [ _ESCAPE_ _escape_character_ ]

[#50421764_pgfId-1641360]##null_comparison_expression ::=

[#50421764_pgfId-1641361]## \{single_valued_path_expression |
input_parameter} _IS_ [ _NOT_ ] _NULL_

[#50421764_pgfId-1641362]##empty_collection_comparison_expression ::=

[#50421764_pgfId-1641363]## collection_valued_path_expression _IS [NOT]
EMPTY_

[#50421764_pgfId-1641364]##collection_member_expression ::=

[#50421764_pgfId-1641365]## \{single_valued_cmr_path_expression |
identification_variable | input_parameter}

[#50421764_pgfId-1641366]## [ _NOT_ ] _MEMBER_ _[_ _OF_ _]_
collection_valued_path_expression

[#50421764_pgfId-1641367]##comparison_expression ::=

[#50421764_pgfId-1641368]## string_value comparison_operator
string_expression |

[#50421764_pgfId-1641369]## boolean_value \{ _=_ | _<>_ }
boolean_expression} |

[#50421764_pgfId-1641370]## datetime_value comparison_operator
datetime_expression |

[#50421764_pgfId-1641371]## entity_bean_value \{ _=_ | _<>_ }
entity_bean_expression |

[#50421764_pgfId-1641372]## arithmetic_value comparison_operator
arithmetic_expression

[#50421764_pgfId-1641373]##arithmetic_value ::= cmp_path_expression |
functions_returning_numerics

[#50421764_pgfId-1641374]##comparison_operator ::=

[#50421764_pgfId-1641375]## _=_ | _>_ | _>=_ | _<_ | _<=_ | _<>_

[#50421764_pgfId-1641376]##arithmetic_expression ::= arithmetic_term |
arithmetic_expression \{ _+_ | _-_ } arithmetic_term

[#50421764_pgfId-1641377]##arithmetic_term ::= arithmetic_factor |
arithmetic_term \{ _*_ | _/_ } arithmetic_factor

[#50421764_pgfId-1641378]##arithmetic_factor ::= [\{ _+_ | _-_ }]
arithmetic_primary

[#50421764_pgfId-1641379]##arithmetic_primary ::= cmp_path_expression |
literal | (arithmetic_expression) |

[#50421764_pgfId-1641380]## input_parameter |
functions_returning_numerics

[#50421764_pgfId-1641381]##string_value ::= cmp_path_expression |
functions_returning_strings

[#50421764_pgfId-1641382]##string_expression ::= string_primary |
input_parameter

[#50421764_pgfId-1641383]##string_primary ::= cmp_path_expression |
literal | (string_expression) |

[#50421764_pgfId-1641384]## functions_returning_strings

[#50421764_pgfId-1641385]##datetime_value ::= cmp_path_expression

[#50421764_pgfId-1641386]##datetime_expression ::= datetime_value |
input_parameter

[#50421764_pgfId-1641387]##boolean_value ::= cmp_path_expression

[#50421764_pgfId-1641388]##boolean_expression ::= cmp_path_expression |
literal | input_parameter

[#50421764_pgfId-1641389]##entity_bean_value ::=
single_valued_cmr_path_expression | identification_variable

[#50421764_pgfId-1641390]##entity_bean_expression ::= entity_bean_value
| input_parameter

[#50421764_pgfId-1641391]##functions_returning_strings ::= _CONCAT(_
string_expression _,_ string_expression _)_ |

[#50421764_pgfId-1641392]## _SUBSTRING(_ string_expression _,_
arithmetic_expression _,_ arithmetic_expression _)_

[#50421764_pgfId-1641393]##functions_returning_numerics::=

[#50421764_pgfId-1641394]## _LENGTH(_ string_expression _)_ |

[#50421764_pgfId-1641395]## _LOCATE(_ string_expression _,_
string_expression[ _,_ arithmetic_expression] _) |_

[#50421764_pgfId-1641396]## _ABS(_ arithmetic_expression _)_ |

[#50421764_pgfId-1641397]## _SQRT(_ arithmetic_expression _) |_

[#50421764_pgfId-1641398]## _MOD(_ arithmetic_expression,
arithmetic_expression _)_

[#50421764_pgfId-1641399]##orderby_clause ::= _ORDER BY_ orderby_item [
_,_ orderby_item]*

{empty}[#50421764_pgfId-1641400]##orderby_item ::= cmp_path_expression [
_ASC_ | _DESC_ ]

[#50421764_pgfId-1641402]##[#50421764_marker-1641401]## 

[#50421764_pgfId-1641403]## 

=== [#50421764_pgfId-1640539]##[#50421764_16574]##[#50421764_10231]##EJB 2.1 Entity Bean Component Contract for Bean-Managed Persistence

[#50421764_pgfId-1201762]##The entity bean component contract for
bean-managed persistence is the contract between an entity bean and its
container. It defines the life cycle of the entity bean instances and
the model for method delegation of the client-invoked business methods.
The main goal of this contract is to ensure that a component using
bean-managed persistence is portable across all compliant EJB
containers.

[#50421764_pgfId-1201763]##This chapter defines the Enterprise Bean
Provider’s view of this contract and the Container Provider’s
responsibility for managing the life cycle of the enterprise bean
instances. It also describes the Bean Provider’s responsibilities when
persistence is provided by the Bean Provider.

[#50421764_pgfId-1675499]##Note that use of dependency injection,
interceptors, and Java language metadata annotations is not supported
for EJB 2.1 entity beans.

==== [#50421764_pgfId-1363452]##Overview of Bean-Managed Entity Persistence

image:Ejb-4.gif[image]

[#50421764_pgfId-1363454]##[#50421764_marker-1363453]##An entity bean
implements an object view of an entity stored in an underlying database,
or an entity implemented by an existing enterprise application (for
example, by a mainframe program or by an ERP application). The data
access protocol for transferring the state of the entity between the
entity bean instances and the underlying database is referred to as
[#50421764_marker-1503029]##object persistence.

[#50421764_pgfId-1363455]##The entity bean component protocol for
[#50421764_marker-1503030]##bean-managed persistence allows the entity
Bean Provider to implement the entity bean’s persistence directly in the
entity bean class or in one or more helper classes provided with the
entity bean class. This chapter describes the contracts for bean-managed
persistence.

======= [#50421764_pgfId-1363497]##

image:Ejb-5.gif[image]

Client View of Underlying Data Sources Accessed Through Entity Bean

image:Ejb-38.gif[image]

====== [#50421764_pgfId-1363510]##Entity Bean Provider’s View of Persistence

[#50421764_pgfId-1363512]##[#50421764_marker-1363511]##Using
bean-managed persistence, the entity Bean Provider writes database
access calls (e.g. using JDBC _TM_ or SQLJ) directly in the entity bean
component. The data access calls are performed in the ejbCreate<METHOD>,
ejbRemove, ejbFind<METHOD>, ejbLoad, and ejbStore methods, and/or in the
business methods.

[#50421764_pgfId-1363513]##The data access calls can be coded directly
into the entity bean class, or they can be encapsulated in a
[#50421764_marker-1503033]##data access component that is part of the
entity bean. Directly coding data access calls in the entity bean class
may make it more difficult to adapt the entity bean to work with a
database that has a different schema, or with a different type of
database.

[#50421764_pgfId-1363514]##We expect that most enterprise beans with
bean-managed persistence will be created by application development
tools which will encapsulate data access in components. These data
access components will probably not be the same for all tools. Further,
if the data access calls are encapsulated in data access components, the
data access components may require deployment interfaces to allow
adapting data access to different schemas or even to a different
database type. This EJB specification does not define the architecture
for data access objects, strategies for tailoring and deploying data
access components or ensuring portability of these components for
bean-managed persistence.

====== [#50421764_pgfId-1201764]##Runtime Execution Model

[#50421764_pgfId-1201765]##This section describes the runtime model and
the classes used in the description of the contract between an entity
bean with bean-managed persistence and its container.

======= [#50421764_pgfId-1201831]##

image:Ejb-5.gif[image]

Overview of the Entity Bean Runtime Execution Model

image:Ejb-39.gif[image]

[#50421764_pgfId-1201832]##An enterprise bean instance is an object
whose class is provided by the Bean Provider.

[#50421764_pgfId-1201833]##An entity EJBObject or EJBLocalObject is an
object whose class is generated at deployment time by the Container
Provider’s tools. The entity EJBObject class implements the entity
bean’s remote interface. The entity EJBLocalObject class implements the
entity bean’s local interface. A client never references an entity bean
instance directly—a client always references an entity EJBObject or
entity EJBLocalObject whose class is generated by the Container
Provider’s tools.

[#50421764_pgfId-1201834]##An entity EJBHome or EJBLocalHome object
provides the [#50421764_marker-1503034]##life cycle operations (create,
remove, find) for its entity objects as well as home business methods,
which are not specific to an entity bean instance. The class for the
entity EJBHome or EJBLocalHome object is generated by the Container
Provider’s tools at deployment time. The entity EJBHome or EJBLocalHome
object implements the entity bean’s home interface that was defined by
the Bean Provider.

====== [#50421764_pgfId-1282778]##[#50421764_11149]##Instance Life Cycle

======= [#50421764_pgfId-1201936]##

image:Ejb-5.gif[image]

[#50421764_91001]##Life Cycle of an Entity Bean Instance.

image:Ejb-40.gif[image]

[#50421764_pgfId-1201937]##[#50421764_marker-1318875]##An entity bean
instance is in one of the following three states:

[#50421764_pgfId-1201938]##It does not exist.

[#50421764_pgfId-1201939]##Pooled state. An instance in the pooled state
is not associated with any particular entity object identity.

[#50421764_pgfId-1211097]##Ready state. An instance in the ready state
is assigned an entity object identity.

[#50421764_pgfId-1201942]##[#50421764_marker-1318876]##The following
steps describe the life cycle of an entity bean instance:

[#50421764_pgfId-1201943]##An entity bean instance’s life starts when
the container creates the instance using newInstance. The container then
invokes the setEntityContext method to pass the instance a reference to
the EntityContext interface. The EntityContext interface allows the
instance to invoke services provided by the container and to obtain the
information about the caller of a client-invoked method.

[#50421764_pgfId-1201947]##The instance enters the pool of available
instances. Each entity bean has its own pool. While the instance is in
the available pool, the instance is not associated with any particular
entity object identity. All instances in the pool are considered
equivalent, and therefore any instance can be assigned by the container
to any entity object identity at the transition to the ready state.
While the instance is in the pooled state, the container may use the
instance to execute any of the entity bean’s finder methods (shown as
_ejbFind<METHOD>_ in the diagram) or home methods (shown as
ejbHome<METHOD> in the diagram). The instance does not move to the ready
state during the execution of a finder or a home method.

[#50421764_pgfId-1298074]##An instance transitions from the pooled state
to the ready state when the container selects that instance to service a
client call to an entity object or an _ejbTimeout_ method. There are two
possible transitions from the pooled to the ready state: through the
_ejbCreate_ <METHOD> and _ejbPostCreate_ <METHOD> methods, or through
the _ejbActivate_ method. The container invokes the _ejbCreate_ <METHOD>
__ and _ejbPostCreate_ <METHOD> methods when the instance is assigned to
an entity object during entity object creation (i.e., when the client
invokes a _create_ <METHOD> method on the entity bean’s home object).
The container invokes the _ejbActivate_ method on an instance when an
instance needs to be activated to service an invocation on an existing
entity object—this occurs because there is no suitable instance in the
ready state to service the client’s call or the _ejbTimeout_ method.

[#50421764_pgfId-1201949]##When an entity bean instance is in the ready
state, the instance is associated with a specific entity object
identity. While the instance is in the ready state, the container can
invoke the _ejbLoad_ and _ejbStore_ methods zero or more times. A
business method can be invoked on the instance zero or more times. The
_ejbTimeout_ method can be invoked on the instance zero or more times.
Invocations of the _ejbLoad_ and _ejbStore_ methods can be arbitrarily
mixed with invocations of business methods or the _ejbTimeout_ method.
The purpose of the _ejbLoad_ and _ejbStore_ methods is to synchronize
the state of the instance with the state of the entity in the underlying
data source—the container can invoke these methods whenever it
determines a need to synchronize the instance’s state.

[#50421764_pgfId-1309353]##The container can choose to passivate an
entity bean instance within a transaction. To passivate an instance, the
container first invokes the ejbStore method to allow the instance to
synchronize the database state with the instance’s state, and then the
container invokes the ejbPassivate method to return the instance to the
pooled state.

[#50421764_pgfId-1201950]##Eventually, the container will transition the
instance to the pooled state. There are three possible transitions from
the ready to the pooled state: through the _ejbPassivate_ method,
through the _ejbRemove_ method, and because of a transaction rollback
for _ejbCreate_ , _ejbPostCreate_ , or _ejbRemove_ (not shown in
link:Ejb.htm#50421764_91001[See Life Cycle of an Entity Bean
Instance.]). The container invokes the _ejbPassivate_ method when the
container wants to disassociate the instance from the entity object
identity without removing the entity object. The container invokes the
_ejbRemove_ method when the container is removing the entity object
(i.e., when the client invoked the _remove_ method on the entity
object’s component interface, or a _remove_ method on the entity bean’s
home interface). If _ejbCreate_ , _ejbPostCreate_ , or _ejbRemove_ is
called and the transaction rolls back, the container will transition the
bean instance to the pooled state.

[#50421764_pgfId-1201951]##When the instance is put back into the pool,
it is no longer associated with an entity object identity. The container
can assign the instance to any entity object within the same entity bean
home.

[#50421764_pgfId-1201952]##An instance in the pool can be removed by
calling the _unsetEntityContext_ method on the instance.

[#50421764_pgfId-1201953]##Notes:

[#50421764_pgfId-1201954]##The EntityContext interface passed by the
container to the instance in the setEntityContext method is an
interface, not a class that contains static information. For example,
the result of the EntityContext.getPrimaryKey method might be different
each time an instance moves from the pooled state to the ready state,
and the result of the getCallerPrincipal and isCallerInRole methods may
be different in each business method.

[#50421764_pgfId-1276487]##A RuntimeException thrown from any method of
the entity bean class (including the business methods and the callbacks
invoked by the container) results in the transition to the “does not
exist” state. The container must not invoke any method on the instance
after a RuntimeException has been caught. From the client perspective,
the corresponding entity object continues to exist. The client can
continue accessing the entity object through its component interface
because the container can use a different entity bean instance to
delegate the client’s requests. Exception handling is described further
in Chapter link:Ejb.htm#50421764_13750[See Exception Handling].

[#50421764_pgfId-1211094]##The container is not required to maintain a
pool of instances in the pooled state. The pooling approach is an
example of a possible implementation, but it is not the required
implementation. Whether the container uses a pool or not has no bearing
on the entity bean coding style.[#50421764_marker-1318881]##

====== [#50421764_pgfId-1201956]##[#50421764_10991]##The Entity Bean Component Contract

[#50421764_pgfId-1201957]##This section specifies the contract between
an entity bean with bean-managed persistence and its container.

====== [#50421764_pgfId-1201962]##[#50421764_32505]##Entity Bean Instance’s View

[#50421764_pgfId-1201963]##The following describes the entity bean
instance’s view of the contract:

[#50421764_pgfId-1201964]##[#50421764_marker-1318882]##The Bean Provider
is responsible for implementing the following methods in the entity bean
class:

[#50421764_pgfId-1201967]##[#50421764_marker-1318888]##A public
constructor that takes no arguments. The container uses this constructor
to create instances of the entity bean class.

[#50421764_pgfId-1211100]## _public void setEntityContext(EntityContext
ic)_ ;

[#50421764_pgfId-1312703]##[#50421764_marker-1318889]##A container uses
this method to pass a reference to the EntityContext interface to the
entity bean instance. If the entity bean instance needs to use the
EntityContext interface during its lifetime, it must remember the
EntityContext interface in an instance variable.

[#50421764_pgfId-1312707]##This method executes with an unspecified
transaction context (Refer to EJB Core Contracts and Requirements
document link:Ejb.htm#50421764_39461[See EJB 3.2 Core Contracts and
Requirements. http://jcp.org/en/jsr/detail?id=345] Subsection 8.6.5 for
how the container executes methods with an unspecified transaction
context). An identity of an entity object is not available during this
method.

[#50421764_pgfId-1201970]##The instance can take advantage of the
setEntityContext method to allocate any resources that are to be held by
the instance for its lifetime. Such resources cannot be specific to an
entity object identity because the instance might be reused during its
lifetime to serve multiple entity object identities.

[#50421764_pgfId-1201971]## _public void unsetEntityContext();_

[#50421764_pgfId-1201972]##[#50421764_marker-1318890]##A container
invokes this method before terminating the life of the instance.

[#50421764_pgfId-1201973]##This method executes with an unspecified
transaction context. An identity of an entity object is not available
during this method.

[#50421764_pgfId-1201974]##The instance can take advantage of the
_unsetEntityContext_ method to free any resources that are held by the
instance. (These resources typically had been allocated by the
setEntityContext method.)

[#50421764_pgfId-1201976]## _public PrimaryKeyClass ejbCreate_
<METHOD>(...);

[#50421764_pgfId-1201980]##[#50421764_marker-1318891]##There are
zerolink:#pgfId-1201979[21] or more ejbCreate<METHOD> methods, whose
signatures match the signatures of the create<METHOD> methods of the
entity bean home interface. The container invokes an _ejbCreate_
<METHOD> method on an entity bean instance when a client invokes a
matching create<METHOD> method to create an entity object.

[#50421764_pgfId-1201981]##The implementation of the _ejbCreate_
<METHOD> method typically validates the client-supplied arguments, and
inserts a record representing the entity object into the database. The
method also initializes the instance’s variables. The ejbCreate<METHOD>
method must return the primary key for the created entity object.

[#50421764_pgfId-1307299]##An _ejbCreate_ <METHOD> method executes in
the transaction context determined by the transaction attribute of the
matching create<METHOD> method, as described in EJB Core Contracts and
Requirements document link:Ejb.htm#50421764_39461[See EJB 3.2 Core
Contracts and Requirements. http://jcp.org/en/jsr/detail?id=345]
Subsection “Container-Managed Transaction Demarcation for Business
Methods”.

[#50421764_pgfId-1307303]## _public void ejbPostCreate_ <METHOD>
_(...);_

[#50421764_pgfId-1201991]##[#50421764_marker-1318892]##For each
ejbCreate<METHOD> method, there is a matching ejbPostCreate<METHOD>
method that has the same input parameters but whose return value is
void. The container invokes the matching ejbPostCreate<METHOD> method on
an instance after it invokes the ejbCreate<METHOD> method with the same
arguments. The entity object identity is available during the
ejbPostCreate<METHOD> method. The instance may, for example, obtain the
component interface of the associated entity object and pass it to
another enterprise bean as a method argument.

[#50421764_pgfId-1201992]##An _ejbPostCreate_ <METHOD> method executes
in the same transaction context as the previous ejbCreate<METHOD>
method.

[#50421764_pgfId-1202003]## _public void ejbActivate();_

[#50421764_pgfId-1202004]##[#50421764_marker-1318893]##The container
invokes this method on the instance when the container picks the
instance from the pool and assigns it to a specific entity object
identity. The ejbActivate method gives the entity bean instance the
chance to acquire additional resources that it needs while it is in the
ready state.

[#50421764_pgfId-1202005]##This method executes with an unspecified
transaction context. The instance can obtain the identity of the entity
object via the getPrimaryKey, getEJBLocalObject, or getEJBObject method
on the entity context. The instance can rely on the fact that the
primary key and entity object identity will remain associated with the
instance until the completion of ejbPassivate or ejbRemove.

[#50421764_pgfId-1202006]##Note that the instance should not use the
ejbActivate method to read the state of the entity from the database;
the instance should load its state only in the ejbLoad method.

[#50421764_pgfId-1202007]## _public void ejbPassivate()_ ; +
[#50421764_marker-1318894]##The container invokes this method on an
instance when the container decides to disassociate the instance from an
entity object identity, and to put the instance back into the pool of
available instances. The _ejbPassivate_ method gives the instance the
chance to release any resources that should not be held while the
instance is in the pool. (These resources typically had been allocated
during the _ejbActivate_ method.)

[#50421764_pgfId-1202008]##This method executes with an unspecified
transaction context. The instance can still obtain the identity of the
entity object via the getPrimaryKey, getEJBLocalObject, or getEJBObject
method of the EntityContext interface.

[#50421764_pgfId-1576950]##Note that an instance should not use the
ejbPassivate method to write its state to the database; an instance
should store its state only in the ejbStore method.

[#50421764_pgfId-1576951]## _public void ejbRemove()_ ;

[#50421764_pgfId-1576954]##[#50421764_marker-1576952]##The container
invokes this method on an instance as a result of a client’s invoking a
remove method. The instance is in the ready state when ejbRemove is
invoked and it will be entered into the pool when the method completes.

[#50421764_pgfId-1202012]##This method executes in the transaction
context determined by the transaction attribute of the remove method
that triggered the _ejbRemove_ method. The instance can still obtain the
identity of the entity object via the getPrimaryKey, getEJBLocalObject,
or getEJBObject method of the EntityContext interface.

[#50421764_pgfId-1314351]##The container synchronizes the instance’s
state before it invokes the ejbRemove method. This means that the state
of the instance variables at the beginning of the ejbRemove method is
the same as it would be at the beginning of a business method.

[#50421764_pgfId-1202013]##An entity bean instance should use this
method to remove the entity object’s representation from the database.

[#50421764_pgfId-1202014]##Since the instance will be entered into the
pool, the state of the instance at the end of this method must be
equivalent to the state of a passivated instance. This means that the
instance must release any resource that it would normally release in the
ejbPassivate method.

[#50421764_pgfId-1202015]## _public void ejbLoad()_ ;

[#50421764_pgfId-1284894]##[#50421764_marker-1318896]##The container
invokes this method on an instance in the ready state to inform the
instance that it should synchronize the entity state cached in its
instance variables from the entity state in the database. The instance
should be prepared for the container to invoke this method at any time
that the instance is in the ready state.

[#50421764_pgfId-1298102]##If the instance is caching the entity state
(or parts of the entity state), the instance should not use the
previously cached state in the subsequent business method. The instance
may take advantage of the ejbLoad method, for example, to refresh the
cached state by reading it from the database.

[#50421764_pgfId-1298103]##This method executes in the transaction
context determined by the transaction attribute of the business method
or _ejbTimeout_ method that triggered the ejbLoad method.

[#50421764_pgfId-1298104]## _public void ejbStore();_

[#50421764_pgfId-1202033]##[#50421764_marker-1318905]##The container
invokes this method on an instance to inform the instance that the
instance should synchronize the entity state in the database with the
entity state cached in its instance variables. The instance should be
prepared for the container to invoke this method at any time that the
instance is in the ready state.

[#50421764_pgfId-1202034]##An instance should write any updates cached
in the instance variables to the database in the ejbStore method.

[#50421764_pgfId-1298134]##This method executes in the same transaction
context as the previous ejbLoad or ejbCreate _<METHOD>_ method invoked
on the instance. All business methods or the _ejbTimeout_ method invoked
between the previous ejbLoad or ejbCreate _<METHOD>_ method and this
ejbStore method are also invoked in the same transaction context.

[#50421764_pgfId-1202036]##public <primary key type or collection>
ejbFind<METHOD>(...);

[#50421764_pgfId-1202037]##[#50421764_marker-1318910]##The container
invokes this method on the instance when the container selects the
instance to execute a matching client-invoked find<METHOD> method. The
instance is in the pooled state (i.e., it is not assigned to any
particular entity object identity) when the container selects the
instance to execute the ejbFind<METHOD> method on it, and it is returned
to the pooled state when the execution of the ejbFind<METHOD> method
completes.

[#50421764_pgfId-1202038]##The ejbFind<METHOD> method executes in the
transaction context determined by the transaction attribute of the
matching find method, as described in EJB Core Contracts and
Requirements document link:Ejb.htm#50421764_39461[See EJB 3.2 Core
Contracts and Requirements. http://jcp.org/en/jsr/detail?id=345]
Subsection “Container-Managed Transaction Demarcation for Business
Methods”.

[#50421764_pgfId-1202039]##The implementation of an ejbFind<METHOD>
method typically uses the method’s arguments to locate the requested
entity object or a collection of entity objects in the database. The
method must return a primary key or a collection of primary keys to the
container (see Subsection link:Ejb.htm#50421764_33795[See Finder Method
Return Type]).[#50421764_marker-1318887]##

[#50421764_pgfId-1371089]##public __ <type> __ ejbHome<METHOD>(...);

[#50421764_pgfId-1371091]##[#50421764_marker-1371090]##The container
invokes this method on any instance when the container selects the
instance to execute a matching client-invoked <METHOD> home method. The
instance is in the pooled state (i.e., it is not assigned to any
particular entity object identity) when the container selects the
instance to execute the ejbHome<METHOD> method on it, and it is returned
to the pooled state when the execution of the ejbHome<METHOD> method
completes.

[#50421764_pgfId-1371092]##The ejbHome<METHOD> method executes in the
transaction context determined by the transaction attribute of the
matching <METHOD> home method, as described in EJB Core Contracts and
Requirements document link:Ejb.htm#50421764_39461[See EJB 3.2 Core
Contracts and Requirements. http://jcp.org/en/jsr/detail?id=345]
Subsection “Container-Managed Transaction Demarcation for Business
Methods”.

[#50421764_pgfId-1555377]## _public void ejbTimeout(...);_

[#50421764_pgfId-1555378]##The container invokes the _ejbTimeout_ method
on an instance when a timer for the instance has expired. The
_ejbTimeout_ method notifies the instance of the time-based event and
allows the instance to execute the business logic to handle it.

[#50421764_pgfId-1555384]##The _ejbTimeout_ method executes in the
transaction context determined by its transaction attribute.

====== [#50421764_pgfId-1202042]##[#50421764_28592]##Container’s View

[#50421764_pgfId-1202043]##[#50421764_marker-1318911]##This subsection
describes the container’s view of the [#50421764_marker-1503037]##state
management contract. The container must call the following methods:

[#50421764_pgfId-1202044]## _public void setEntityContext(ec)_ ;

[#50421764_pgfId-1202045]##The container invokes this method to pass a
reference to the EntityContext interface to the entity bean instance.
The container must invoke this method after it creates the instance, and
before it puts the instance into the pool of available instances.

[#50421764_pgfId-1202046]##The container invokes this method with an
unspecified transaction context. At this point, the EntityContext is not
associated with any entity object identity.

[#50421764_pgfId-1202047]## _public void unsetEntityContext()_ ;

[#50421764_pgfId-1202048]##The container invokes this method when the
container wants to reduce the number of instances in the pool. After
this method completes, the container must not reuse this instance.

[#50421764_pgfId-1202049]##The container invokes this method with an
unspecified transaction context.

[#50421764_pgfId-1202050]## _public PrimaryKeyClass ejbCreate_ <METHOD>
_(...)_ ; +
_public void ejbPostCreate_ <METHOD> _(...)_ ;

[#50421764_pgfId-1202052]##The container invokes these two methods
during the creation of an entity object as a result of a client invoking
a create<METHOD> method on the entity bean’s home interface.

[#50421764_pgfId-1369795]##The container first invokes the
ejbCreate<METHOD> method whose signature matches the create<METHOD>
method invoked by the client. The ejbCreate<METHOD> method returns a
primary key for the created entity object. The container creates an
entity EJBObject reference and/or EJBLocalObject reference for the
primary key. The container then invokes a matching ejbPostCreate<METHOD>
method to allow the instance to fully initialize itself. Finally, the
container returns the entity object’s remote interface (i.e., a
reference to the entity EJBObject) to the client if the client is a
remote client, or the entity object’s local interface (i.e., a reference
to the entity EJBLocalObject) to the client if the client is a local
client.

[#50421764_pgfId-1369796]##The container must invoke the
ejbCreate<METHOD> and ejbPostCreate<METHOD> methods in the transaction
context determined by the transaction attribute of the matching
create<METHOD> method, as described in EJB Core Contracts and
Requirements document link:Ejb.htm#50421764_39461[See EJB 3.2 Core
Contracts and Requirements. http://jcp.org/en/jsr/detail?id=345]
Subsection “Container-Managed Transaction Demarcation for Business
Methods”.

[#50421764_pgfId-1202055]## _public void ejbActivate()_ ;

[#50421764_pgfId-1202056]##The container invokes this method on an
entity bean instance at activation time (i.e., when the instance is
taken from the pool and assigned to an entity object identity). The
container must ensure that the primary key of the associated entity
object is available to the instance if the instance invokes the
getPrimaryKey, getEJBLocalObject, or getEJBObject method on its
EntityContext interface.

[#50421764_pgfId-1202057]##The container invokes this method with an
unspecified transaction context.

[#50421764_pgfId-1202058]##Note that instance is not yet ready for the
delivery of a business method. The container must still invoke the
ejbLoad method prior to a business method or _ejbTimeout_ method
invocation.

[#50421764_pgfId-1202059]## _public void ejbPassivate()_ ;

[#50421764_pgfId-1202060]##The container invokes this method on an
entity bean instance at passivation time (i.e., when the instance is
being disassociated from an entity object identity and moved into the
pool). The container must ensure that the identity of the associated
entity object is still available to the instance if the instance invokes
the getPrimaryKey, getEJBLocalObject, or getEJBObject method on its
entity context.

[#50421764_pgfId-1202061]##The container invokes this method with an
unspecified transaction context.

[#50421764_pgfId-1202062]##Note that if the instance state has been
updated by a transaction, the container must first invoke the ejbStore
method on the instance before it invokes ejbPassivate on it.

[#50421764_pgfId-1202063]## _public void ejbRemove();_

[#50421764_pgfId-1202064]##The container invokes this method before it
ends the life of an entity object as a result of a client invoking a
remove operation.

[#50421764_pgfId-1202065]##The container invokes this method in the
transaction context determined by the transaction attribute of the
invoked remove method. The container must ensure that the identity of
the associated entity object is still available to the instance in the
_ejbRemove_ method (i.e., the instance can invoke the getPrimaryKey,
getEJBLocalObject, or getEJBObject method on its EntityContext in the
_ejbRemove_ method).

[#50421764_pgfId-1314350]##The container must ensure that the instance’s
state is synchronized from the state in the database before invoking the
ejbRemove method (i.e., if the instance is not already synchronized from
the state in the database, the container must invoke ejbLoad before it
invokes ejbRemove).

[#50421764_pgfId-1202066]## _public void ejbLoad()_ ;

[#50421764_pgfId-1202067]##The container must invoke this method on the
instance whenever it becomes necessary for the instance to synchronize
its instance state from its state in the database. The exact times that
the container invokes _ejbLoad_ depend on the configuration of the
component and the container, and are not defined by the EJB
architecture. Typically, the container will call _ejbLoad_ before the
first business method within a transaction or before invoking the
_ejbTimeout_ method to ensure that the instance can refresh its cached
state of the entity object from the database. After the first _ejbLoad_
within a transaction, the container is not required to recognize that
the state of the entity object in the database has been changed by
another transaction, and it is not required to notify the instance of
this change via another _ejbLoad_ call.

[#50421764_pgfId-1202068]##The container must invoke this method in the
transaction context determined by the transaction attribute of the
business method or _ejbTimeout_ method that triggered the ejbLoad
method.

[#50421764_pgfId-1202069]## _public void ejbStore()_ ;

[#50421764_pgfId-1202070]##The container must invoke this method on the
instance whenever it becomes necessary for the instance to synchronize
its state in the database with the state of the instance’s fields. This
synchronization always happens at the end of a transaction, unless the
bean is specified as read-only (see section
link:Ejb.htm#50421764_76074[See Read-only Entity Beans]). However, the
container may also invoke this method when it passivates the instance in
the middle of a transaction, or when it needs to transfer the most
recent state of the entity object to another instance for the same
entity object in the same transaction (see EJB Core Contracts and
Requirements document link:Ejb.htm#50421764_39461[See EJB 3.2 Core
Contracts and Requirements. http://jcp.org/en/jsr/detail?id=345]
Subsection “Access from Multiple Clients in the Same Transaction
Context”).

[#50421764_pgfId-1298218]##The container must invoke this method in the
same transaction context as the previously invoked ejbLoad, ejbCreate
_<METHOD>_ , or _ejbTimeout_ method.

[#50421764_pgfId-1202072]##public <primary key type or collection>
ejbFind<METHOD>(...);

[#50421764_pgfId-1202073]##The container invokes the ejbFind<METHOD>
method on an instance when a client invokes a matching find<METHOD>
method on the entity bean’s home interface. The container must pick an
instance that is in the pooled state (i.e., the instance is not
associated with any entity object identity) for the execution of the
ejbFind<METHOD> method. If there is no instance in the pooled state, the
container creates one and calls the setEntityContext method on the
instance before dispatching the finder method.

{empty}[#50421764_pgfId-1381879]##Before invoking the _ejbFind<METHOD>_
method, the container must first synchronize the state of any
non-read-only entity bean instances that are participating in the same
transaction context as is used to execute the _ejbFind<METHOD>_ by
invoking the _ejbStore_ method on those entity bean instances.
link:#pgfId-1588502[22]

[#50421764_pgfId-1282697]##After the ejbFind<METHOD> method completes,
the instance remains in the pooled state. The container may, but is not
required to, immediately activate the objects that were located by the
finder using the transition through the ejbActivate method.

[#50421764_pgfId-1202074]##The container must invoke the ejbFind<METHOD>
method in the transaction context determined by the transaction
attribute of the matching find method, as described in EJB Core
Contracts and Requirements document link:Ejb.htm#50421764_39461[See EJB
3.2 Core Contracts and Requirements.
http://jcp.org/en/jsr/detail?id=345] Subsection “Container-Managed
Transaction Demarcation for Business Methods”.

[#50421764_pgfId-1202080]##If the ejbFind<METHOD> method is declared to
return a single primary key, the container creates an entity EJBObject
reference for the primary key and returns it to the client if the client
is a remote client. If the client is a local client, the container
creates and returns an entity EJBLocalObject reference for the primary
key. If the ejbFind<METHOD> method is declared to return a collection of
primary keys, the container creates a collection of entity EJBObject or
EJBLocalObject references for the primary keys returned from
ejbFind<METHOD>, and returns the collection to the client. (See
Subsection link:Ejb.htm#50421764_33795[See Finder Method Return Type]
for information on collections.)

[#50421764_pgfId-1368801]##public __ <type> ejbHome<METHOD>(...);

[#50421764_pgfId-1372881]##The container invokes the ejbHome<METHOD>
method on an instance when a client invokes a matching <METHOD> home
method on the entity bean’s home interface. The container must pick an
instance that is in the pooled state (i.e., the instance is not
associated with any entity object identity) for the execution of the
ejbHome<METHOD> method. If there is no instance in the pooled state, the
container creates one and calls the setEntityContext method on the
instance before dispatching the home method.

[#50421764_pgfId-1372882]##After the ejbHome<METHOD> method completes,
the instance remains in the pooled state.

[#50421764_pgfId-1372883]##The container must invoke the ejbHome<METHOD>
method in the transaction context determined by the transaction
attribute of the matching <METHOD> home method, as described in EJB Core
Contracts and Requirements document link:Ejb.htm#50421764_39461[See EJB
3.2 Core Contracts and Requirements.
http://jcp.org/en/jsr/detail?id=345] Subsection “Container-Managed
Transaction Demarcation for Business Methods”.
[#50421764_marker-1372887]##

[#50421764_pgfId-1555390]## _public void ejbTimeout(...);_

[#50421764_pgfId-1555391]##The container invokes the _ejbTimeout_ method
on the instance when a timer with which the entity has been registered
expires. If there is no suitable instance in the ready state, the
container must activate an instance, invoking the _ejbActivate_ method
and transitioning it to the ready state.

[#50421764_pgfId-1555433]##The container invokes the _ejbTimeout_ method
in the context of a transaction determined by its transaction attribute.

====== [#50421764_pgfId-1630804]##[#50421764_76074]##Read-only Entity Beans

[#50421764_pgfId-1630805]##Compliant implementations of this
specification may optionally support read-only entity beans. A read-only
entity bean is an entity bean whose instances are not intended to be
updated and/or created by the application. Read-only beans are best
suited for situations where the underlying data never changes or changes
infrequently.

{empty}[#50421764_pgfId-1630806]##Containers that support read-only
beans do not call the _ejbStore_ method on them. The _ejbLoad_ method
should typically be called by the container when the state of the bean
instance is initially loaded from the database, or at designated refresh
intervals.link:#pgfId-1630809[23]

{empty}[#50421764_pgfId-1630810]##If a read-only bean is used, the state
of such a bean should not be updated by the application, and the
behavior is unspecified if this occurs.link:#pgfId-1630813[24]

[#50421764_pgfId-1630814]##Read-only beans are designated by
vendor-specific means that are outside the scope of this specification,
and their use is therefore not portable.

====== [#50421764_pgfId-1555434]##The EntityContext Interface

[#50421764_pgfId-1555395]##[#50421764_marker-1555394]##A container
provides the entity bean instances with an _EntityContext_ , which gives
the entity bean instance access to the instance’s context maintained by
the container. The _EntityContext_ interface has the following methods:

[#50421764_pgfId-1555396]##The _getEJBObject_ method returns the entity
bean’s remote interface.

[#50421764_pgfId-1555397]##The _getEJBHome_ method returns the entity
bean’s remote home interface.

[#50421764_pgfId-1555398]##The _getEJBLocalObject_ method returns the
entity bean’s local interface.

[#50421764_pgfId-1555399]##The _getEJBLocalHome_ method returns the
entity bean’s local home interface.

[#50421764_pgfId-1555400]##The _getCallerPrincipal_ method returns the
_java.security.Principal_ that identifies the invoker.

[#50421764_pgfId-1555401]##The _isCallerInRole_ method tests if the
entity bean instance’s caller has a particular role.

[#50421764_pgfId-1555402]##The _setRollbackOnly_ method allows the
instance to mark the current transaction such that the only outcome of
the transaction is a rollback.

[#50421764_pgfId-1555403]##The _getRollbackOnly_ method allows the
instance to test if the current transaction has been marked for
rollback.

[#50421764_pgfId-1555404]##The _getPrimaryKey_ method returns the entity
bean’s primary key.

[#50421764_pgfId-1555405]##The _getTimerService_ method returns the
_javax.ejb.TimerService_ interface.

[#50421764_pgfId-1555406]##The _getUserTransaction_ method returns the
_javax.transaction.UserTransaction_ interface. Entity bean instances
must not call this method.

[#50421764_pgfId-1630491]##The _lookup_ method enables the entity bean
to look up its environment entries in the JNDI naming context.

====== [#50421764_pgfId-1259403]##Operations Allowed in the Methods of the Entity Bean Class

[#50421764_pgfId-1296907]##Table link:Ejb.htm#50421764_22110[See
Operations Allowed in the Methods of an Entity Bean] defines the methods
of an entity bean class in which the enterprise bean instances can
access the methods of the
[#50421764_marker-1503040]##javax.ejb.EntityContext interface, the
java:comp/env environment naming context, resource managers,
_TimerService_ and _Timer_ methods, the _EntityManagerFactory_ and
_EntityManager_ methods, and other enterprise beans.

[#50421764_pgfId-1297021]##If an entity bean instance attempts to invoke
a method of the EntityContext interface, and the access is not allowed
in Table link:Ejb.htm#50421764_22110[See Operations Allowed in the
Methods of an Entity Bean], the container must throw the
java.lang.IllegalStateException.

[#50421764_pgfId-1556111]##If an entity bean instance attempts to invoke
a method of the _TimerService_ or _Timer_ interface and the access is
not allowed in Table link:Ejb.htm#50421764_22110[See Operations Allowed
in the Methods of an Entity Bean], the container must throw the
java.lang.IllegalStateException.

[#50421764_pgfId-1511368]##If an entity bean instance attempts to access
a resource manager, an enterprise bean, or an entity manager or entity
manager factory, and the access is not allowed in Table
link:Ejb.htm#50421764_22110[See Operations Allowed in the Methods of an
Entity Bean], the behavior is undefined by the EJB architecture.

[#50421764_pgfId-1511445]## 

======= [#50421764_pgfId-1556213]##

image:Ejb-5.gif[image]

[#50421764_22110]##Operations Allowed in the Methods of an Entity
Bean[#50421764_marker-1556211]##

[#50421764_pgfId-1556217]##Bean method

[#50421764_pgfId-1556219]##Bean method can perform the following
operations

[#50421764_pgfId-1556221]##constructor

[#50421764_pgfId-1556223]##-

[#50421764_pgfId-1556225]##setEntityContext

[#50421764_pgfId-1556226]##unsetEntityContext

[#50421764_pgfId-1556228]##EntityContext methods: getEJBHome,
getEJBLocalHome, lookup

[#50421764_pgfId-1556229]##JNDI access to java:comp/env

[#50421764_pgfId-1556231]##ejbCreate

[#50421764_pgfId-1556233]##EntityContext methods: getEJBHome,
getEJBLocalHome, getCallerPrincipal, getRollbackOnly, isCallerInRole,
setRollbackOnly, getTimerService, lookup

[#50421764_pgfId-1556234]##JNDI access to java:comp/env

[#50421764_pgfId-1556235]##Resource manager access

[#50421764_pgfId-1556236]##Enterprise bean access

[#50421764_pgfId-1636724]##EntityManagerFactory access

[#50421764_pgfId-1636725]##EntityManager access

[#50421764_pgfId-1556238]##ejbPostCreate

[#50421764_pgfId-1556240]##EntityContext methods: getEJBHome,
getEJBLocalHome, getCallerPrincipal, getRollbackOnly, isCallerInRole,
setRollbackOnly, getEJBObject, _getEJBLocalObject,_ getPrimaryKey,
getTimerService, lookup

[#50421764_pgfId-1556241]##JNDI access to java:comp/env

[#50421764_pgfId-1556242]##Resource manager access

[#50421764_pgfId-1556243]##Enterprise bean access

[#50421764_pgfId-1556244]##Timer service or Timer methods

[#50421764_pgfId-1636728]##EntityManagerFactory access

[#50421764_pgfId-1636729]##EntityManager access

[#50421764_pgfId-1556246]##ejbRemove

[#50421764_pgfId-1556248]##EntityContext methods: getEJBHome,
getEJBLocalHome, getCallerPrincipal, getRollbackOnly, isCallerInRole,
setRollbackOnly, getEJBObject, _getEJBLocalObject,_ getPrimaryKey,
getTimerService, lookup

[#50421764_pgfId-1556249]##JNDI access to java:comp/env

[#50421764_pgfId-1556250]##Resource manager access

[#50421764_pgfId-1556251]##Enterprise bean access

[#50421764_pgfId-1556252]##Timer service or Timer methods

[#50421764_pgfId-1636736]##EntityManagerFactory access

[#50421764_pgfId-1636737]##EntityManager access

[#50421764_pgfId-1556254]##ejbFind

[#50421764_pgfId-1556256]##EntityContext methods: getEJBHome,
getEJBLocalHome, getCallerPrincipal, getRollbackOnly, isCallerInRole,
setRollbackOnly, lookup

[#50421764_pgfId-1556257]##JNDI access to java:comp/env

[#50421764_pgfId-1556258]##Resource manager access

[#50421764_pgfId-1556259]##Enterprise bean access

[#50421764_pgfId-1636744]##EntityManagerFactory access

[#50421764_pgfId-1636745]##EntityManager access

[#50421764_pgfId-1556261]##ejbHome

[#50421764_pgfId-1556263]##EntityContext methods: getEJBHome,
getEJBLocalHome, getCallerPrincipal, getRollbackOnly, isCallerInRole,
setRollbackOnly, getTimerService, lookup

[#50421764_pgfId-1556264]##JNDI access to java:comp/env

[#50421764_pgfId-1556265]##Resource manager access

[#50421764_pgfId-1556266]##Enterprise bean access

[#50421764_pgfId-1636752]##EntityManagerFactory access

[#50421764_pgfId-1636753]##EntityManager access

[#50421764_pgfId-1556269]##ejbActivate

[#50421764_pgfId-1556270]##ejbPassivate

[#50421764_pgfId-1556272]##EntityContext methods: getEJBHome,
getEJBLocalHome, getEJBObject, _getEJBLocalObject,_ getPrimaryKey,
getTimerService, lookup

[#50421764_pgfId-1556273]##JNDI access to java:comp/env

[#50421764_pgfId-1556275]##ejbLoad

[#50421764_pgfId-1556276]##ejbStore

[#50421764_pgfId-1556278]##EntityContext methods: getEJBHome,
_getEJBLocalHome_ , getCallerPrincipal, getRollbackOnly, isCallerInRole,
setRollbackOnly, getEJBObject, _getEJBLocalObject,_ getPrimaryKey,
getTimerService, lookup

[#50421764_pgfId-1556279]##JNDI access to java:comp/env

[#50421764_pgfId-1556280]##Resource manager access

[#50421764_pgfId-1556281]##Enterprise bean access

[#50421764_pgfId-1556282]##Timer service or Timer methods

[#50421764_pgfId-1636760]##EntityManagerFactory access

[#50421764_pgfId-1636761]##EntityManager access

[#50421764_pgfId-1556284]##business method

[#50421764_pgfId-1556285]##from component interface

[#50421764_pgfId-1556287]##EntityContext methods: getEJBHome,
getEJBLocalHome, getCallerPrincipal, getRollbackOnly, isCallerInRole,
setRollbackOnly, getEJBObject, _getEJBLocalObject,_ getPrimaryKey,
getTimerService, lookup

[#50421764_pgfId-1556288]##JNDI access to java:comp/env

[#50421764_pgfId-1556289]##Resource manager access

[#50421764_pgfId-1556290]##Enterprise bean access

[#50421764_pgfId-1556291]##Timer service or Timer methods

[#50421764_pgfId-1636775]##EntityManagerFactory access

[#50421764_pgfId-1636776]##EntityManager access

[#50421764_pgfId-1556293]##ejbTimeout

[#50421764_pgfId-1556295]##EntityContext methods: getEJBHome,
getEJBLocalHome, getCallerPrincipal, isCallerInRole, getRollbackOnly,
setRollbackOnly, getEJBObject, _getEJBLocalObject,_ getPrimaryKey,
getTimerService, lookup

[#50421764_pgfId-1556296]##JNDI access to java:comp/env

[#50421764_pgfId-1556297]##Resource manager access

[#50421764_pgfId-1556298]##Enterprise bean access

[#50421764_pgfId-1556299]##Timer service or Timer methods

[#50421764_pgfId-1636782]##EntityManagerFactory access

[#50421764_pgfId-1636783]##EntityManager access

[#50421764_pgfId-1511446]##Additional restrictions:

[#50421764_pgfId-1511447]##The getRollbackOnly and setRollbackOnly
methods of the EntityContext interface should be used only in the
enterprise bean methods that execute in the context of a transaction.
The container must throw the java.lang.IllegalStateException if the
methods are invoked while the instance is not associated with a
transaction.

[#50421764_pgfId-1296916]##Reasons for disallowing operations:

[#50421764_pgfId-1296917]##Invoking the getEJBObject, getEJBLocalObject,
and getPrimaryKey methods is disallowed in the entity bean methods in
which there is no entity object identity associated with the instance.

[#50421764_pgfId-1482643]##Invoking the _getEJBObject_ and _getEJBHome_
methods is disallowed if the entity bean does not define a remote client
view.

[#50421764_pgfId-1482644]##Invoking the _getEJBLocalObject_ and
_getEJBLocalHome_ methods is disallowed if the entity bean does not
define a local client view.

[#50421764_pgfId-1296919]##Invoking the getRollbackOnly and
setRollbackOnly methods is disallowed in the entity bean methods for
which the container does not have a meaningful transaction context.
These are the methods that have the NotSupported, Never, or Supports
transaction attribute.

[#50421764_pgfId-1296920]##Accessing resource managers and enterprise
beans is disallowed in the entity bean methods for which the container
does not have a meaningful transaction context or client security
context.

====== [#50421764_pgfId-1296833]##Caching of Entity State and the ejbLoad and ejbStore Methods

[#50421764_pgfId-1284937]##[#50421764_marker-1318922]##An instance of an
entity bean with bean-managed persistence can cache the entity object’s
state between business method invocations. An instance may choose to
cache the entire entity object’s state, part of the state, or no state
at all.

[#50421764_pgfId-1285070]##[#50421764_marker-1318923]##The
container-invoked ejbLoad and ejbStore methods assist the instance with
the management of the cached entity object’s state. The instance should
handle the ejbLoad and ejbStore methods as follows:

[#50421764_pgfId-1285071]##When the container invokes the ejbStore
method on the instance, the instance should push all cached updates of
the entity object’s state to the underlying database. The container
invokes the ejbStore method at the end of a
transactionlink:#pgfId-1630829[25], and may also invoke it at other
times when the instance is in the ready state. (For example the
container may invoke _ejbStore_ when passivating an instance in the
middle of a transaction, or when transferring the instance’s state to
another instance to support distributed transactions in a multi-process
server.)

[#50421764_pgfId-1285050]##When the container invokes the ejbLoad method
on the instance, the instance should discard any cached entity object’s
state. The instance may, but is not required to, refresh the cached
state by reloading it from the underlying database.

[#50421764_pgfId-1285081]##The following examples, which are
illustrative but not prescriptive, show how an instance may cache the
entity object’s state:

[#50421764_pgfId-1285085]##An instance loads the entire entity object’s
state in the ejbLoad method and caches it until the container invokes
the ejbStore method. The business methods read and write the cached
entity state. The ejbStore method writes the updated parts of the entity
object’s state to the database.

[#50421764_pgfId-1285097]##An instance loads the most frequently used
part of the entity object’s state in the ejbLoad method and caches it
until the container invokes the ejbStore method. Additional parts of the
entity object’s state are loaded as needed by the business methods. The
ejbStore method writes the updated parts of the entity object’s state to
the database.

[#50421764_pgfId-1285110]##An instance does not cache any entity
object’s state between business methods. The business methods access and
modify the entity object’s state directly in the database. The ejbLoad
and ejbStore methods have an empty implementation.

[#50421764_pgfId-1285121]##We expect that most entity developers will
not manually code the cache management and data access calls in the
entity bean class. We expect that they will rely on application
development tools to provide various data access components that
encapsulate data access and provide state caching.

====== [#50421764_pgfId-1307482]##[#50421764_35309]##ejbLoad and ejbStore with the NotSupported Transaction Attribute

[#50421764_pgfId-1307495]##The use of the
[#50421764_marker-1503207]##ejbLoad and ejbStore methods for caching an
entity object’s state in the instance works well only if the container
can use transaction boundaries to drive the ejbLoad and ejbStore
methods. When the
[#50421764_marker-1503205]##NotSupportedlink:#pgfId-1307572[26]
transaction attribute is assigned to a component interface method, the
corresponding enterprise bean class method executes with an unspecified
transaction context (See EJB Core Contracts and Requirements document
link:Ejb.htm#50421764_39461[See EJB 3.2 Core Contracts and Requirements.
http://jcp.org/en/jsr/detail?id=345] Subsection “Handling of Methods
that Run with an unspecified transaction context”). This means that the
container does not have any well-defined transaction boundaries to drive
the ejbLoad and ejbStore methods on the instance.

[#50421764_pgfId-1307585]##Therefore, the ejbLoad and
[#50421764_marker-1503206]##ejbStore methods are “unreliable” for the
instances that the container uses to dispatch the methods with an
unspecified transaction context. The following are the only guarantees
that the container provides for the instances that execute the methods
with an unspecified transaction context:

[#50421764_pgfId-1307625]##The container invokes at least one ejbLoad
between ejbActivate and the first business method in the instance.

[#50421764_pgfId-1307629]##The container invokes at least one ejbStore
between the last business method on the instance and the ejbPassivate
methodlink:#pgfId-1630834[27].

[#50421764_pgfId-1307719]##Because the entity object’s state accessed
between the ejbLoad and ejbStore method pair is not protected by a
transaction boundary for the methods that execute with an unspecified
transaction context, the Bean Provider should not attempt to use the
ejbLoad and ejbStore methods to control caching of the entity object’s
state in the instance. Typically, the implementation of the ejbLoad and
ejbStore methods should be a no-op (i.e., an empty method), and each
business method should access the entity object’s state directly in the
database.

====== [#50421764_pgfId-1284935]##[#50421764_33795]##Finder Method Return Type

====== [#50421764_pgfId-1259491]##Single-Object Finder

[#50421764_pgfId-1318928]##[#50421764_marker-1318932]##Some finder
methods (such as ejbFindByPrimaryKey) are designed to return at most one
entity object. For single-object finders, the result type of a
find<METHOD>method defined in the entity bean’s remote home interface is
the entity bean’s remote interface, and the result type of the
find<METHOD>method defined in the entity bean’s local home interface is
the entity bean’s local interface. The result type of the corresponding
ejbFind<METHOD> method defined in the entity’s implementation class is
the entity bean’s primary key type.

[#50421764_pgfId-1259484]##The following code illustrates the definition
of a single-object finder on the remote home interface.

[#50421764_pgfId-1259428]##// Entity’s home interface

[#50421764_pgfId-1259469]##public AccountHome extends javax.ejb.EJBHome
\{

[#50421764_pgfId-1259429]## ...

[#50421764_pgfId-1259430]## Account findByPrimaryKey(AccountPrimaryKey
primkey)

[#50421764_pgfId-1259431]## throws FinderException, RemoteException;

[#50421764_pgfId-1259432]## ...

[#50421764_pgfId-1259433]##}

[#50421764_pgfId-1474358]##Note that a finder method defined on the
local home interface, however, must not throw the _RemoteException_ .

[#50421764_pgfId-1259468]##// Entity’s implementation class

[#50421764_pgfId-1259460]##public AccountBean implements
javax.ejb.EntityBean \{

[#50421764_pgfId-1259437]## ...

[#50421764_pgfId-1259438]## public AccountPrimaryKey
ejbFindByPrimaryKey(

[#50421764_pgfId-1259439]## AccountPrimaryKey primkey)

[#50421764_pgfId-1259440]## throws FinderException

[#50421764_pgfId-1259441]## \{

[#50421764_pgfId-1259442]## ...

[#50421764_pgfId-1259443]## }

[#50421764_pgfId-1259444]## ...

[#50421764_pgfId-1259445]##}

====== [#50421764_pgfId-1259413]##Multi-Object Finders

[#50421764_pgfId-1259570]##Some finder methods are designed to return
multiple entity objects. For [#50421764_marker-1503208]##multi-object
finders defined in the entity bean’s remote home interface, the result
type of the find<METHOD>method is a collection of objects implementing
the entity bean’s remote interface. For multi-object finders defined in
the entity bean’s local home interface, the result type is a collection
of objects implementing the entity bean’s local interface. In either
case, the result type of the corresponding ejbFind<METHOD>
implementation method defined in the entity bean’s implementation class
is a collection of objects of the entity bean’s primary key type.

[#50421764_pgfId-1259342]##The Bean Provider can choose two types to
define a [#50421764_marker-1503209]##collection type for a finder:

[#50421764_pgfId-1390676]##the Java™ 2
[#50421764_marker-1503210]##java.util.Collection interface

[#50421764_pgfId-1259634]##the JDK™ 1.1
[#50421764_marker-1503211]##java.util.Enumeration interface

[#50421764_pgfId-1390680]##A Bean Provider targeting containers and
clients based on Java 2 should use the java.util.Collection interface
for the finder’s result type.

[#50421764_pgfId-1259344]##A Bean Provider who wants to ensure that the
entity bean is compatible with containers and clients based on JDK 1.1
must use the java.util.Enumeration interface for the finder’s result
typelink:#pgfId-1259713[28].

[#50421764_pgfId-1264293]##The Bean Provider must ensure that the
objects in the java.util.Enumeration or java.util.Collection returned
from the ejbFind<METHOD> method are instances of the entity bean’s
primary key class.

[#50421764_pgfId-1381620]##A client program must use the
[#50421764_marker-1503212]##PortableRemoteObject.narrow method to
convert the objects contained in the collections returned by a finder
method on the entity bean’s remote home interface to the entity bean’s
remote interface type.

[#50421764_pgfId-1259667]##[#50421764_marker-1318937]##The following is
an example of a multi-object finder method definition that is compatible
with containers and clients based on Java 2:

[#50421764_pgfId-1259668]##// Entity’s remote home interface

[#50421764_pgfId-1259772]##public AccountHome extends javax.ejb.EJBHome
\{

[#50421764_pgfId-1259670]## ...

[#50421764_pgfId-1276350]## java.util.Collection
findLargeAccounts(double limit)

[#50421764_pgfId-1276351]## throws FinderException, RemoteException;

[#50421764_pgfId-1276352]## ...

[#50421764_pgfId-1259674]##}

[#50421764_pgfId-1259676]## 

[#50421764_pgfId-1259677]##// Entity’s implementation class

[#50421764_pgfId-1259780]##public AccountBean implements
javax.ejb.EntityBean \{

[#50421764_pgfId-1259679]## ...

[#50421764_pgfId-1259680]## public java.util.Collection
ejbFindLargeAccounts(

[#50421764_pgfId-1259681]## double limit) throws FinderException

[#50421764_pgfId-1259683]## \{

[#50421764_pgfId-1259684]## ...

[#50421764_pgfId-1259685]## }

[#50421764_pgfId-1259686]## ...

[#50421764_pgfId-1259687]##}

[#50421764_pgfId-1390705]##The following is an example of a multi-object
finder method definition compatible with containers and clients that are
based on both JDK 1.1 and Java 2:

[#50421764_pgfId-1390706]##// Entity’s remote home interface

[#50421764_pgfId-1390707]##public AccountHome extends javax.ejb.EJBHome
\{

[#50421764_pgfId-1390708]## ...

[#50421764_pgfId-1390709]## java.util.Enumeration
findLargeAccounts(double limit)

[#50421764_pgfId-1390710]## throws FinderException, RemoteException;

[#50421764_pgfId-1390711]## ...

[#50421764_pgfId-1390712]##}

[#50421764_pgfId-1390714]## 

[#50421764_pgfId-1390715]##// Entity’s implementation class

[#50421764_pgfId-1390716]##public AccountBean implements
javax.ejb.EntityBean \{

[#50421764_pgfId-1390717]## ...

[#50421764_pgfId-1390718]## public java.util.Enumeration
ejbFindLargeAccounts(

[#50421764_pgfId-1390719]## double limit) throws FinderException

[#50421764_pgfId-1390720]## \{

[#50421764_pgfId-1390721]## ...

[#50421764_pgfId-1390722]## }

[#50421764_pgfId-1390723]## ...

[#50421764_pgfId-1390724]##}

====== [#50421764_pgfId-1555461]##Timer Notifications

[#50421764_pgfId-1555462]##An entity bean can be registered with the EJB
Timer Service for time-based event notifications if it implements the
_javax.ejb.TimedObject_ interface. The container invokes the bean
instance’s _ejbTimeout_ method when a timer for the bean has expired.
See link:Ejb.htm#50421764_49136[See Timer Service].

====== [#50421764_pgfId-1202082]##[#50421764_30425]##Standard Application Exceptions for Entities

[#50421764_pgfId-1263936]##[#50421764_marker-1318938]##The EJB
specification defines the following standard application exceptions:

[#50421764_pgfId-1263947]##javax.ejb.CreateException

[#50421764_pgfId-1263948]##javax.ejb.DuplicateKeyException

[#50421764_pgfId-1263949]##javax.ejb.FinderException

[#50421764_pgfId-1263950]##javax.ejb.ObjectNotFoundException

[#50421764_pgfId-1263951]##javax.ejb.RemoveException

====== [#50421764_pgfId-1263956]##CreateException

[#50421764_pgfId-1301912]##[#50421764_marker-1318944]##From the client’s
perspective, a CreateException (or a subclass of CreateException)
indicates that an application level error occurred during the
create<METHOD> operation. If a client receives this exception, the
client does not know, in general, whether the entity object was created
but not fully initialized, or not created at all. Also, the client does
not know whether or not the transaction has been marked for rollback.
(However, the client may determine the transaction status using the
UserTransaction interface or the _setRollbackOnly_ method of the
_EJBContext_ interface.)

[#50421764_pgfId-1301913]##The Bean Provider throws the CreateException
(or subclass of CreateException) from the ejbCreate<METHOD> and
ejbPostCreate<METHOD> methods to indicate an application-level error
from the create or initialization operation. Optionally, the Bean
Provider may mark the transaction for rollback before throwing this
exception.

[#50421764_pgfId-1264054]##The Bean Provider is encouraged to mark the
transaction for rollback only if data integrity would be lost if the
transaction were committed by the client. Typically, when a
_CreateException_ is thrown, it leaves the database in a consistent
state, allowing the client to recover. For example, _ejbCreate_ may
throw the _CreateException_ to indicate that the some of the arguments
to the _create<METHOD>_ method are invalid.

[#50421764_pgfId-1264055]##The container treats the CreateException as
any other application exception. See Section
link:Ejb.htm#50421764_28132[See Container Provider Responsibilities].

====== [#50421764_pgfId-1263960]##DuplicateKeyException

[#50421764_pgfId-1264071]##[#50421764_marker-1318945]##The
DuplicateKeyException is a subclass of CreateException. It is thrown by
the ejbCreate<METHOD> method to indicate to the client that the entity
object cannot be created because an entity object with the same key
already exists. The unique key causing the violation may be the primary
key, or another key defined in the underlying database.

[#50421764_pgfId-1264094]##Normally, the Bean Provider should not mark
the transaction for rollback before throwing the exception.

[#50421764_pgfId-1264097]##When the client receives the
DuplicateKeyException, the client knows that the entity was not created,
and that the client’s transaction has not typically been marked for
rollback.

====== [#50421764_pgfId-1263964]##FinderException

[#50421764_pgfId-1264106]##[#50421764_marker-1318946]##From the client’s
perspective, a FinderException (or a subclass of FinderException)
indicates that an application level error occurred during the find
operation. Typically, the client’s transaction has not been marked for
rollback because of the FinderException.

[#50421764_pgfId-1264194]##The Bean Provider throws the FinderException
(or subclass of FinderException) from the ejbFind<METHOD> method to
indicate an application-level error in the finder method. The Bean
Provider should not, typically, mark the transaction for rollback before
throwing the FinderException.

[#50421764_pgfId-1264198]##The container treats the FinderException as
any other application exception. See Section
link:Ejb.htm#50421764_28132[See Container Provider Responsibilities].

====== [#50421764_pgfId-1264199]##ObjectNotFoundException

[#50421764_pgfId-1264202]##[#50421764_marker-1318955]##The
ObjectNotFoundException is a subclass of FinderException. It is thrown
by the ejbFind<METHOD> method to indicate that the requested entity
object does not exist.

[#50421764_pgfId-1264212]##Only single-object finders (see Subsection
link:Ejb.htm#50421764_33795[See Finder Method Return Type]) should throw
this exception. Multi-object finders must not throw this exception.
Multi-object finders should return an empty collection as an indication
that no matching objects were found.

====== [#50421764_pgfId-1263990]##RemoveException

[#50421764_pgfId-1264243]##[#50421764_marker-1318964]##From the client’s
perspective, a RemoveException (or a subclass of RemoveException)
indicates that an application level error occurred during a remove
operation. If a client receives this exception, the client does not
know, in general, whether the entity object was removed or not. The
client also does not know if the transaction has been marked for
rollback. (However, the client may determine the transaction status
using the UserTransaction interface.)

[#50421764_pgfId-1264244]##The Bean Provider throws the RemoveException
(or subclass of RemoveException) from the ejbRemove method to indicate
an application-level error from the entity object removal operation.
Optionally, the Bean Provider may mark the transaction for rollback
before throwing this exception.

[#50421764_pgfId-1301951]##The Bean Provider is encouraged to mark the
transaction for rollback only if data integrity would be lost if the
transaction were committed by the client. Typically, when a
_RemoveException_ is thrown, it leaves the database in a consistent
state, allowing the client to recover.

[#50421764_pgfId-1301955]##[#50421764_marker-1318943]##The container
treats the RemoveException as any other application exception. See
Section link:Ejb.htm#50421764_28132[See Container Provider
Responsibilities].

====== [#50421764_pgfId-1259831]##Commit Options

[#50421764_pgfId-1259857]##[#50421764_marker-1318965]##The Entity Bean
protocol is designed to give the container the flexibility to select the
disposition of the instance state at transaction commit time. This
flexibility allows the container to optimally manage the caching of
entity object’s state and the association of an entity object identity
with the enterprise bean instances.

[#50421764_pgfId-1259858]##The container can select from the following
[#50421764_marker-1503213]##commit-time options:

[#50421764_pgfId-1259859]##Option A: The container caches a “ready”
instance between transactions. The container ensures that the instance
has exclusive access to the state of the object in the persistent
storage. Therefore, the container does not have to synchronize the
instance’s state from the persistent storage at the beginning of the
next transaction.

[#50421764_pgfId-1259860]##Option B: The container caches a “ready”
instance between transactions. In contrast to Option A, in this option
the container does not ensure that the instance has exclusive access to
the state of the object in the persistent storage. Therefore, the
container must synchronize the instance’s state from the persistent
storage at the beginning of the next transaction.

[#50421764_pgfId-1259861]##Option _C_ : The container does not cache a
“ready” instance between transactions. The container returns the
instance to the pool of available instances after a transaction has
completed.

[#50421764_pgfId-1259862]##The following table provides a summary of the
commit-time options.

======= [#50421764_pgfId-1682827]##

image:Ejb-5.gif[image]

Summary of Commit-Time Options

[#50421764_pgfId-1682835]## 

[#50421764_pgfId-1682837]##Write instance state to database

[#50421764_pgfId-1682839]##Instance stays

[#50421764_pgfId-1682840]##ready

[#50421764_pgfId-1682842]##Instance state remains valid

[#50421764_pgfId-1682844]##Option A

[#50421764_pgfId-1682846]##Yes

[#50421764_pgfId-1682848]##Yes

[#50421764_pgfId-1682850]##Yes

[#50421764_pgfId-1682852]##Option B

[#50421764_pgfId-1682854]##Yes

[#50421764_pgfId-1682856]##Yes

[#50421764_pgfId-1682858]##No

[#50421764_pgfId-1682860]##Option C

[#50421764_pgfId-1682862]##Yes

[#50421764_pgfId-1682864]##No

[#50421764_pgfId-1682866]##No

[#50421764_pgfId-1259854]##Note that the container synchronizes the
instance’s state with the persistent storage at transaction commit for
all three options.

[#50421764_pgfId-1259947]##The selection of the commit option is
transparent to the entity bean implementation—the entity bean will work
correctly regardless of the commit-time option chosen by the container.
The Bean Provider writes the entity bean in the same way.

====== [#50421764_pgfId-1259853]##[#50421764_34002]##Concurrent Access from Multiple Transactions

[#50421764_pgfId-1202083]##When writing the entity bean business
methods, the Bean Provider does not have to worry about
[#50421764_marker-1503214]##concurrent access from multiple
transactions. The Bean Provider may assume that the container will
ensure appropriate synchronization for entity objects that are accessed
concurrently from multiple transactions.

[#50421764_pgfId-1211285]##[#50421764_marker-1318968]##The container
typically uses one of the following implementation strategies to achieve
proper synchronization. (These strategies are illustrative, not
prescriptive.)

[#50421764_pgfId-1282883]##The container activates multiple instances of
the entity bean, one for each transaction in which the entity object is
being accessed. The transaction synchronization is performed
automatically by the underlying database during the database access
calls performed by the business methods and the _ejbTimeout_ method; and
by the _ejbLoad_ , _ejbCreate<METHOD>_ , _ejbStore_ , and _ejbRemove_
methods. The database system provides all the necessary transaction
synchronization; the container does not have to perform any
synchronization logic.

======= [#50421764_pgfId-1282921]##

image:Ejb-5.gif[image]

[#50421764_32401]##Multiple Clients Can Access the Same Entity Object
Using Multiple Instances

image:Ejb-41.gif[image]

[#50421764_pgfId-1282932]##With this strategy, the type of lock acquired
by _ejbLoad_ leads to a trade-off. If _ejbLoad_ acquires an exclusive
lock on the instance's state in the database, then throughput of
read-only transactions could be impacted. If _ejbLoad_ acquires a shared
lock and the instance is updated, then _ejbStore_ will need to promote
the lock to an exclusive lock. This may cause a deadlock if it happens
concurrently under multiple transactions.

[#50421764_pgfId-1282922]##The container acquires exclusive access to
the entity object’s state in the database. The container activates a
single instance and serializes the access from multiple transactions to
this instance. The commit-time option A applies to this type of
container.

======= [#50421764_pgfId-1211270]##

image:Ejb-5.gif[image]

Multiple Clients Can Access the Same Entity Object Using Single Instance

image:Ejb-42.gif[image]

====== [#50421764_pgfId-1211273]##Non-reentrant and R[#50421764_31944]##e-entrant Instances

[#50421764_pgfId-1202163]##[#50421764_marker-1318969]##An entity Bean
Provider can specify that an entity bean is non-reentrant. If an
instance of a non-reentrant entity bean executes a client request in a
given transaction context, and another request with the same transaction
context arrives for the same entity object, the container will throw an
exception to the second request. This rule allows the Bean Provider to
program the entity bean as single-threaded, non-reentrant code.

[#50421764_pgfId-1202164]##The functionality of some entity beans may
require [#50421764_marker-1503217]##loopbacks in the same transaction
context. An example of a loopback is when the client calls entity object
A, A calls entity object B, and B calls back A in the same transaction
context. The entity bean’s method invoked by the loopback shares the
current execution context (which includes the transaction and security
contexts) with the bean’s method invoked by the client.

[#50421764_pgfId-1211351]##If the entity bean is specified as
non-reentrant in the deployment descriptor, the container must reject an
attempt to re-enter the instance via the entity bean’s component
interface while the instance is executing a business method. (This can
happen, for example, if the instance has invoked another enterprise
bean, and the other enterprise bean tries to make a loopback call.) If
the attempt is made to reenter the instance through the remote
interface, the container must throw the _java.rmi.RemoteException_ to
the caller. If the attempt is made to reenter the instance through the
local interface, the container must throw the _javax.ejb.EJBException_
to the caller. The container must allow the call if the bean’s
deployment descriptor specifies that the entity bean is re-entrant.

[#50421764_pgfId-1211325]##Re-entrant entity beans must be programmed
and used with caution. First, the Bean Provider must code the entity
bean with the anticipation of a loopback call. Second, since the
container cannot, in general, tell a loopback from a concurrent call
from a different client, the client programmer must be careful to avoid
code that could lead to a concurrent call in the same transaction
context.

[#50421764_pgfId-1211343]##Concurrent calls in the same transaction
context targeted at the same entity object are illegal and may lead to
unpredictable results. Since the container cannot, in general,
distinguish between an illegal concurrent call and a legal loopback,
application programmers are encouraged to avoid using loopbacks. Entity
beans that do not need callbacks should be marked as non-reentrant in
the deployment descriptor, allowing the container to detect and prevent
illegal concurrent calls from clients.

==== [#50421764_pgfId-1312026]##[#50421764_16001]##Responsibilities of the Enterprise Bean Provider

image:Ejb-4.gif[image]

[#50421764_pgfId-1312027]##This section describes the responsibilities
of a bean-managed persistence entity Bean Provider to ensure that the
entity bean can be deployed in any EJB container.

====== [#50421764_pgfId-1202171]##Classes and Interfaces

[#50421764_pgfId-1202172]##The Bean Provider is responsible for
providing the following class files:

[#50421764_pgfId-1202173]##Entity bean class and any dependent classes

[#50421764_pgfId-1478877]##Primary key class

[#50421764_pgfId-1202174]##Entity bean’s remote interface and remote
home interface, if the entity bean provides a remote client view

[#50421764_pgfId-1474404]##Entity bean’s local interface and local home
interface, if the entity bean provides a local client view

[#50421764_pgfId-1478869]##The Bean Provider must provide a remote
interface and a remote home interface or a local interface an local home
interface for the bean. The Bean Provider may provide a remote
interface, remote home interface, local interface, and local home
interface for the bean. Other combinations are not allowed.

====== [#50421764_pgfId-1202176]##Enterprise Bean Class

[#50421764_pgfId-1202177]##[#50421764_marker-1318974]##The following are
the requirements for an entity bean class:

[#50421764_pgfId-1202178]##The class must implement, directly or
indirectly, the javax.ejb.EntityBean interface.

[#50421764_pgfId-1555468]##The class may implement, directly or
indirectly, the _javax.ejb.TimedObject_ interface.

[#50421764_pgfId-1282596]##The class must be defined as public and must
not be abstract. The class must be a top level class.

[#50421764_pgfId-1282597]##The class must not be defined as final.

[#50421764_pgfId-1282598]##The class must define a public constructor
that takes no arguments.

[#50421764_pgfId-1296407]##The class must not define the finalize
method.

[#50421764_pgfId-1211385]##The class may, but is not required to,
implement the [#50421764_marker-1503218]##entity bean’s component
interfacelink:#pgfId-1211384[29]. If the class implements the entity
bean’s component interface, the class must provide no-op implementations
of the methods defined in the javax.ejb.EJBObject or
javax.ejb.EJBLocalObject interface. The container will never invoke
these methods on the bean instances at runtime.

[#50421764_pgfId-1211601]##A no-op implementation of these methods is
required to avoid defining the entity bean class as abstract.

[#50421764_pgfId-1211386]##The entity bean class must implement the
business methods, and the ejbCreate<METHOD>, ejbPostCreate<METHOD>,
ejbFind<METHOD>, and ejbHome<METHOD> methods as described later in this
section.

[#50421764_pgfId-1265300]##The entity bean class may have superclasses
and/or superinterfaces. If the [#50421764_marker-1503219]##entity bean
has superclasses, the business methods, the ejbCreate and ejbPostCreate
methods, the finder methods, and the methods of the EntityBean interface
or the _TimedObject_ interface may be implemented in the enterprise bean
class or in any of its superclasses.

[#50421764_pgfId-1316592]##The entity bean class is allowed to implement
other methods (for example [#50421764_marker-1503220]##helper methods
invoked internally by the business methods) in addition to the methods
required by the EJB specification.

====== [#50421764_pgfId-1318981]##[#50421764_15106]##ejbCreate<METHOD> Methods

[#50421764_pgfId-1511491]##[#50421764_marker-1318982]##[#50421764_marker-1511490]##The
entity bean class must implement the ejbCreate<METHOD> methods that
correspond to the create<METHOD> methods specified in the entity bean’s
home interface.

[#50421764_pgfId-1318983]##The entity bean class may define zero or more
ejbCreate<METHOD> methods whose signatures must follow these rules:

[#50421764_pgfId-1202190]##The method name must have ejbCreate as its
prefix.

[#50421764_pgfId-1202191]##The method must be declared as public.

[#50421764_pgfId-1296735]##The method must not be declared as final or
static.

[#50421764_pgfId-1202192]##The return type must be the entity bean’s
primary key type.

[#50421764_pgfId-1202193]##The method argument and return value types
must be legal types for RMI-IIOP if the e _jbCreate<METHOD>_ corresponds
to a _create<METHOD>_ on the entity bean’s remote home interface.

[#50421764_pgfId-1202194]##The _throws_ clause may define arbitrary
application specific exceptions, including the
javax.ejb.CreateException.

[#50421764_pgfId-1379035]##EJB 1.0 allowed the _ejbCreate_ method to
throw the java.rmi.RemoteException to indicate a non-application
exception. This practice was deprecated in EJB 1.1—an EJB 1.1 or EJB 2.0
or later compliant enterprise bean should throw the
_javax.ejb.EJBException_ or another _java.lang.RuntimeException_ to
indicate non-application exceptions to the container (see Section
link:Ejb.htm#50421764_33935[See System Exceptions]). An EJB 2.0 or later
enterprise bean should not throw the _java.rmi.RemoteException_ . from
the _ejbCreate_ method.

[#50421764_pgfId-1309160]##The entity object created by the
ejbCreate<METHOD> method must have a unique primary key. This means that
the primary key must be different from the primary keys of all the
existing entity objects within the same home. The ejbCreate<METHOD>
method should throw the DuplicateKeyException on an attempt to create an
entity object with a duplicate primary key. However, it is legal to
reuse the primary key of a previously removed entity object.

====== [#50421764_pgfId-1202202]##ejbPostCreate<METHOD> Methods

[#50421764_pgfId-1202203]##[#50421764_marker-1318986]##For each
ejbCreate<METHOD> method, the entity bean class must define a matching
ejbPostCreate<METHOD> method, using the following rules:

[#50421764_pgfId-1202204]##The method name must have ejbPostCreate as
its prefix.

[#50421764_pgfId-1202205]##The method must be declared as public.

[#50421764_pgfId-1296728]##The method must not be declared as final or
static.

[#50421764_pgfId-1202206]##The return type must be _void_ .

[#50421764_pgfId-1202207]##The method arguments must be the same as the
arguments of the matching ejbCreate<METHOD> method.

[#50421764_pgfId-1202208]##The _throws_ clause may define arbitrary
application specific exceptions, including the
javax.ejb.CreateException.

[#50421764_pgfId-1474449]##EJB 1.0 allowed the _ejbPostCreate_ method to
throw the java.rmi.RemoteException to indicate a non-application
exception. This practice was deprecated in EJB 1.1—an EJB 1.1 or EJB 2.0
or later compliant enterprise bean should throw the
_javax.ejb.EJBException_ or another _java.lang.RuntimeException_ to
indicate non-application exceptions to the container (see Section
link:Ejb.htm#50421764_33935[See System Exceptions]). An EJB 2.0 or later
enterprise bean should not throw the _java.rmi.RemoteException_ . from
the _ejbPostCreate_ method.

====== [#50421764_pgfId-1474453]##ejbFind Methods

[#50421764_pgfId-1202214]##[#50421764_marker-1318987]##The entity bean
class may also define additional ejbFind<METHOD> finder methods.

[#50421764_pgfId-1202215]##The signatures of the finder methods must
follow the following rules:

[#50421764_pgfId-1202216]##A finder method name must start with the
prefix “ _ejbFind_ ” (e.g. ejbFindByPrimaryKey, ejbFindLargeAccounts,
ejbFindLateShipments).

[#50421764_pgfId-1202217]##A finder method must be declared as public.

[#50421764_pgfId-1318776]##The method must not be declared as final or
static.

[#50421764_pgfId-1318777]##The method argument types must be legal types
for RMI-IIOP if the _ejbFind<METHOD>_ method corresponds to a
_find<METHOD>_ method on the entity bean’s remote home interface.

[#50421764_pgfId-1318778]##The return type of a finder method must be
the entity bean’s primary key type, or a collection of primary keys (see
Subsection link:Ejb.htm#50421764_33795[See Finder Method Return Type]).

[#50421764_pgfId-1259542]##The _throws_ clause may define arbitrary
application specific exceptions, including the
javax.ejb.FinderException.

[#50421764_pgfId-1379062]##EJB 1.0 allowed the finder methods to throw
the java.rmi.RemoteException to indicate a non-application exception.
This practice was deprecated in EJB 1.1—an EJB 1.1 or EJB 2.0 or later
compliant enterprise bean should throw the _javax.ejb.EJBException_ or
another _java.lang.RuntimeException_ to indicate non-application
exceptions to the container (see Section link:Ejb.htm#50421764_33935[See
System Exceptions]). An EJB 2.0 or later enterprise bean should not
throw the _java.rmi.RemoteException_ . from the _ejbFind_ method.

[#50421764_pgfId-1202226]##Every entity bean must define the
ejbFindByPrimaryKey method. The result type for this method must be the
primary key type (i.e., the ejbFindByPrimaryKey method must be a
single-object finder).

====== [#50421764_pgfId-1368888]##ejbHome<METHOD> Methods

[#50421764_pgfId-1368889]##The entity bean class may define zero or more
home methods whose signatures must follow the following rules:

[#50421764_pgfId-1488677]##An _ejbHome<METHOD>_
[#50421764_marker-1503221]## method must exist for every home _<METHOD>_
method on the entity bean’s remote home or local home interface. The
method name must have ejbHome as its prefix followed by the name of the
_<METHOD>_ method in which the first character has been uppercased.

[#50421764_pgfId-1368891]##The method must be declared as public.

[#50421764_pgfId-1368892]##The method must not be declared as static.

[#50421764_pgfId-1368893]##The method argument and return value types
must be legal types for RMI-IIOP if the _ejbHome_ method corresponds to
a method on the entity bean’s remote home interface.

[#50421764_pgfId-1378795]##The _throws_ clause may define arbitrary
application specific exceptions. The _throws_ clause must not throw the
_java.rmi.RemoteException_ .

====== [#50421764_pgfId-1202227]##Business Methods

[#50421764_pgfId-1202228]##[#50421764_marker-1318988]##The entity bean
class may define zero or more business methods whose signatures must
follow these rules:

[#50421764_pgfId-1202229]##The method names can be arbitrary, but they
must not start with ‘ _ejb_ ’ to avoid conflicts with the callback
methods used by the EJB architecture.

[#50421764_pgfId-1202231]##The business method must be declared as
public.

[#50421764_pgfId-1296714]##The method must not be declared as final or
static.

[#50421764_pgfId-1202232]##The method argument and return value types
must be legal types for RMI-IIOP if the method corresponds to a business
method on the entity bean’s remote interface.

[#50421764_pgfId-1202233]##The _throws_ clause may define arbitrary
application specific exceptions.

[#50421764_pgfId-1379077]##EJB 1.0 allowed the business methods to throw
the java.rmi.RemoteException to indicate a non-application exception.
This practice was deprecated in EJB 1.1—an EJB 1.1 or EJB 2.0 or later
compliant enterprise bean should throw the _javax.ejb.EJBException_ or
another _java.lang.RuntimeException_ to indicate non-application
exceptions to the container (see Section link:Ejb.htm#50421764_33935[See
System Exceptions]). An EJB 2.0 or later enterprise bean should not
throw the _java.rmi.RemoteException_ . from a business method.

====== [#50421764_pgfId-1202235]##Entity Bean’s Remote Interface

[#50421764_pgfId-1202236]##[#50421764_marker-1318989]##The following are
the requirements for the entity bean’s remote interface:

[#50421764_pgfId-1202237]##The interface must extend the
[#50421764_marker-1503222]##javax.ejb.EJBObject interface.

[#50421764_pgfId-1202238]##The methods defined in the remote interface
must follow the rules for RMI-IIOP. This means that their argument and
return value types must be valid types for RMI-IIOP, and their _throws_
clauses must include the java.rmi.RemoteException.

[#50421764_pgfId-1287647]##The [#50421764_marker-1503223]##remote
interface is allowed to have superinterfaces. Use of interface
inheritance is subject to the RMI-IIOP rules for the definition of
remote interfaces.

[#50421764_pgfId-1202239]##For each method defined in the remote
interface, there must be a matching method in the entity bean’s class.
The matching method must have:

[#50421764_pgfId-1202240]##The same name.

[#50421764_pgfId-1202241]##The same number and types of its arguments,
and the same return type.

[#50421764_pgfId-1202242]##All the exceptions defined in the _throws_
clause of the matching method of the enterprise bean class must be
defined in the _throws_ clause of the method of the remote interface.

[#50421764_pgfId-1474545]##The remote interface methods must not expose
local interface types, local home interface types, timers or timer
handles, or the managed collection classes that are used for entity
beans with container-managed persistence as arguments or results.

====== [#50421764_pgfId-1202243]##Entity Bean’s Remote Home Interface

[#50421764_pgfId-1202244]##[#50421764_marker-1318990]##The following are
the requirements for the entity bean’s remote home interface:

[#50421764_pgfId-1202245]##The interface must extend the
javax.ejb.EJBHome interface.

[#50421764_pgfId-1202246]##The methods defined in this interface must
follow the rules for RMI-IIOP. This means that their argument and return
types must be of valid types for RMI-IIOP, and that their _throws_
clauses must include the java.rmi.RemoteException.

[#50421764_pgfId-1287652]##The remote home interface is allowed to have
superinterfaces. Use of interface inheritance is subject to the RMI-IIOP
rules for the definition of remote interfaces.

[#50421764_pgfId-1202247]##Each method defined in the remote home
interface must be one of the following:

[#50421764_pgfId-1202248]##A create method.

[#50421764_pgfId-1202249]##A finder method.

[#50421764_pgfId-1368899]##A home method.

[#50421764_pgfId-1202250]##Each create method must be the named “
_create<METHOD>_ ”, and it must match one of the ejbCreate _<METHOD>_
methods defined in the enterprise bean class. The matching ejbCreate
_<METHOD>_ method must have the same number and types of its arguments.
(Note that the return type is different.)

[#50421764_pgfId-1202251]##The return type for a create<METHOD> method
must be the entity bean’s remote interface type.

[#50421764_pgfId-1202252]##All the exceptions defined in the _throws_
clause of the matching ejbCreate _<METHOD>_ and ejbPostCreate _<METHOD>_
methods of the enterprise bean class must be included in the _throws_
clause of the matching create<METHOD> method of the remote home
interface (i.e., the set of exceptions defined for the create<METHOD>
method must be a superset of the union of exceptions defined for the
ejbCreate<METHOD> and ejbPostCreate<METHOD> methods).

[#50421764_pgfId-1202253]##The _throws_ clause of a create _<METHOD>_
method must include the javax.ejb.CreateException.

[#50421764_pgfId-1202254]##Each finder method must be named “
_find<METHOD>_ ” (e.g. findLargeAccounts), and it must match one of the
ejbFind<METHOD> methods defined in the entity bean class (e.g.
ejbFindLargeAccounts). The matching ejbFind<METHOD> method must have the
same number and types of arguments. (Note that the return type may be
different.)

[#50421764_pgfId-1202255]##The return type for a find<METHOD> method
must be the entity bean’s remote interface type (for a single-object
finder), or a collection thereof (for a multi-object finder).

[#50421764_pgfId-1211403]##The remote home interface must always include
the findByPrimaryKey method, which is always a single-object finder. The
method must declare the primary key class as the method argument.

[#50421764_pgfId-1202256]##All the exceptions defined in the _throws_
clause of an ejbFind method of the entity bean class must be included in
the _throws_ clause of the matching find method of the remote home
interface.

[#50421764_pgfId-1202257]##The _throws_ clause of a finder method must
include the javax.ejb.FinderException.

[#50421764_pgfId-1368902]##Home methods can have arbitrary names,
provided that they do not clash with create, find, and remove method
names. The matching ejbHome method specified in the entity bean class
must have the same number and types of arguments and must return the
same type as the home method as specified in the remote home interface
of the bean.

[#50421764_pgfId-1482701]##The remote home interface methods must not
expose local interface types, local home interface types, timer handles,
or the managed collection classes that are used for entity beans with
container-managed persistence as arguments or results.

====== [#50421764_pgfId-1474485]##Entity Bean’s Local Interface

[#50421764_pgfId-1474487]##[#50421764_marker-1474486]##The following are
the requirements for the entity bean’s local interface:

[#50421764_pgfId-1474488]##The interface must extend the
javax.ejb.EJBLocalObject interface.

[#50421764_pgfId-1474489]##The _throws_ clause of a method defined on
the local interface must not include the java.rmi.RemoteException.

[#50421764_pgfId-1474490]##The local interface is allowed to have
superinterfaces.

[#50421764_pgfId-1474491]##For each method defined in the local
interface, there must be a matching method in the entity bean’s class.
The matching method must have:

[#50421764_pgfId-1474492]##The same name.

[#50421764_pgfId-1474493]##The same number and types of its arguments,
and the same return type.

[#50421764_pgfId-1474494]##All the exceptions defined in the _throws_
clause of the matching method of the enterprise Bean class must be
defined in the _throws_ clause of the method of the local interface.

====== [#50421764_pgfId-1474495]##Entity Bean’s Local Home Interface

[#50421764_pgfId-1474497]##[#50421764_marker-1474496]##The following are
the requirements for the entity bean’s local home interface:

[#50421764_pgfId-1474498]##The interface must extend the
javax.ejb.EJBLocalHome interface.

[#50421764_pgfId-1474499]##The _throws_ clause of a method on the local
home interface must not include the java.rmi.RemoteException.

[#50421764_pgfId-1474500]##The local home interface is allowed to have
superinterfaces.

[#50421764_pgfId-1474501]##Each method defined in the local home
interface must be one of the following:

[#50421764_pgfId-1474502]##A create method.

[#50421764_pgfId-1474503]##A finder method.

[#50421764_pgfId-1474504]##A home method.

[#50421764_pgfId-1474505]##Each create method must be the named “
_create<METHOD>_ ”, and it must match one of the ejbCreate _<METHOD>_
methods defined in the enterprise bean class. The matching ejbCreate
_<METHOD>_ method must have the same number and types of its arguments.
(Note that the return type is different.)

[#50421764_pgfId-1474506]##The return type for a create<METHOD> method
must be the entity bean’s local interface type.

[#50421764_pgfId-1474507]##All the exceptions defined in the _throws_
clause of the matching ejbCreate _<METHOD>_ and ejbPostCreate _<METHOD>_
methods of the enterprise bean class must be included in the _throws_
clause of the matching create<METHOD> method of the local home interface
(i.e., the set of exceptions defined for the create<METHOD> method must
be a superset of the union of exceptions defined for the
ejbCreate<METHOD> and ejbPostCreate<METHOD> methods).

[#50421764_pgfId-1474508]##The _throws_ clause of a create _<METHOD>_
method must include the javax.ejb.CreateException.

[#50421764_pgfId-1474509]##Each finder method must be named “
_find<METHOD>_ ” (e.g. findLargeAccounts), and it must match one of the
ejbFind<METHOD> methods defined in the entity bean class (e.g.
ejbFindLargeAccounts). The matching ejbFind<METHOD> method must have the
same number and types of arguments. (Note that the return type may be
different.)

[#50421764_pgfId-1474510]##The return type for a find<METHOD> method
must be the entity bean’s local interface type (for a single-object
finder), or a collection thereof (for a multi-object finder).

[#50421764_pgfId-1474511]##The local home interface must always include
the findByPrimaryKey method, which is always a single-object finder. The
method must declare the primary key class as the method argument.

[#50421764_pgfId-1474512]##All the exceptions defined in the _throws_
clause of an ejbFind method of the entity bean class must be included in
the _throws_ clause of the matching find method of the local home
interface.

[#50421764_pgfId-1474513]##The _throws_ clause of a finder method must
include the javax.ejb.FinderException.

[#50421764_pgfId-1474514]##Home methods can have arbitrary names,
provided that they do not clash with create, find, and remove method
names. The matching ejbHome method specified in the entity bean class
must have the same number and types of arguments and must return the
same type as the home method as specified in the local home interface of
the bean.

[#50421764_pgfId-1474588]##The _throws_ clause of any method on the
entity bean’s local home interface must not include the
_java.rmi.RemoteException_ .

====== [#50421764_pgfId-1202258]##[#50421764_10952]##Entity Bean’s Primary Key Class

[#50421764_pgfId-1202259]##[#50421764_marker-1318995]##The Bean Provider
must specify a primary key class in the deployment descriptor.

[#50421764_pgfId-1211420]##The primary key type must be a legal Value
Type in RMI-IIOP.

[#50421764_pgfId-1300345]##The class must provide suitable
implementation of the hashCode() and equals(Object other) methods to
simplify the management of the primary keys by client code.

==== [#50421764_pgfId-1202261]##[#50421764_18897]##The Responsibilities of the Container Provider

image:Ejb-4.gif[image]

[#50421764_pgfId-1211685]##This section describes the responsibilities
of the Container Provider to support bean-managed persistence entity
beans. The Container Provider is responsible for providing the
deployment tools, and for managing entity bean instances at runtime.

[#50421764_pgfId-1211686]##Because the EJB specification does not define
the API between deployment tools and the container, we assume that the
deployment tools are provided by the Container Provider. Alternatively,
the deployment tools may be provided by a different vendor who uses the
container vendor’s specific API.

====== [#50421764_pgfId-1202263]##Generation of Implementation Classes

[#50421764_pgfId-1202264]##[#50421764_marker-1318998]##The deployment
tools provided by the Container Provider are responsible for the
generation of additional classes when the entity bean is deployed. The
tools obtain the information that they need for generation of the
additional classes by introspecting the classes and interfaces provided
by the entity Bean Provider and by examining the entity bean’s
deployment descriptor.

[#50421764_pgfId-1202265]##The deployment tools must generate the
following classes:

[#50421764_pgfId-1202266]##A class that implements the entity bean’s
remote home interface (i.e., the entity EJBHome class).

[#50421764_pgfId-1202267]##A class that implements the entity bean’s
remote interface (i.e., the entity EJBObject class).

[#50421764_pgfId-1474594]##A class that implements the entity bean’s
local home interface (i.e., the entity EJBLocalHome class).

[#50421764_pgfId-1474595]##A class that implements the entity bean’s
local interface (i.e., the entity EJBLocalObject class).

[#50421764_pgfId-1318784]##The deployment tools may also generate a
class that mixes some container-specific code with the entity bean
class. The code may, for example, help the container to manage the
entity bean instances at runtime. Tools can use subclassing, delegation,
and code generation.

[#50421764_pgfId-1318785]##The deployment tools may also allow
generation of additional code that wraps the business methods and that
is used to customize the business logic for an existing operational
environment. For example, a wrapper for a debit function on the Account
bean may check that the debited amount does not exceed a certain limit,
or perform security checking that is specific to the operational
environment.

====== [#50421764_pgfId-1202271]##Entity EJBHome Class

[#50421764_pgfId-1318790]##[#50421764_marker-1318999]##The entity
EJBHome class, which is generated by deployment tools, implements the
entity bean’s remote home interface. This class implements the methods
of the javax.ejb.EJBHome interface, and the type-specific create,
finder, and home methods specific to the entity bean.

[#50421764_pgfId-1318791]##The implementation of each create<METHOD>
method invokes a matching ejbCreate<METHOD> method, followed by the
matching ejbPostCreate<METHOD> method, passing the create<METHOD>
parameters to these matching methods.

[#50421764_pgfId-1202274]##The implementation of the remove methods
defined in the javax.ejb.EJBHome interface must activate an instance (if
an instance is not already in the ready state) and invoke the ejbRemove
method on the instance.

[#50421764_pgfId-1202275]##The implementation of each find<METHOD>
method invokes a matching ejbFind<METHOD> method. The implementation of
the find<METHOD> method must create an entity object reference for the
primary key returned from the ejbFind<METHOD> and return the entity
object reference (i.e., EJBObject) to the client. If the ejbFind<METHOD>
method returns a collection of primary keys, the implementation of the
find<METHOD> method must create a collection of entity object references
for the primary keys and return the collection to the client.

[#50421764_pgfId-1488063]##The implementation of each <METHOD> home
method invokes a matching ejbHome<METHOD> method (in which the first
character of _<METHOD>_ is uppercased in the name of the ejbHome<METHOD>
method), passing the <METHOD> parameters to the matching method.

====== [#50421764_pgfId-1202276]##Entity EJBObject Class

[#50421764_pgfId-1202277]##[#50421764_marker-1319000]##The entity
EJBObject class, which is generated by deployment tools, implements the
entity bean’s remote interface. It implements the methods of the
javax.ejb.EJBObject interface and the business methods specific to the
entity bean.

[#50421764_pgfId-1202278]##The implementation of the remove method
(defined in the javax.ejb.EJBObject interface) must activate an instance
(if an instance is not already in the ready state) and invoke the
ejbRemove method on the instance.

[#50421764_pgfId-1202279]##The implementation of each business method
must activate an instance (if an instance is not already in the ready
state) and invoke the matching business method on the instance.

====== [#50421764_pgfId-1474606]##[#50421764_40375]##Entity EJBLocalHome Class

[#50421764_pgfId-1474608]##[#50421764_marker-1474607]##The entity
EJBLocalHome class, which is generated by deployment tools, implements
the entity bean’s local home interface. This class implements the
methods of the javax.ejb.EJBLocalHome interface, and the type-specific
create, finder, and home methods specific to the entity bean.

[#50421764_pgfId-1474609]##The implementation of each create<METHOD>
method invokes a matching ejbCreate<METHOD> method, followed by the
matching ejbPostCreate<METHOD> method, passing the create<METHOD>
parameters to these matching methods.

[#50421764_pgfId-1474610]##The implementation of the remove method
defined in the javax.ejb.EJBLocalHome interface must activate an
instance (if an instance is not already in the ready state) and invoke
the ejbRemove method on the instance.

[#50421764_pgfId-1474611]##The implementation of each find<METHOD>
method invokes a matching ejbFind<METHOD> method. The implementation of
the find<METHOD> method must create an entity object reference for the
primary key returned from the ejbFind<METHOD> and return the entity
object reference (i.e., EJBLocalObject) to the client. If the
ejbFind<METHOD> method returns a collection of primary keys, the
implementation of the find<METHOD> method must create a collection of
entity object references for the primary keys and return the collection
to the client.

[#50421764_pgfId-1488073]##The implementation of each <METHOD> home
method invokes a matching ejbHome<METHOD> method (in which the first
character of _<METHOD>_ is uppercased in the name of the ejbHome<METHOD>
method), passing the <METHOD> parameters to the matching method.

====== [#50421764_pgfId-1474614]##Entity EJBLocalObject Class

[#50421764_pgfId-1474616]##[#50421764_marker-1474615]##The entity
EJBLocalObject class, which is generated by deployment tools, implements
the entity bean’s local interface. It implements the methods of the
javax.ejb.EJBLocalObject interface and the business methods specific to
the entity bean.

[#50421764_pgfId-1474617]##The implementation of the remove method
(defined in the javax.ejb.EJBLocalObject interface) must activate an
instance (if an instance is not already in the ready state) and invoke
the ejbRemove method on the instance.

[#50421764_pgfId-1474618]##The implementation of each business method
must activate an instance (if an instance is not already in the ready
state) and invoke the matching business method on the instance.

====== [#50421764_pgfId-1202280]##Handle Class

[#50421764_pgfId-1202281]##[#50421764_marker-1319003]##The deployment
tools are responsible for implementing the handle class for the entity
bean. The handle class must be serializable by the Java Serialization
protocol.

[#50421764_pgfId-1211722]##As the handle class is not entity-bean
specific, the container may, but is not required to, use a single class
for all deployed entity beans.

====== [#50421764_pgfId-1289893]##Home Handle Class

[#50421764_pgfId-1289894]##[#50421764_marker-1319004]##The deployment
tools responsible for implementing the [#50421764_marker-1503224]##home
handle class for the entity bean. The handle class must be serializable
by the Java Serialization protocol.

[#50421764_pgfId-1289895]##Because the home handle class is not
entity-bean specific, the container may, but is not required to, use a
single class for the home handles of all deployed entity beans.

====== [#50421764_pgfId-1202282]##Metadata Class

[#50421764_pgfId-1312242]##[#50421764_marker-1319005]##The deployment
tools are responsible for implementing the class that provides metadata
information to the remote client view contract. The class must be a
valid RMI-IIOP Value Type, and must implement the javax.ejb.EJBMetaData
interface.

[#50421764_pgfId-1312243]##Because the metadata class is not entity-bean
specific, the container may, but is not required to, use a single class
for all deployed enterprise beans.

====== [#50421764_pgfId-1312244]##Instance’s Re-entrance

[#50421764_pgfId-1202287]##The container runtime must enforce the rules
defined in Section link:Ejb.htm#50421764_31944[See Non-reentrant and
Re-entrant Instances].

====== [#50421764_pgfId-1202289]##Transaction Scoping, Security, Exceptions

[#50421764_pgfId-1202290]##The container runtime must follow the rules
on [#50421764_marker-1503225]##transaction scoping and
[#50421764_marker-1503227]##exception handling described in Chapters 9
and link:Ejb.htm#50421764_13750[See Exception Handling]. The container
runtime must follow the rules on [#50421764_marker-1694680]##security
checking described in the EJB Core Contracts and Requirements document
link:Ejb.htm#50421764_39461[See EJB 3.2 Core Contracts and Requirements.
http://jcp.org/en/jsr/detail?id=345] Chapter “Security Management”.

====== [#50421764_pgfId-1313934]##[#50421764_14274]##Implementation of Object References

[#50421764_pgfId-1313935]##The container should implement
the[#50421764_marker-1503228]## distribution protocol between the client
and the container such that the object references of the remote home and
remote interfaces used by entity bean clients are usable for a long
period of time. Ideally, a client should be able to use an object
reference across a server crash and restart. An
[#50421764_marker-1503229]##object reference should become invalid only
when the entity object has been removed, or after a reconfiguration of
the server environment (for example, when the entity bean is moved to a
different EJB server or container).

[#50421764_pgfId-1313940]##The motivation for this is to simplify the
programming model for the entity bean client. While the client code
needs to have a recovery handler for the system exceptions thrown from
the individual method invocations on the home and remote interface, the
client should not be forced to re-obtain the object references.

====== [#50421764_pgfId-1381713]##EntityContext

[#50421764_pgfId-1381714]##The container must implement the
[#50421764_marker-1503230]##EntityContext.getEJBObject method such that
the bean instance can use the Java language cast to convert the returned
value to the entity bean’s remote interface type. Specifically, the bean
instance does not have to use the PortableRemoteObject.narrow method for
the type conversion.

=== [#50421764_pgfId-1377842]##[#50421764_62386]##EJB 1.1 Entity Bean Component Contract for Container-Managed Persistence

[#50421764_pgfId-1377843]##This chapter specifies the EJB 1.1 entity
bean component contract for container-managed persistence.

==== [#50421764_pgfId-1377846]##EJB 1.1 Entity Beans with Container-Managed Persistence

image:Ejb-4.gif[image]

[#50421764_pgfId-1377847]##link:Ejb.htm#50421764_16574[See EJB 2.1
Entity Bean Component Contract for Bean-Managed Persistence] describes
the component contract for entity beans with bean-managed persistence.
The contract for an EJB 1.1 entity bean with container-managed
persistence is the same as the contract for an entity bean with
bean-managed persistence as described in link:Ejb.htm#50421764_16574[See
EJB 2.1 Entity Bean Component Contract for Bean-Managed Persistence],
except for the differences described in this chapter.

[#50421764_pgfId-1471919]## _An EJB 1.1 entity bean with
container-managed persistence cannot have a local interface or local
home interface. Use of the local interfaces of other enterprise beans is
not supported for an EJB 1.1 entity bean with container-managed
persistence._

[#50421764_pgfId-1555295]##Use of the EJB Timer Service is not supported
for an EJB 1.1 entity bean with container-managed persistence. An EJB
1.1 entity bean with container-managed persistence should not implement
the _javax.ejb.TimedObject_ interface. Use of dependency injection,
interceptors, and any Java language metadata annotations is not
supported for EJB 1.1 entity beans.

====== [#50421764_pgfId-1377848]##Container-Managed Fields

[#50421764_pgfId-1377849]##An EJB 1.1 entity bean with container-managed
persistence relies on the Container Provider’s tools to generate methods
that perform data access on behalf of the entity bean instances. The
generated methods transfer data between the entity bean instance’s
variables and the underlying resource manager at the times defined by
the EJB specification. The generated methods also implement the
creation, removal, and lookup of the entity object in the underlying
database.

[#50421764_pgfId-1377850]##An entity bean with container-manager
persistence must not code explicit data access—all data access must be
deferred to the container.

[#50421764_pgfId-1377851]##The EJB 1.1 entity Bean Provider is
responsible for using the cmp-field elements of the deployment
descriptor to declare the instance’s fields that the container must load
and store at the defined times. The fields must be defined in the entity
bean class as _public_ , and must not be defined as transient.

[#50421764_pgfId-1377852]##The container is responsible for transferring
data between the entity bean’s instance variables and the underlying
data source before or after the execution of the ejbCreate, ejbRemove,
ejbLoad, and ejbStore methods, as described in the following
subsections. The container is also responsible for the implementation of
the finder methods.

[#50421764_pgfId-1377854]##[#50421764_marker-1377853]##The EJB 2.0 or
later deployment descriptor for an EJB 1.1 entity bean with
container-managed persistence indicates that the entity bean uses
container-managed persistence and that the value of its _cmp-version_
element is _1.x_ .

[#50421764_pgfId-1438649]##The EJB 1.1 component contract does not
architect support for relationships for entity beans with
container-managed persistence. The EJB 2.0 and later specifications do
not support the use of the _cmr-field_ , _ejb-relation_ , or _query_
deployment descriptor elements or their subelements for EJB 1.1 entity
beans.

[#50421764_pgfId-1377856]##The following requirements ensure that an EJB
1.1 entity bean with container-managed persistence can be deployed in
any compliant container.

[#50421764_pgfId-1377857]##The Bean Provider must ensure that the Java
types assigned to the container-managed fields are restricted to the
following: Java primitive types, Java serializable types, and references
of enterprise beans’ remote or remote home interfaces.

[#50421764_pgfId-1377858]##The Container Provider may, but is not
required to, use Java Serialization to store the container-managed
fields in the database. If the container chooses a different approach,
the effect should be equivalent to that of Java Serialization. The
container must also be capable of persisting references to enterprise
beans’ remote and remote home interfaces (for example, by storing their
handle or primary key).

[#50421764_pgfId-1377859]##Although the above requirements allow the
Bean Provider to specify almost any arbitrary type for the
container-managed fields, we expect that in practice the Bean Provider
of EJB 1.1 entity beans with container-managed persistence will use
relatively simple Java types, and that most containers will be able to
map these simple Java types to columns in a database schema to
externalize the entity state in the database, rather than use Java
serialization.

[#50421764_pgfId-1377860]##If the Bean Provider expects that the
container-managed fields will be mapped to database fields, he or she
should provide mapping instructions to the Deployer. The mapping between
the instance’s container-managed fields and the schema of the underlying
database manager will be then realized by the data access classes
generated by the Container Provider’s tools. Because entity beans are
typically coarse-grained objects, the content of the container-managed
fields may be stored in multiple rows, possibly spread across multiple
database tables. These mapping techniques are beyond the scope of the
EJB specification, and do not have to be supported by an EJB compliant
container. (The container may simply use the Java serialization protocol
in all cases).

====== [#50421764_pgfId-1377867]##[#50421764_37406]##ejbCreate, ejbPostCreate

[#50421764_pgfId-1377868]##With bean-managed persistence, the entity
Bean Provider is responsible for writing the code that inserts a record
into the database in the ejbCreate methods. However, with
container-managed persistence, the container performs the database
insert after the ejbCreate method completes.

[#50421764_pgfId-1377869]##The container must ensure that the values of
the container-managed fields are set to the Java language defaults (e.g.
0 for integer, null for pointers) prior to invoking an ejbCreate method
on an instance.

[#50421764_pgfId-1377870]##The EJB 1.1 entity Bean Provider’s
responsibility is to initialize the container-managed fields in the
ejbCreate methods from the input arguments such that when an ejbCreate
method returns, the container can extract the container-managed fields
from the instance and insert them into the database.

[#50421764_pgfId-1377871]##The ejbCreate methods must be defined to
return the primary key class type. The implementation of the ejbCreate
methods should be coded to return a null. The returned value is ignored
by the container.

[#50421764_pgfId-1377872]##Note: The above requirement is to allow the
creation of an entity bean with bean-managed persistence by subclassing
an EJB 1.1 entity bean with container-managed persistence. The Java
language rules for overriding methods in subclasses requires the
signatures of the _ejbCreate_ methods in the subclass and the superclass
be the same.

[#50421764_pgfId-1377873]##The container is responsible for creating the
entity object’s representation in the underlying database, extracting
the primary key fields of the newly created entity object representation
in the database, and for creating an entity EJBObject reference for the
newly created entity object. The container must establish the primary
key before it invokes the ejbPostCreate method. The container may create
the representation of the entity in the database immediately after
ejbCreate returns, or it can defer it to a later time (for example to
the time after the matching ejbPostCreate has been called, or to the end
of the transaction).

[#50421764_pgfId-1377874]##The container then invokes the matching
ejbPostCreate method on the instance. The instance can discover the
primary key by calling the getPrimaryKey method on its entity context
object.

[#50421764_pgfId-1377875]##The container must invoke ejbCreate, perform
the database insert operation, and invoke ejbPostCreate in the
transaction context determined by the transaction attribute of the
matching create method, as described in EJB Core Contracts and
Requirements document link:Ejb.htm#50421764_39461[See EJB 3.2 Core
Contracts and Requirements. http://jcp.org/en/jsr/detail?id=345]
Subsection “Container-Managed Transaction Demarcation for Business
Methods”.

[#50421764_pgfId-1377879]##The container throws the
DuplicateKeyException if the newly created entity object would have the
same primary key as one of the existing entity objects within the same
home.

====== [#50421764_pgfId-1377881]##[#50421764_23629]##ejbRemove

[#50421764_pgfId-1377882]##The container invokes the ejbRemove method on
an entity bean instance with container-managed persistence in response
to a client-invoked remove operation on the entity bean’s remote home or
remote interface.

[#50421764_pgfId-1377883]##The entity Bean Provider can use the
ejbRemove method to implement any actions that must be done before the
entity object’s representation is removed from the database.

[#50421764_pgfId-1377884]##The container synchronizes the instance’s
state before it invokes the ejbRemove method. This means that the state
of the instance variables at the beginning of the ejbRemove method is
the same as it would be at the beginning of a business method.

[#50421764_pgfId-1377885]##After ejbRemove returns, the container
removes the entity object’s representation from the database.

[#50421764_pgfId-1377886]##The container must perform ejbRemove and the
database delete operation in the transaction context determined by the
transaction attribute of the invoked remove method, as described in EJB
Core Contracts and Requirements document link:Ejb.htm#50421764_39461[See
EJB 3.2 Core Contracts and Requirements.
http://jcp.org/en/jsr/detail?id=345] Subsection “Container-Managed
Transaction Demarcation for Business Methods”.

====== [#50421764_pgfId-1377890]##ejbLoad

[#50421764_pgfId-1377891]##When the container needs to synchronize the
state of an enterprise bean instance with the entity object’s state in
the database, the container reads the entity object’s state from the
database into the container-managed fields and then it invokes the
ejbLoad method on the instance.

[#50421764_pgfId-1377892]##The entity Bean Provider can rely on the
container’s having loaded the container-managed fields from the database
just before the container invokes the ejbLoad method. The entity bean
can use the ejbLoad method, for instance, to perform some computation on
the values of the fields that were read by the container (for example,
uncompressing text fields).

====== [#50421764_pgfId-1377893]##ejbStore

[#50421764_pgfId-1377894]##When the container needs to synchronize the
state of the entity object in the database with the state of the
enterprise bean instance, the container first calls the ejbStore method
on the instance, and then it extracts the container-managed fields and
writes them to the database.

[#50421764_pgfId-1377895]##The entity Bean Provider should use the
ejbStore method to set up the values of the container-managed fields
just before the container writes them to the database. For example, the
ejbStore method may perform compression of text before the text is
stored in the database.

====== [#50421764_pgfId-1377897]##[#50421764_25810]##Finder Hethods

[#50421764_pgfId-1377898]##The entity Bean Provider does not write the
finder (ejbFind<METHOD>) methods.

[#50421764_pgfId-1377899]##The finder methods are generated at the
entity bean deployment time using the Container Provider’s tools. The
tools can, for example, create a subclass of the entity bean class that
implements the ejbFind<METHOD> methods, or the tools can generate the
implementation of the finder methods directly in the class that
implements the entity bean’s remote home interface.

[#50421764_pgfId-1377900]##Note that the ejbFind<METHOD> names and
parameter signatures of EJB 1.1 entity beans do not provide the
container tools with sufficient information for automatically generating
the implementation of the finder methods for methods other than
ejbFindByPrimaryKey. Therefore, the Bean Provider is responsible for
providing a description of each finder method. The entity bean Deployer
uses container tools to generate the implementation of the finder
methods based in the description supplied by the Bean Provider. The
EJB1.1 component contract for container-managed persistence does not
specify the format of the finder method description.

====== [#50421764_pgfId-1377903]##Home Methods

[#50421764_pgfId-1377904]##The EJB1.1 entity bean contract does not
support _ejbHome_ methods.

====== [#50421764_pgfId-1377905]##Create Methods

[#50421764_pgfId-1377906]##The EJB1.1 entity bean contract does not
support _create<METHOD>_ methods.

====== [#50421764_pgfId-1377907]##Primary Key Type

[#50421764_pgfId-1377908]##The container must be able to manipulate the
primary key type. Therefore, the primary key type for an entity bean
with container-managed persistence must follow the rules in this
subsection, in addition to those specified in Subsection
link:Ejb.htm#50421764_10952[See Entity Bean’s Primary Key Class].

[#50421764_pgfId-1377912]##There are two ways to specify a primary key
class for an entity bean with container-managed persistence:

[#50421764_pgfId-1377913]##Primary key that maps to a single field in
the entity bean class.

[#50421764_pgfId-1377914]##Primary key that maps to multiple fields in
the entity bean class.

[#50421764_pgfId-1377915]##The second method is necessary for
implementing compound keys, and the first method is convenient for
single-field keys. Without the first method, simple types such as
_String_ would have to be wrapped in a user-defined class.

====== [#50421764_pgfId-1377916]##Primary Key that Maps to a Single Field in the Entity Bean Class

[#50421764_pgfId-1377917]##The Bean Provider uses the primkey-field
element of the deployment descriptor to specify the container-managed
field of the entity bean class that contains the primary key. The
field’s type must be the primary key type.

====== [#50421764_pgfId-1377918]##Primary Key that Maps to Multiple Fields in the Entity Bean Class

[#50421764_pgfId-1377919]##The primary key class must be public, and
must have a public constructor with no parameters.

[#50421764_pgfId-1377920]##All fields in the primary key class must be
declared as public.

[#50421764_pgfId-1377921]##The names of the fields in the primary key
class must be a subset of the names of the container-managed fields.
(This allows the container to extract the primary key fields from an
instance’s container-managed fields, and vice versa.)

====== [#50421764_pgfId-1377923]##Special Case: Unknown Primary Key Class

[#50421764_pgfId-1377924]##In special situations, the entity Bean
Provider may choose not to specify the primary key class for an entity
bean with container-managed persistence. This case usually happens when
the entity bean does not have a natural primary key, and the Bean
Provider wants to allow the Deployer to select the primary key fields at
deployment time. The entity bean’s primary key type will usually be
derived from the primary key type used by the underlying database system
that stores the entity objects. The primary key used by the database
system may not be known to the Bean Provider.

[#50421764_pgfId-1377925]##When defining the primary key for the
enterprise bean, the Deployer may sometimes need to subclass the entity
bean class to add additional container-managed fields (this typically
happens for entity beans that do not have a natural primary key, and the
primary keys are system-generated by the underlying database system that
stores the entity objects).

[#50421764_pgfId-1377927]##[#50421764_marker-1377926]##In this special
case, the type of the argument of the findByPrimaryKey method must be
declared as java.lang.Object, and the return value of ejbCreate must be
declared as java.lang.Object. The Bean Provider must specify the primary
key class in the deployment descriptor as of the type java.lang.Object.

[#50421764_pgfId-1377928]##The primary key class is specified at
deployment time in the situations when the Bean Provider develops an
entity bean that is intended to be used with multiple back-ends that
provide persistence, and when these multiple back-ends require different
primary key structures.

[#50421764_pgfId-1377929]##Use of entity beans with a deferred primary
key type specification limits the client application programming model,
because the clients written prior to deployment of the entity bean may
not use, in general, the methods that rely on the knowledge of the
primary key type.

[#50421764_pgfId-1377930]##The implementation of the enterprise bean
class methods must be done carefully. For example, the methods should
not depend on the type of the object returned from
_EntityContext.getPrimaryKey_ , because the return type is determined by
the Deployer after the EJB class has been written.

=== [#50421764_pgfId-1679837]##[#50421764_42191]##Support for JAX-RPC Web Service Endpoints

[#50421764_pgfId-1695669]##A stateless session bean may implement a
JAX-RPC web service endpoint. JAX-RPC web service endpoints are accessed
by Java clients through the JAX-RPC client APIs, which utilize an
XML-based protocol (SOAP 1.2 link:Ejb.htm#50421764_71506[See W3C: SOAP
1.2. http://www.w3.org/TR/SOAP/.]) over an HTTP transport.

[#50421764_pgfId-1695689]##A JAX-RPC web service client makes use of the
enterprise bean’s JAX-RPC web service client view corresponding to the
web service endpoint interface, as described by a WSDL document.

[#50421764_pgfId-1695614]##This chapter defines requirements for
stateless sessions beans and EJB containers that support JAX-RPC web
service endpoints. See EJB Core Contracts and Requirements document
link:Ejb.htm#50421764_39461[See EJB 3.2 Core Contracts and Requirements.
http://jcp.org/en/jsr/detail?id=345] for additional requirements that
apply to stateless session beans.

==== [#50421764_pgfId-1695190]##JAX-RPC Web Service Client View

image:Ejb-4.gif[image]

[#50421764_pgfId-1695195]##The JAX-RPC web service client obtains a
reference to the service object that implements the
_javax.xml.rpc.Service_ interface through dependency injection or using
JNDI. The service interface can be a generic _javax.xml.rpc.Service_
interface or a generated service interface which extends the
_javax.xml.rpc.Service_ interface. The service interface is then used to
obtain a stub or proxy that implements the session bean’s web service
endpoint interface. The mechanisms and APIs for client web service
access is described in the JAX-RPC specification
link:Ejb.htm#50421764_59732[See Java API for XML-based RPC (JAX-RPC)
2.0. http://jcp.org/en/jsr/detail?id=101.].

[#50421764_pgfId-1685086]##The following example illustrates how a Java
EE client looks up a web service in JNDI using a logical name called a
service reference (specified using the _service-ref_ element), obtains a
stub instance for a web service endpoint, and invokes a method on that
endpoint.

[#50421764_pgfId-1685087]##Context ctx = new InitialContext();

[#50421764_pgfId-1685088]##com.example.StockQuoteService sqs =
(com.example.StockQuoteService)

[#50421764_pgfId-1685089]##
ctx.lookup("java:comp/env/service/StockQuoteService");

[#50421764_pgfId-1685090]##com.example.StockQuoteProvider sqp =

[#50421764_pgfId-1685091]## sqs.getStockQuoteProviderPort();

[#50421764_pgfId-1685092]##float quotePrice =
sqp.getLastTradePrice("ACME");

[#50421764_pgfId-1685093]##...

[#50421764_pgfId-1695569]##The use of service references and the
_service-ref_ deployment descriptor element are described in further
detail in link:Ejb.htm#50421764_95378[See Web Services for Java EE,
version 1.3. http://jcp.org/en/jsr/detail?id=109.].

==== [#50421764_pgfId-1695575]##[#50421764_23539]##The Responsibilities of the Bean Provider

image:Ejb-4.gif[image]

[#50421764_pgfId-1695764]##This section describes the responsibilities
of the session Bean Provider to support JAX-RPC web service endpoints.
These requirements are in addition to those specified in the EJB Core
Contracts and Requirements document link:Ejb.htm#50421764_39461[See EJB
3.2 Core Contracts and Requirements.
http://jcp.org/en/jsr/detail?id=345].

====== [#50421764_pgfId-1695582]##Session Bean’s JAX-RPC Service Endpoint Interface

[#50421764_pgfId-1685251]##[#50421764_marker-1685250]##The following are
the requirements for stateless session beans with JAX-RPC web service
endpoint interfaces.

[#50421764_pgfId-1693277]##The interface must follow the rules for
JAX-RPC service endpoint interfaces link:Ejb.htm#50421764_59732[See Java
API for XML-based RPC (JAX-RPC) 2.0.
http://jcp.org/en/jsr/detail?id=101.].

[#50421764_pgfId-1685255]##The interface must extend the
_java.rmi.Remote_ interface.

[#50421764_pgfId-1685256]##The methods defined in the interface must
follow the rules for JAX-RPC service endpoint interfaces. This means
that their argument and return values must be of valid types for
JAX-RPC, and their _throws_ clauses must include the
java.rmi.RemoteException. The _throws_ clause may additionally include
application exceptions.

[#50421764_pgfId-1685257]## _Note that JAX-RPC Holder classes may be
used as method parameters. The JAX-RPC specification requires support
for Holder classes as part of the standard Java mapping of WSDL
operations in order to handle out and inout parameters. Holder classes
implement the javax.xml.rpc.holders.Holder interface. See the JAX-RPC
specification link:Ejb.htm#50421764_59732[See Java API for XML-based RPC
(JAX-RPC) 2.0. http://jcp.org/en/jsr/detail?id=101.] for further
details._

[#50421764_pgfId-1685261]##For each method defined in the web service
endpoint interface, there must be a matching method in the session
bean’s class. The matching method must have:

[#50421764_pgfId-1685262]##The same name.

[#50421764_pgfId-1685263]##The same number and types of arguments, and
the same return type.

[#50421764_pgfId-1685264]##All the exceptions defined in the _throws_
clause of the matching method of the session bean class must be defined
in the _throws_ clause of the method of the web service endpoint
interface.

[#50421764_pgfId-1685265]##The web service endpoint interface must not
include an EJBObject or EJBLocalObject as either a parameter or return
type. An array or JAX-RPC value type must not include an EJBObject or
EJBLocalObject as a contained element. The web service endpoint
interface methods must not expose business interface types, local or
remote component interface types, local or remote home interface types,
timers or timer handles, or the managed collection classes that are used
for entity beans with container-managed persistence as arguments or
results or as fields of value types.

[#50421764_pgfId-1685266]##JAX-RPC serialization rules apply for any
value types that are used by the web service endpoint interface. If it
is important that Java serialization semantics apply, the Bean Provider
should use the restricted set of JAX-RPC value types for which the
semantics of Java serialization apply under JAX-RPC serialization. See
the JAX-RPC specification link:Ejb.htm#50421764_59732[See Java API for
XML-based RPC (JAX-RPC) 2.0. http://jcp.org/en/jsr/detail?id=101.] for
details.

[#50421764_pgfId-1685270]##The web service endpoint interface must not
include constant (as _public final static_ ) declarations.

[#50421764_pgfId-1695416]##The Bean Provider must designate the web
service endpoint interface in the deployment descriptor by means of the
_service-endpoint_ element. The service endpoint itself is only exposed
within a web service if it is referenced by a web service deployment
descriptor as defined by link:Ejb.htm#50421764_95378[See Web Services
for Java EE, version 1.3. http://jcp.org/en/jsr/detail?id=109.].

====== [#50421764_pgfId-1695420]##MessageContext Interface

[#50421764_pgfId-1695275]##The _MessageContext_ interface allows the
stateless session bean instance to see the SOAP message for the web
service endpoint, as well as the properties set by the JAX-RPC SOAP
message handlers, if any. The stateless session bean may use the
_MessageContext_ interface to set properties for JAX-RPC message
response handlers.

[#50421764_pgfId-1695479]##A stateless session bean that implements a
web service endpoint using the JAX-RPC contracts accesses the JAX-RPC
_MessageContext_ interface by means of the
_SessionContext.getMessageContext_ method. The _getMessageContext_
method returns the _javax.xml.rpc.handler.MessageContext_ interface of a
stateless session bean that implements a JAX-RPC web service endpoint.

[#50421764_pgfId-1695493]##Only stateless session beans with web service
endpoint interfaces are permitted to use this method.

==== [#50421764_pgfId-1695494]##The Responsibilities of the Container Provider

image:Ejb-4.gif[image]

[#50421764_pgfId-1695909]##This section describes the responsibilities
of the Container Provider to support JAX-RPC web service endpoints.
These requirements are in addition to those specified in the EJB Core
Contracts and Requirements document link:Ejb.htm#50421764_39461[See EJB
3.2 Core Contracts and Requirements.
http://jcp.org/en/jsr/detail?id=345].

====== [#50421764_pgfId-1695368]##Generation of WSDL

[#50421764_pgfId-1695396]##Reference link:Ejb.htm#50421764_95378[See Web
Services for Java EE, version 1.3. http://jcp.org/en/jsr/detail?id=109.]
describes the generation of a WSDL document for a web service endpoint.
The Java to WSDL mapping must adhere to the requirements of JAX-RPC
specification link:Ejb.htm#50421764_59732[See Java API for XML-based RPC
(JAX-RPC) 2.0. http://jcp.org/en/jsr/detail?id=101.].

====== [#50421764_pgfId-1695400]##JAX-RPC Message Handlers for Web Service Endpoints

[#50421764_pgfId-1695401]##The container must support the use of JAX-RPC
message handlers for web service endpoints. Container requirements for
support of message handlers are specified in
link:Ejb.htm#50421764_95378[See Web Services for Java EE, version 1.3.
http://jcp.org/en/jsr/detail?id=109.].

[#50421764_pgfId-1685342]##If message handlers are present, they must be
invoked before any business method interceptor methods.

====== [#50421764_pgfId-1695500]##The SessionContext Interface Restrictions

[#50421764_pgfId-1695505]##Invoking the _getMessageContext_ method of
the _SessionContext interface_ is disallowed in session bean methods
that were not invoked by the container through the session bean’s web
service endpoint.

[#50421764_pgfId-1685184]## 

[#50421764_pgfId-1685156]## 

=== [#50421764_pgfId-1685062]##[#50421764_33330]##Support for Transactions

==== [#50421764_pgfId-1379359]##Overview

image:Ejb-4.gif[image]

[#50421764_pgfId-1689807]##This chapter defines requirements for
transaction support of entity beans in addition to the contracts
specified in the EJB Core Contracts and Requirements document
link:Ejb.htm#50421764_39461[See EJB 3.2 Core Contracts and Requirements.
http://jcp.org/en/jsr/detail?id=345] Chapter “Support for Transactions”.

==== [#50421764_pgfId-1379723]##Bean Provider’s Responsibilities

image:Ejb-4.gif[image]

[#50421764_pgfId-1693973]##This section defines the responsibilities of
the Bean Provider for transaction demarcation in entity beans. See the
corresponding section in the EJB Core Contracts and Requirements
document [link:Ejb.htm#50421764_39461[See EJB 3.2 Core Contracts and
Requirements. http://jcp.org/en/jsr/detail?id=345]] for the complete
description of the Bean Provider responsibilities.

====== [#50421764_pgfId-1379725]##[#50421764_21232]##Bean-Managed Versus Container-Managed Transaction Demarcation

[#50421764_pgfId-1609545]##[#50421764_marker-1609544]##An entity bean
must always use container-managed transaction demarcation. An entity
bean must not be designated with bean-managed transaction demarcation.

====== [#50421764_pgfId-1379751]##Isolation Levels

[#50421764_pgfId-1379754]##[#50421764_marker-1379753]##The isolation
level describes the degree to which the access to a resource manager by
a transaction is isolated from the access to the resource manager by
other concurrently executing transactions.

[#50421764_pgfId-1379755]##The following are guidelines for managing
isolation levels in entity beans:

[#50421764_pgfId-1462237]##The Container Provider should insure that
suitable isolation levels are provided to guarantee data consistency for
entity beans. Typically this means that an equivalent of a repeatable
read or serializable isolation level should be available for
applications that require a high degree of isolation.

[#50421764_pgfId-1550398]##For entity beans with container-managed
persistence, transaction isolation is managed by the data access classes
that are generated by the Container Provider’s tools. The tools must
ensure that the management of the isolation levels performed by the data
access classes will not result in conflicting isolation level requests
for a resource manager within a transaction.

====== [#50421764_pgfId-1595418]##[#50421764_85553]##Specification of the Transaction Attributes for a Bean’s Methods

[#50421764_pgfId-1689181]##[#50421764_marker-1689179]##The Bean Provider
of an enterprise bean with container-managed transaction demarcation may
specify the transaction attributes for the enterprise bean’s methods.

[#50421764_pgfId-1689182]##A transaction attribute is a value associated
with a method of an entity bean’s home or component interface.

{empty}[#50421764_pgfId-1595565]##The transaction attributes are
specified for the methods defined in the bean’s component interface and
all the direct and indirect superinterfaces of the component interface,
excluding the getEJBHome, _getEJBLocalHome_ , getHandle, getPrimaryKey,
and isIdentical methods; for the methods defined in the bean’s home
interface and all the direct and indirect superinterfaces of the home
interface, excluding the getEJBMetaData and getHomeHandle methods
specific to the remote home interface; and for the timeout callback
methods, if any.link:#pgfId-1623170[30]

[#50421764_pgfId-1426118]##For entity beans that use container-managed
persistence, only the _Required_ , _RequiresNew_ , or _Mandatory_
deployment descriptor transaction attribute values should be used for
the methods defined in the bean’s component interface and all the direct
and indirect superinterfaces of the component interface, excluding the
getEJBHome, _getEJBLocalHome_ , getHandle, getPrimaryKey, and
isIdentical methods; and for the methods defined in the bean’s home
interface and all the direct and indirect superinterfaces of the home
interface, excluding the getEJBMetaData and getHomeHandle methods
specific to the remote home interface.

[#50421764_pgfId-1568904]##The Bean Provider and Application Assembler
must exercise caution when using the _RequiresNew_ transaction
attributes with the navigation of container-managed relationships. If
higher levels of isolation are used, navigating a container-managed
relationship in a new transaction context may result in deadlock.

[#50421764_pgfId-1568905]##Containers may _optionally_ support the use
of the _NotSupported_ , _Supports_ , and _Never_ transaction attributes
for the methods of entity beans with container-managed persistence.
However, entity beans with container-managed persistence that use these
transaction attributes will not be portable.

[#50421764_pgfId-1512263]##Containers may optionally support the use of
the _NotSupported_ , _Supports_ , and _Never_ transaction attributes for
the methods of entity beans with container-managed persistence because
the use of these transaction modes may be needed to make use of
container-managed persistence with non-transactional data stores. In
general, however, the Bean Provider and Application Assembler should
avoid use _of the NotSupported_ _,_ _Supports_ , _and_ _Never_
_transaction attribute values for the methods of entity beans with
container-managed persistence because it may lead to inconsistent
results or to the inconsistent and/or to the partial updating of
persistent state and relationships in the event of concurrent use_ .

==== [#50421764_pgfId-1380215]##[#50421764_91403]##Container Provider Responsibilities

image:Ejb-4.gif[image]

[#50421764_pgfId-1689220]##This section defines the responsibilities of
the Container Provider for transaction demarcation in entity beans. See
the EJB Core Contracts and Requirements document
[link:Ejb.htm#50421764_39461[See EJB 3.2 Core Contracts and
Requirements. http://jcp.org/en/jsr/detail?id=345]] for the complete
description of the Container Provider responsibilities.

====== [#50421764_pgfId-1380287]##[#50421764_17975]##Container-Managed Transaction Demarcation for Entity Beans

[#50421764_pgfId-1380288]##The container is responsible for providing
the transaction demarcation for the entity beans with bean-managed
persistence and container-managed persistence.

[#50421764_pgfId-1693889]##The container must demarcate transactions as
specified by the transaction attribute values specified in the
deployment descriptor. See subsections of “Container-Managed Transaction
Demarcation for Business Methods” of the EJB Core Contracts and
Requirements document link:Ejb.htm#50421764_39461[See EJB 3.2 Core
Contracts and Requirements. http://jcp.org/en/jsr/detail?id=345] for the
available options and detailed description of the responsibilities of
the Container Provider.

=== [#50421764_pgfId-1379351]##[#50421764_13750]##Exception Handling

[#50421764_pgfId-1693984]##This chapter defines requirements for
exception handling of entity beans and JAX-RPC web service endpoints in
addition to the contracts specified in the EJB Core Contracts and
Requirements document link:Ejb.htm#50421764_39461[See EJB 3.2 Core
Contracts and Requirements. http://jcp.org/en/jsr/detail?id=345] Chapter
“Exception Handling”.

==== [#50421764_pgfId-1321911]##[#50421764_34822]##Application Exceptions

image:Ejb-4.gif[image]

[#50421764_pgfId-1689354]##The
[#50421764_marker-1689351]##javax.ejb.CreateException,
[#50421764_marker-1689352]##javax.ejb.RemoveException,
[#50421764_marker-1689353]##javax.ejb.FinderException, and subclasses
thereof are application exceptions used to report errors to the client
from the create, remove, and finder methods of the EJBHome and/or
EJBLocalHome interfaces of entity bean components (see Subsections
link:Ejb.htm#50421764_85765[See Standard Application Exceptions for
Entities] and link:Ejb.htm#50421764_30425[See Standard Application
Exceptions for Entities]). See rules for the application exceptions
defined in the corresponding section of the EJB Core Contracts and
Requirements document link:Ejb.htm#50421764_39461[See EJB 3.2 Core
Contracts and Requirements. http://jcp.org/en/jsr/detail?id=345].

==== [#50421764_pgfId-1689362]##Bean Provider’s Responsibilities

image:Ejb-4.gif[image]

[#50421764_pgfId-1694131]##This section defines the responsibilities of
the Bean Provider for exception handling of entity beans in addition to
the Bean Provider’s responsibilities specified in the corresponding
section in the EJB Core Contracts and Requirements document
[link:Ejb.htm#50421764_39461[See EJB 3.2 Core Contracts and
Requirements. http://jcp.org/en/jsr/detail?id=345]].

====== [#50421764_pgfId-1694126]##Application Exceptions

[#50421764_pgfId-1694122]##The Bean Provider is responsible for using
the standard EJB application exceptions (javax.ejb.CreateException,
javax.ejb.RemoveException, javax.ejb.FinderException, and subclasses
thereof) for entity beans as described in Subsections
link:Ejb.htm#50421764_85765[See Standard Application Exceptions for
Entities] and link:Ejb.htm#50421764_30425[See Standard Application
Exceptions for Entities].

====== [#50421764_pgfId-1694148]##[#50421764_33935]##System Exceptions

[#50421764_pgfId-1694149]##The Bean Provider should handle various
system-level exceptions and errors that an entity bean instance may
encounter during the execution of a business method (e.g. ejbLoad).

====== [#50421764_pgfId-1694150]##javax.ejb.NoSuchEntityException

[#50421764_pgfId-1321962]##The
[#50421764_marker-1503305]##NoSuchEntityException is a subclass of
EJBException. It should be thrown by the entity bean class methods to
indicate that the underlying entity has been removed from the database.

[#50421764_pgfId-1321964]##[#50421764_marker-1321963]##A bean-managed
persistence entity bean class typically throws this exception from the
ejbLoad and ejbStore methods, and from the methods that implement the
business methods defined in the component interface.

==== [#50421764_pgfId-1321966]##[#50421764_28132]##Container Provider Responsibilities

image:Ejb-4.gif[image]

[#50421764_pgfId-1690487]##This section defines the responsibilities of
the Container Provider for exception handling of entity beans in
addition to the Container Provider’s responsibilities specified in the
corresponding section in the EJB Core Contracts and Requirements
document [link:Ejb.htm#50421764_39461[See EJB 3.2 Core Contracts and
Requirements. http://jcp.org/en/jsr/detail?id=345]].

====== [#50421764_pgfId-1350175]##[#50421764_18294]##Exceptions from Method Invoked via Entity Bean’s Client View

[#50421764_pgfId-1689428]##The following entity bean methods:
ejbCreate<METHOD>, ejbPostCreate<METHOD>, ejbRemove, _ejbHome<METHOD>_ ,
and ejbFind<METHOD> are considered to be business methods in this
context.

[#50421764_pgfId-1694389]##Rules for exception handling of these methods
are specified in the Table “Handling of Exceptions Thrown by Methods of
Web Service Client View or EJB 2.1 Client View of a Bean with
Container-Managed Transaction Demarcation” of the EJB Core Contracts and
Requirements document [link:Ejb.htm#50421764_39461[See EJB 3.2 Core
Contracts and Requirements. http://jcp.org/en/jsr/detail?id=345]].

====== [#50421764_pgfId-1322123]##[#50421764_marker-1321974]##[#50421764_32157]##Exceptions from Other Container-invoked Callbacks

[#50421764_pgfId-1694282]##This subsection applies to the ejbActivate,
ejbLoad, ejbPassivate, ejbStore, setEntityContext, and
unsetEntityContext container-invoked callbacks methods of the EntityBean
interface.

[#50421764_pgfId-1694284]##The container must handle all exceptions or
errors from these methods as follows:

[#50421764_pgfId-1676782]##Log the exception or error to bring the
problem to the attention of the System Administrator.

[#50421764_pgfId-1676783]##If the instance is in a transaction, mark the
transaction for rollback.

[#50421764_pgfId-1322132]##Discard the instance (i.e., the container
must not invoke any business methods or container callbacks on the
instance).

[#50421764_pgfId-1610157]##If the exception or error happened during the
processing of a client invoked method, throw the
_javax.ejb.EJBExceptionlink:#pgfId-1613873[31]_ . If the EJB 2.1 client
view or web service client view is used, throw the
java.rmi.RemoteException to the client if the client is a remote client
or throw the _javax.ejb.EJBException_ to the client if the client is a
local client. If the instance executed in the client’s transaction, the
container should throw the
_javax.ejb.EJBTransactionRolledbackExceptionlink:#pgfId-1613886[32]_ .
If the EJB 2.1 client view or web service client view is used, the
container should throw the
javax.transaction.TransactionRolledbackException to a remote client or
the _javax.ejb.TransactionRolledbackLocalException_ to a local client,
because it provides more information to the client. (The client knows
that it is fruitless to continue the transaction.)

====== [#50421764_pgfId-1322134]##javax.ejb.NoSuchEntityException

[#50421764_pgfId-1610161]##The
[#50421764_marker-1503310]##NoSuchEntityException is a subclass of
EJBException. If it is thrown by a method of an entity bean class, the
container must handle the exception using the rules in Sections
link:Ejb.htm#50421764_18294[See Exceptions from Method Invoked via
Entity Bean’s Client View] and link:Ejb.htm#50421764_32157[See
Exceptions from Other Container-invoked Callbacks].

[#50421764_pgfId-1322142]##To give the client a better indication of the
cause of the error, the container should throw the
java.rmi.NoSuchObjectException (which is a subclass of
java.rmi.RemoteException) to a remote client, or the
_javax.ejb.NoSuchObjectLocalException_ to a local client.

====== [#50421764_pgfId-1322143]##[#50421764_38117]##Non-existing Entity Object

[#50421764_pgfId-1472332]##If a client makes a call to an entity object
that has been removed, the container should throw the
_javax.ejb.NoSuchEJBExceptionlink:#pgfId-1613908[33]_ . If the EJB 2.1
client view is used, the container should throw the
[#50421764_marker-1503311]##java.rmi.NoSuchObjectException (which is a
subclass of java.rmi.RemoteException) to a remote client, or the
_javax.ejb.NoSuchObjectLocalException_ to a local client.

====== [#50421764_pgfId-1322161]##Support for Deprecated Use of java.rmi.RemoteException

[#50421764_pgfId-1322163]##[#50421764_marker-1322162]##The EJB 1.0
specification allowed the business methods, ejbCreate, ejbPostCreate,
ejbFind<METHOD>, ejbRemove, and the container-invoked callbacks (i.e.,
the methods defined in the EntityBean interface) implemented in the
enterprise bean class to use the java.rmi.RemoteException to report
non-application exceptions to the container.

[#50421764_pgfId-1694319]##See the corresponding section in the EJB Core
Contracts and Requirements document [link:Ejb.htm#50421764_39461[See EJB
3.2 Core Contracts and Requirements.
http://jcp.org/en/jsr/detail?id=345]] for the rules on support of the
deprecated use of java.rmi.RemoteException.

==== [#50421764_pgfId-1322168]##[#50421764_26439]##Client’s View of Exceptions

image:Ejb-4.gif[image]

[#50421764_pgfId-1612915]##The JAX-RPC web service endpoint interface is
Java RMI interface, and therefore the _throws_ clauses of all its
methods (including those inherited from superinterfaces) include the
mandatory [#50421764_marker-1503314]##java.rmi.RemoteException.The
_throws_ clauses may include an arbitrary number of application
exceptions.

[#50421764_pgfId-1689497]##See the corresponding section in the EJB Core
Contracts and Requirements document [link:Ejb.htm#50421764_39461[See EJB
3.2 Core Contracts and Requirements.
http://jcp.org/en/jsr/detail?id=345]] for the client’s view of
exceptions received from from enterprise beans and web service
endpoints.

=== [#50421764_pgfId-1485265]##[#50421764_19729]##[#50421764_52768]##Support for Distributed Interoperability

[#50421764_pgfId-1694512]##The JAX-RPC specification
link:Ejb.htm#50421764_59732[See Java API for XML-based RPC (JAX-RPC)
2.0. http://jcp.org/en/jsr/detail?id=101.] describes requirements for
interoperability with other JAX-RPC implementations and XML based RPC
products.

[#50421764_pgfId-1695128]##This chapter defines requirements for
interoperability of entity beans in addition to the contracts specified
in the EJB Core Contracts and Requirements document
link:Ejb.htm#50421764_39461[See EJB 3.2 Core Contracts and Requirements.
http://jcp.org/en/jsr/detail?id=345] Chapter “Support for Distributed
Interoperability”.

==== [#50421764_pgfId-1485477]##Mapping Objects Returned by Entity Bean Finder Methods to IDL

image:Ejb-4.gif[image]

[#50421764_pgfId-1485479]##[#50421764_marker-1485478]##The _Enumeration_
or _Collection_ objects returned by entity bean finder methods are value
types that are mapped to IDL abstract value types or abstract interfaces
using the rules in the Java Language to IDL Mapping.

=== [#50421764_pgfId-1684690]##[#50421764_49136]##Timer Service

[#50421764_pgfId-1684691]##This chapter defines limitations of the EJB
container-managed timer service when used with EJB 2.1 entity beans.

==== [#50421764_pgfId-1684700]##[#50421764_31464]##Bean Provider’s View of the Timer Service

image:Ejb-4.gif[image]

[#50421764_pgfId-1663713]##Timers can be created for EJB 2.1 entity
beans. A timer that is created for the EJB 2.1 entity bean is associated
with the entity bean’s identity.

[#50421764_pgfId-1684713]##Use of the EJB Timer Service is not supported
for an EJB 1.1 entity bean with container-managed persistence.

====== [#50421764_pgfId-1643838]##[#50421764_12531]##Calendar-Based Time Expressions

[#50421764_pgfId-1658182]##Calendar based timers are not supported for
entity beans.

====== [#50421764_pgfId-1649427]##Non-persistent Timers

[#50421764_pgfId-1658187]##Non-persistent timers are not supported for
entity beans.

====== [#50421764_pgfId-1649425]##[#50421764_26273]##The TimerService Interface

[#50421764_pgfId-1590233]##For an EJB 2.1 entity bean, the result of
_getTimers_ is a collection of those timers that are associated with the
bean’s identity.

====== [#50421764_pgfId-1644267]##[#50421764_39076]##Timer Expiration and Timeout Callback Method

[#50421764_pgfId-1558069]##If a timer for an EJB 2.1 entity bean
expires, and the bean has been passivated, the container must call the
_ejbActivate_ and _ejbLoad_ methods on the entity bean class before
calling the timeout callback method, as described in Sections
link:Ejb.htm#50421764_36556[See Container’s View] and
link:Ejb.htm#50421764_28592[See Container’s View].

====== [#50421764_pgfId-1558256]##Entity Bean Removal

[#50421764_pgfId-1558274]##If an entity bean is removed, the container
must remove the timers for that bean.

=== [#50421764_pgfId-1558258]##[#50421764_84706]##Deployment Descriptor

[#50421764_pgfId-1693372]##This chapter defines the EJB deployment
descriptor elements and the Bean Provider and the Application Assembler
responsibilities corresponding to entity beans. The rules defined in
this chapter are in addition to the rules defined in the Chapter 14 of
the EJB Core Contracts and Requirements document
link:Ejb.htm#50421764_39461[See EJB 3.2 Core Contracts and Requirements.
http://jcp.org/en/jsr/detail?id=345].

[#50421764_pgfId-1693382]##See EJB Core Contracts and Requirements
document link:Ejb.htm#50421764_39461[See EJB 3.2 Core Contracts and
Requirements. http://jcp.org/en/jsr/detail?id=345] for the complete XML
Schema for the EJB 3.2 deployment descriptor.

==== [#50421764_pgfId-1693377]##[#50421764_87744]##Bean Provider’s Responsibilities

image:Ejb-4.gif[image]

[#50421764_pgfId-1693393]##The Bean Provider is responsible for
providing the following structural information for each entity bean in
the deployment descriptor.

[#50421764_pgfId-1385825]## _Re-entrancy indication_
[#50421764_marker-1503473]##. The Bean Provider must specify whether an
entity bean is re-entrant.

[#50421764_pgfId-1684595]##Entity bean’s persistence management.
[#50421764_marker-1385831]##If the enterprise bean is an entity bean,
the Bean Provider must use the persistence-type element to declare
whether persistence management is performed by the enterprise bean or by
the container.

[#50421764_pgfId-1385834]##Entity bean’s primary key class.
[#50421764_marker-1385833]##If the enterprise bean is an entity bean,
the Bean Provider specifies the fully-qualified name of the entity
bean’s primary key class in the prim-key-class element. The Bean
Provider must specify the primary key class for an entity with
bean-managed persistence.

[#50421764_pgfId-1385835]##Entity bean’s abstract schema name. If the
enterprise bean is an entity bean with container-managed persistence and
_cmp-version_ _2.x_ , the Bean Provider must specify the
[#50421764_marker-1503474]##abstract schema name of the entity bean
using the [#50421764_marker-1503475]##abstract-schema-name element.

[#50421764_pgfId-1385837]##Container-managed fields.
[#50421764_marker-1385836]##If the enterprise bean is an entity bean
with container-managed persistence, the Bean Provider must specify the
container-managed fields using the cmp-field elements.

[#50421764_pgfId-1385839]##Container-managed relationships. If the
enterprise bean is an entity bean with container-managed persistence and
_cmp-version_ _2.x_ , the Bean Provider must specify the
[#50421764_marker-1503476]##container-managed relationships of the
entity bean using the [#50421764_marker-1503477]##relationships element.

[#50421764_pgfId-1385841]##Finder and select queries. If the enterprise
bean is an entity bean with container-managed persistence and
_cmp-version_ _2.x_ , the Bean Provider must use the _query_
[#50421764_marker-1503478]## element to specify any EJB QL finder or
select query for the entity bean other than a query for the
_findByPrimaryKey_ method.

[#50421764_pgfId-1385863]##.

==== [#50421764_pgfId-1561183]##[#50421764_60935]##Application Assembler’s Responsibility

image:Ejb-4.gif[image]

[#50421764_pgfId-1385874]##The Application Assembler may modify the
following information that was specified by the Bean Provider:

[#50421764_pgfId-1385877]## _Relationship names for EJB 2.x entity
beans._ If multiple ejb-jar files use the same names for relationships
and are merged into a single ejb-jar file, it is the responsibility of
the Application Assembler to modify the relationship names defined in
the _ejb-relation-name_ elements.

[#50421764_pgfId-1454623]##In general, the Application Assembler should
never modify any of the following.

[#50421764_pgfId-1385882]##Enterprise bean’s abstract schema name. The
Application Assembler should not change the enterprise bean’s name
defined in the abstract-schema-name element since EJB QL queries may
depend on the content of this element.

[#50421764_pgfId-1512290]##Relationship role source element. The
Application Assembler should not change the value of an ejb-name element
in the _relationship-role-source_ [#50421764_marker-1503490]## element.

[#50421764_pgfId-1685573]##If any of these elements must be modified by
the Application Assembler in order to resolve name clashes during the
merging of ejb-jar files, the Application Assembler must also modify all
ejb-ql query strings that depend on the value of the modified
element(s).

[#50421764_pgfId-1688839]## 

[#50421764_pgfId-1663309]## 

[#50421764_pgfId-1660071]## 

[#50421764_pgfId-1660072]## 

[#50421764_pgfId-1660073]## 

[#50421764_pgfId-1660074]## 

[#50421764_pgfId-1657098]## 

[#50421764_pgfId-1657099]## 

[#50421764_pgfId-1657100]## 

=== [#50421764_pgfId-1684387]##[#50421764_32342]##Packaging Restrictions

==== [#50421764_pgfId-1684389]##Restrictions

image:Ejb-4.gif[image]

[#50421764_pgfId-1652225]##Entity Beans are not supported within .war
files. These component types must only be packaged in a stand-alone
ejb-jar file or an ejb-jar file packaged within an .ear file.

[#50421764_pgfId-1684422]##JAX-RPC based web service endpoints are not
supported within _.war_ files. These endpoints must be only be packaged
in a stand-alone ejb-jar file or an ejb-jar file packaged within an .ear
file.

[#50421764_pgfId-1684423]##Entity Beans and JAX-RPC based web service
endpoints are not supported with the EJB 3.2 Lite API (see EJB Core
Contracts and Requirements document link:Ejb.htm#50421764_39461[See EJB
3.2 Core Contracts and Requirements.
http://jcp.org/en/jsr/detail?id=345], Subsection “EJB 3.2 Lite”).

[#50421764_pgfId-1659781]## 

[#50421764_pgfId-1658265]## 

[#50421764_pgfId-1658263]## 

[#50421764_pgfId-1658255]## 

=== [#50421764_pgfId-1324796]##[#50421764_40637]##Related Documents

[#50421764_pgfId-1689093]##Enterprise JavaBeans™, version 3.2. (this
specification) _http://jcp.org/en/jsr/detail?id=3_ 45

[#50421764_pgfId-1694948]##[#50421764_53103]##Enterprise JavaBeans™,
version 3.1. (EJB 3.1). _http://jcp.org/en/jsr/detail?id=318_ .

[#50421764_pgfId-1692686]##[#50421764_91741]##Enterprise JavaBeans™,
version 2. (EJB 2.1).
http://www.oracle.com/technetwork/java/javaee/ejb/index.html.

[#50421764_pgfId-1694971]##[#50421764_29642]##Java™ Persistence API,
version 2.1. _http://jcp.org/en/jsr/detail?id=338_ .

[#50421764_pgfId-1692690]##[#50421764_61557]##Java™ Naming and Directory
Interface 1.2 Specification (JNDI).
http://docs.oracle.com/javase/7/docs/technotes/guides/jndi/index.html.

[#50421764_pgfId-1324801]##[#50421764_12984]##Java Remote Method
Invocation (RMI).
http://docs.oracle.com/javase/7/docs/technotes/guides/rmi/.

[#50421764_pgfId-1324808]##[#50421764_10009]##IDL To Java™ Language
Mapping Specification. http://www.omg.org/cgi-bin/doc?ptc/2000-01-08.

[#50421764_pgfId-1324814]##[#50421764_27438]##Java™ Platform, Enterprise
Edition Specification Version 7 (Java EE).
_http://jcp.org/en/jsr/detail?id=342_ .

[#50421764_pgfId-1368161]##[#50421764_22389]##Java 2 Enterprise Edition
Connector Architecture, v1.7. _http://jcp.org/en/jsr/detail?id=322_ .

[#50421764_pgfId-1694460]##[#50421764_35665]##Database Language SQL.
ANSI X3.135-1992 or ISO/IEC 9075:1992.

[#50421764_pgfId-1694462]##[#50421764_59732]##Java API for XML-based RPC
(JAX-RPC) 2.0. _http://jcp.org/en/jsr/detail?id=101._

[#50421764_pgfId-1694464]##[#50421764_24689]##Web Services Description
Language (WSDL) 1.1. _http://www.w3.org/TR/wsdl._

[#50421764_pgfId-1560869]##[#50421764_48748]##The Java Virtual Machine
Specification.

[#50421764_pgfId-1587771]##[#50421764_15305]##JDBC™ 4.1 API (JDBC
specification). http://jcp.org/en/jsr/detail?id=221.

[#50421764_pgfId-1601866]##[#50421764_67503]##Web Services Metadata for
the Java Platform, version 2.1. _http://jcp.org/en/jsr/detail?id=181._

[#50421764_pgfId-1605711]##[#50421764_95378]##Web Services for Java EE,
version 1.3. _http://jcp.org/en/jsr/detail?id=109._

[#50421764_pgfId-1695697]##[#50421764_71506]##W3C: SOAP 1.2.
http://www.w3.org/TR/SOAP/.

[#50421764_pgfId-1689778]##[#50421764_39461]##EJB 3.2 Core Contracts and
Requirements. _http://jcp.org/en/jsr/detail?id=345_

[#50421764_pgfId-1590182]## 

=== [#50421764_pgfId-1601740]##Revision History

[#50421764_pgfId-1601748]##This appendix lists the significant changes
that have been made to this document during the development of this
Specification.

====== [#50421764_pgfId-1692217]##Early Draft

image:Ejb-4.gif[image]

[#50421764_pgfId-1642379]##Created document from the EJB 3.2 Draft.

====== [#50421764_pgfId-1692290]##Early Draft 2

image:Ejb-4.gif[image]

[#50421764_pgfId-1692929]##Updated the expert group list.

====== [#50421764_pgfId-1692930]##Public Draft

image:Ejb-4.gif[image]

[#50421764_pgfId-1692931]##Removed Interceptors specification from the
list of the EJB 3.2 set of documents

[#50421764_pgfId-1692507]##Minor editorial changes

[#50421764_pgfId-1692288]##Updated related documents to their latest
versions where applicable

[#50421764_pgfId-1693766]##Replaced section number with the section
title when referencing EJB Core Contracts and Requirements document.

[#50421764_pgfId-1693908]##Removed text from
link:Ejb.htm#50421764_33330[See Support for Transactions] that is
exactly the same as in the EJB Core Contracts and Requirements document.
Added references to the corresponding sections with the complete rules.

[#50421764_pgfId-1694361]##Removed text from
link:Ejb.htm#50421764_13750[See Exception Handling] that is exactly the
same as in the EJB Core Contracts and Requirements document. Added
references to the corresponding sections with the complete rules.

[#50421764_pgfId-1694632]##Removed most of the text from
link:Ejb.htm#50421764_19729[See Support for Distributed
Interoperability] as it was an unnecessary duplication of the
corresponding chapter in the EJB Core Contracts and Requirements
document. Left only section “Mapping Objects Returned by Entity Bean
Finder Methods to IDL”

[#50421764_pgfId-1694647]##Removed chapters “Enterprise Bean
Environment” and “Security Management” as it was an unnecessary
duplication of the corresponding chapters in the EJB Core Contracts and
Requirements document.

====== [#50421764_pgfId-1695002]##Proposed Final Draft

image:Ejb-4.gif[image]

[#50421764_pgfId-1695003]##Minor editorial changes

[#50421764_pgfId-1695010]##Updated to the final versions of the related
documents

[#50421764_pgfId-1695008]##Changed the rule for optional feature support
for CMP/BMP beans and EJBQL to be that if any of the features is
supported, all these features must be supported

====== [#50421764_pgfId-1695175]##Final Release Candidate

image:Ejb-4.gif[image]

[#50421764_pgfId-1695176]##Editorial changes

{empty}[#50421764_pgfId-1695934]##Rearranged sections in the
link:Ejb.htm#50421764_42191[See Support for JAX-RPC Web Service
Endpoints]

====== [#50421764_pgfId-1695935]##Final Release

image:Ejb-4.gif[image]

[#50421764_pgfId-1695923]##Minor editorial changes

'''''

[.footnoteNumber]# 1.# [#50421764_pgfId-1691164]##More literally,
references are passed by value in the JVM: an argument variable of
primitive type holds a value of that primitive type; an argument
variable of a reference type hold a reference to the object. See
link:Ejb.htm#50421764_48748[See The Java Virtual Machine
Specification.].

[.footnoteNumber]# 2.# [#50421764_pgfId-1263686]##The _findByPrimaryKey_
method is mandatory for the remote home interface of all entity beans.

[.footnoteNumber]# 3.# [#50421764_pgfId-1691179]##The _findByPrimaryKey_
method is mandatory for the local home interface of all Entity Beans.

[.footnoteNumber]# 4.# [#50421764_pgfId-1488090]##At this point it must
appear to the application that the entity has been removed from the
persistent store. If the container employs an optimistic caching
strategy and defers the removal of the entity from the database (e.g.,
to the end of transaction), this must be invisible to the application.

[.footnoteNumber]# 5.# [#50421764_pgfId-1461252]##The relation names and
the relationship role names are not used in the code provided by the
Bean Provider.

[.footnoteNumber]# 6.# [#50421764_pgfId-1433270]##An entity bean has no
_ejbCreate_ _<METHOD>_ and _ejbPostCreate_ _<METHOD>_ methods if it does
not define any create methods in its home interface. Such an entity bean
does not allow its clients to create new EJB objects. The entity bean
restricts the clients to accessing entities that were created through
direct database inserts.

[.footnoteNumber]# 7.# [#50421764_pgfId-1488144]##The above requirement
is to allow the creation of an entity bean with bean-managed persistence
by subclassing an entity bean with container-managed persistence.

[.footnoteNumber]# 8.# [#50421764_pgfId-1485047]##Containers using
optimistic caching strategies, for example, may rollback the transaction
at a later point.

[.footnoteNumber]# 9.# [#50421764_pgfId-1629675]##The ability to refresh
the state of a read-only bean and the intervals at which such refresh
occurs are vendor-specific.

[.footnoteNumber]# 10.# [#50421764_pgfId-1629689]##For example, an
implementation might choose to ignore such updates or to disallow them.

[.footnoteNumber]# 11.# [#50421764_pgfId-1433595]##The
_findByPrimaryKey_ method is mandatory for all entity beans.

[.footnoteNumber]# 12.# [#50421764_pgfId-1629739]##It is consistent with
this specification to provide options for this refresh to be deferred or
avoided in the case of read-only beans.

[.footnoteNumber]# 13.# [#50421764_pgfId-1433917]##If the entity bean
class does implement the component interface, care must be taken to
avoid passing of this as a method argument or result. This potential
error can be avoided by choosing not to implement the component
interface in the entity bean class.

[.footnoteNumber]# 14.# [#50421764_pgfId-1640686]##Not currently used in
EJB QL; reserved for future use.

[.footnoteNumber]# 15.# [#50421764_pgfId-1640699]##Use of ejb-names in
EJB QL is reserved for future use.

[.footnoteNumber]# 16.# [#50421764_pgfId-1640868]##Refer to
link:Ejb.htm#50421764_35665[See Database Language SQL. ANSI X3.135-1992
or ISO/IEC 9075:1992.] for a more precise characterization of these
rules.

[.footnoteNumber]# 17.# [#50421764_pgfId-1640898]##The use of the
reserved word OF is optional in this expression.

[.footnoteNumber]# 18.# [#50421764_pgfId-1640910]##These functions are a
subset of the functions defined for JDBC 2.0 and later drivers, as
described in Appendix D of the JDBC specification
link:Ejb.htm#50421764_15305[See JDBC™ 4.1 API (JDBC specification).
http://jcp.org/en/jsr/detail?id=221.].

[.footnoteNumber]# 19.# [#50421764_pgfId-1640919]##Containers and
databases may not support the use of the optional, third argument of the
LOCATE function. Portable applications should therefore avoid use of
this argument.

[.footnoteNumber]# 20.# [#50421764_pgfId-1640967]##It is legal to
specify DISTINCT with MAX or MIN, but it does not affect the result.

[.footnoteNumber]# 21.# [#50421764_pgfId-1201979]##An entity Bean has no
_ejbCreate<METHOD>_ and _ejbPostCreate<METHOD>_ methods if it does not
define any create methods in its home interface. Such an entity bean
does not allow the clients to create new entity objects. The entity bean
restricts the clients to accessing entities that were created through
direct database inserts.

[.footnoteNumber]# 22.# [#50421764_pgfId-1588502]##The EJB specification
does not require the distributed flushing of state. The container in
which the _ejbFind<METHOD>_ method executes is not required to propagate
the flush to a different container.

{empty}[.footnoteNumber]# 23.# [#50421764_pgfId-1630809]##The ability to
refresh the state of a read-only bean and the intervals at which such
refresh occurs are vendor-specific.]

[.footnoteNumber]# 24.# [#50421764_pgfId-1630813]##For example, an
implementation might choose to ignore such updates or to disallow them.

[.footnoteNumber]# 25.# [#50421764_pgfId-1630829]##This call may be
omitted if the bean has been specified as read-only.

[.footnoteNumber]# 26.# [#50421764_pgfId-1307572]##This applies also to
the Never and Supports attribute.

[.footnoteNumber]# 27.# [#50421764_pgfId-1630834]##This ejbStore call
may be omitted if the bean has been specified as read-only.

[.footnoteNumber]# 28.# [#50421764_pgfId-1259713]##The finder will be
also compatible with Java 2-based containers and clients.

[.footnoteNumber]# 29.# [#50421764_pgfId-1211384]##If the entity bean
class does implement the component interface, care must be taken to
avoid passing of this as a method argument or result. This potential
error can be avoided by choosing not to implement the component
interface in the entity bean class.

[.footnoteNumber]# 30.# [#50421764_pgfId-1623170]##Note that the
deployment descriptor must be used to specify transaction attributes for
entity bean methods if the transaction attribute is not _Required_ (the
default value)

[.footnoteNumber]# 31.# [#50421764_pgfId-1613873]##If the business
interface is a remote business interface that extends _java.rmi.Remote_
, the _java.rmi.RemoteException_ is thrown to the client instead.

[.footnoteNumber]# 32.# [#50421764_pgfId-1613886]##If the business
interface is a remote business interface that extends _java.rmi.Remote_
, the _javax.transaction.TransactionRolledbackException_ is thrown to
the client instead.

[.footnoteNumber]# 33.# [#50421764_pgfId-1613908]##If the business
interface is a remote business interface that extends _java.rmi.Remote_
, the _java.rmi.NoSuchObjectException_ is thrown to the client instead.
